jobs:
# Configure, build, install, and test job
- job: 'linux_build'
  displayName: 'Linux Builds'
  timeoutInMinutes: 120
  variables:
    CTEST_OUTPUT_ON_FAILURE: 1
    MKL_CBWR: AUTO
  strategy:
    maxParallel: 8
    matrix:
      gcc_7:
        CXX_COMPILER: 'g++-7'
        PYTHON_VER: '3.8'
        C_COMPILER: 'gcc-7'
        F_COMPILER: 'gfortran'
        BUILD_TYPE: 'release'
        APT_INSTALL: 'gfortran gcc-7 g++-7'
        vmImage: 'ubuntu-20.04'

      gcc_latest:
        CXX_COMPILER: 'g++'
        PYTHON_VER: '3.9'
        C_COMPILER: 'gcc'
        F_COMPILER: 'gfortran'
        BUILD_TYPE: 'release'
        APT_INSTALL: 'gfortran'
        vmImage: 'ubuntu-20.04'

      clang_latest:
        CXX_COMPILER: 'clang++'
        PYTHON_VER: '3.9'
        C_COMPILER: 'clang'
        F_COMPILER: 'gfortran'
        BUILD_TYPE: 'release'
        APT_INSTALL: 'gfortran clang-6.0'
        vmImage: 'ubuntu-20.04'

  pool:
    vmImage: $(vmImage)
  
  steps:
  - bash: |
      [[ "${APT_REPOSITORY}" ]] && echo "Add Repo ${APT_REPOSITORY}" && sudo add-apt-repository "${APT_REPOSITORY}"
      sudo apt-get update
      sudo apt-get install ${APT_INSTALL}
    displayName: "Apt-Get Packages"

  - bash: |
      echo "" && echo "Ubuntu"
      lsb_release -a

      echo "" && echo "Uname:"
      uname -a

      echo "" && echo "Free:"
      free -m

      echo "" && echo "df:"
      df -h

      echo "" && echo "Ulimit:"
      ulimit -a

      echo "" && echo "Nprocs:"
      getconf _NPROCESSORS_ONLN

      echo "CXX Ver:"
      ${CXX_COMPILER} --version
      ${CXX_COMPILER} -v

      echo "F Ver:"
      ${F_COMPILER} --version

      echo "C Ver:"
      ${C_COMPILER} --version
    displayName: "Setup Information"

  - bash: |
        echo "##vso[task.prependpath]$CONDA/bin"
        conda config --set always_yes yes
    displayName: "Add Conda to PATH"

  - bash: |
      conda create -q \
        -n p4env \
        python=$PYTHON_VER \
        psi4/label/dev::gau2grid \
        psi4/label/dev::libint2=*=h2fe1556_15 \
        psi4/label/dev::libxc=5 \
        psi4/label/dev::dftd3 \
        psi4/label/dev::gcp \
        psi4/label/dev::pybind11-headers \
        blas=*=mkl \
        mkl-include \
        networkx \
        pytest>=7.0.1 \
        eigen \
        pytest-xdist \
        msgpack-python \
        conda-forge::qcelemental \
        conda-forge::qcengine=0.25.0 \
        conda-forge::optking \
        scipy
      source activate p4env
      which python
      conda list
    displayName: 'Build Environment'

  - bash: |
      source activate p4env
      python -V
      python -c 'import numpy; print(numpy.version.version)'
      export CXX=${CXX_COMPILER}
      export CC=${C_COMPILER}
      export FC=${F_COMPILER}
      # * can't use conda dist of the more complicated lib pkgs (e.g., CheMPS2, PCMSolver, v2rdm)
      #   b/c their c++ symbols don't mix with the different Travis compilers. for other
      #   reasons, pkgs are being compiled less statically, sad for CI.
      # * can't enable trivial plugins b/c no psi4 for them to detect at start (e.g., snsmp2)
      cmake -Bbuild -S. \
        -DCMAKE_CXX_COMPILER=${CXX_COMPILER} \
        -DCMAKE_C_COMPILER=${C_COMPILER} \
        -DCMAKE_Fortran_COMPILER=${F_COMPILER} \
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
        -DMAX_AM_ERI=5 \
        -DCMAKE_PREFIX_PATH=${CONDA}/envs/p4env \
        -DPython_EXECUTABLE="${CONDA}/envs/p4env/bin/python" \
        -DMPFR_ROOT=${CONDA}/envs/p4env \
        -DCMAKE_INSIST_FIND_PACKAGE_gau2grid=ON \
        -DCMAKE_INSIST_FIND_PACKAGE_Libint2=ON \
        -DCMAKE_INSIST_FIND_PACKAGE_Libxc=ON \
        -DENABLE_PLUGIN_TESTING=ON \
        -DBUILD_Libint2_GENERATOR=OFF \
        -DCMAKE_INSTALL_PREFIX=$(Agent.BuildDirectory)/Install
    displayName: 'Configure Build'

  - bash: |
      cd build
      source activate p4env
      ../devtools/scripts/ci_build.sh
      readelf -d ./stage/lib/psi4/core*.so
      ldd -v ./stage/lib/psi4/core*.so
    displayName: 'Build Psi4'

  - bash: |
      cd build
      source activate p4env
      ./stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat
    displayName: 'Spot Test'

  - bash: |
      cd build
      source activate p4env
      python ../devtools/scripts/ci_run_test.py
      python ../devtools/scripts/ci_print_failing.py
    displayName: 'CTest Tests'

  - bash: |
      cd build
      source activate p4env
      PYTHONPATH=stage/lib/ pytest -v -rws --durations=15 -n 2 -m 'quick' stage/lib/psi4/tests/
    displayName: 'PyTest Tests'
