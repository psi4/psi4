jobs:

  # Configure, build, install, and test job
  - job: 'windows_build'
    displayName: 'Windows VS2022'
    pool:
      vmImage: 'windows-2022'
    timeoutInMinutes: 360
    variables:
      llvm.version: '17.0.6'
      mkl.version: '2022.1.0'
      cmake.build_type: 'Release'
      conda.build: false
      ctest.type: 'smoke'
      pytest.type: 'quick'
      MKL_CBWR: AVX
      PYTHON_VERSION: '3.10'
    steps:

      # Check Python
      - script: |
          setlocal EnableDelayedExpansion
          echo python.version: %PYTHON_VERSION%
          set VALID=false
          if "%PYTHON_VERSION%"=="3.8" set VALID=true
          if "%PYTHON_VERSION%"=="3.9" set VALID=true
          if "%PYTHON_VERSION%"=="3.10" set VALID=true
          if "%PYTHON_VERSION%"=="3.11" set VALID=true
          if "%PYTHON_VERSION%"=="3.12" set VALID=true
          if "!VALID!"=="false" (
            echo ERROR: Invalid "python.version" value: "%PYTHON_VERSION%". Valid values: "3.8" through "3.12".
            exit 1
          )
        displayName: "Check Python version: $(python.version)"

      # Check cmake configuration
      - script: |
          setlocal EnableDelayedExpansion
          echo cmake.build_type: %CMAKE_BUILD_TYPE%
          set VALID=false
          if "%CMAKE_BUILD_TYPE%"=="Debug" set VALID=true
          if "%CMAKE_BUILD_TYPE%"=="Release" set VALID=true
          if "!VALID!"=="false" (
            echo ERROR: Invalid "cmake.build_type" value: "%CMAKE_BUILD_TYPE%". Valid values: "Debug" and "Release".
            exit 1
          )
        displayName: "Check cmake configuration"

      # Check ctest configuration
      - script: |
          setlocal EnableDelayedExpansion
          echo ctest.type: %CTEST_TYPE%
          set VALID=false
          if "%CTEST_TYPE%"=="smoke" set VALID=true
          if "%CTEST_TYPE%"=="quick" set VALID=true
          if "%CTEST_TYPE%"=="full" set VALID=true
          if "!VALID!"=="false" (
            echo ERROR: Invalid "ctest.type" value: "%CTEST_TYPE%". Valid values: "smoke" and "quick" and "full".
            exit 1
          )
        displayName: "Check ctest configuration"

      # Check pytest configuration
      - script: |
          setlocal EnableDelayedExpansion
          echo pytest.type: %PYTEST_TYPE%
          set VALID=false
          if "%PYTEST_TYPE%"=="smoke" set VALID=true
          if "%PYTEST_TYPE%"=="quick" set VALID=true
          if "%PYTEST_TYPE%"=="full" set VALID=true
          if "!VALID!"=="false" (
            echo ERROR: Invalid "pytest.type" value: "%PYTEST_TYPE%". Valid values: "smoke" and "quick" and "full".
            exit 1
          )
        displayName: "Check pytest configuration"

      # Check conda configuration
      - script: |
          setlocal EnableDelayedExpansion
          echo conda.build: %CONDA_BUILD%
          set VALID=false
          if "%CONDA_BUILD%"=="true" set VALID=true
          if "%CONDA_BUILD%"=="false" set VALID=true
          if "!VALID!"=="false" (
            echo ERROR: Invalid "conda.build" value: "%CONDA_BUILD%". Valid values: "true" and "false".
            exit 1
          )
        displayName: "Check conda configuration"

      # Install Chocolatey (https://chocolatey.org/install#install-with-powershellexe)
      - powershell: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
          choco --version
        displayName: "Install Chocolatey"

      # Install Miniconda
      - script: |
          choco install miniforge3 --yes
          set PATH=C:\tools\miniforge3\Scripts;C:\tools\miniforge3;C:\tools\miniforge3\Library\bin;C:\tools\miniforge3\Library\mingw-w64\bin;%PATH%
          echo '##vso[task.setvariable variable=PATH]%PATH%'
          set LIB=C:\tools\miniforge3\Library\lib;%LIB%
          echo '##vso[task.setvariable variable=LIB]%LIB%'
          conda --version
        displayName: "Install Miniconda"

      # Configure Miniconda
      #    conda config --append channels conda-forge
      #    conda=23.10 forced a bugfix at conda-build stage
      - script: |
          conda config --set always_yes yes
          conda config --add channels psi4/label/testing
          conda config --set channel_priority strict
          conda config --set solver libmamba
          conda install conda=23.10 -n base -c conda-forge
          conda info
          conda list
        displayName: "Configure Miniconda"

      # Create conda enviroment
      # Note: conda activate doesn't work here, because it creates a new shell!
      # Note: c-f eigen has Config.cmake file
      - script: |
          conda install cmake ^
                        anaconda-project ^
                        anaconda-client ^
                        conda-build ^
                        m2-sed ^
                        eigen ^
                        libboost-headers ^
                        conda-verify ^
                        intel-openmp=%MKL_VERSION% ^
                        mkl-devel=%MKL_VERSION% ^
                        mpmath ^
                        msgpack-python ^
                        networkx ^
                        ninja ^
                        numpy ^
                        pint ^
                        pybind11 ^
                        pytest=7 ^
                        pytest-xdist ^
                        python=%PYTHON_VERSION% ^
                        dftd3-python ^
                        gcp-correction ^
                        gau2grid ^
                        libxc-c ^
                        libint ^
                        qcelemental ^
                        qcengine ^
                        pydantic=1.10.13 ^
                        optking ^
                        scipy
          which anaconda
          conda list
        displayName: "Install conda packages"
          #conda install --only-deps anaconda-client
          #pip install git+https://github.com/loriab/anaconda-client.git@upload-catch-silent-110

      # Install LLVM
      # Note: LLVM distributed by conda is too old
      - script: |
          choco install llvm --version %LLVM_VERSION% --allow-downgrade --yes
          set PATH=C:\Program Files\LLVM\bin;%PATH%
          echo '##vso[task.setvariable variable=PATH]%PATH%'
          clang-cl --version
        displayName: "Install LLVM"

      # Install Intel OpenMP import library
      # NOTE: libiomp5md.lib is located in conda/win/$(mkl.version)
      #set LIB=$(Build.SourcesDirectory)\conda\win\$(mkl.version);%LIB%
      #    set LIB=%cd%\iomp5md\conda\win\$(mkl.version);%LIB%
      - script: |
          cd
          git clone https://github.com/psi4/iomp5md.git
          set LIB=%cd%\iomp5md\conda\win\2019.1;%LIB%
          echo '##vso[task.setvariable variable=LIB]%LIB%'
        displayName: "Install Intel OpenMP import library"

      # Configure
      # call "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"
      - script: |
          setlocal EnableDelayedExpansion
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
          mkdir build & cd build
          if "%CMAKE_BUILD_TYPE%"=="Debug" set MAX_AM_ERI=4
          if "%CMAKE_BUILD_TYPE%"=="Release" set MAX_AM_ERI=5
          if not defined MAX_AM_ERI exit 1
          if "%CMAKE_BUILD_TYPE%"=="Debug" set ENABLE_XHOST=OFF
          if "%CMAKE_BUILD_TYPE%"=="Release" set ENABLE_XHOST=ON
          if not defined ENABLE_XHOST exit 1
          cmake -G Ninja ^
                -DCMAKE_VERBOSE_MAKEFILE=OFF ^
                -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% ^
                -DCMAKE_INSTALL_PREFIX=../install ^
                -DCMAKE_C_COMPILER=clang-cl ^
                -DCMAKE_CXX_COMPILER=clang-cl ^
                -DENABLE_XHOST=OFF ^
                -DCMAKE_CXX_FLAGS="/arch:AVX" ^
                -DMAX_AM_ERI=!MAX_AM_ERI! ^
                -DPython_EXECUTABLE="C:/tools/miniforge3/python.exe" ^
                -DPython_NumPy_INCLUDE_DIR="C:/tools/miniforge3/lib/site-packages/numpy/core/include" ^
                -DEigen3_ROOT="C:/tools/miniforge3/Library" ^
                -DBOOST_ROOT="C:/tools/miniforge3/Library" ^
                -DMultiprecision_ROOT="C:/tools/miniforge3/Library" ^
                -DBUILD_Libint2_GENERATOR=OFF ^
                -DCMAKE_INSIST_FIND_PACKAGE_gau2grid=ON ^
                -DCMAKE_INSIST_FIND_PACKAGE_Libint2=ON ^
                -DCMAKE_INSIST_FIND_PACKAGE_Libxc=ON ^
                -DBUILD_SHARED_LIBS=OFF ^
                -DFORCE_PEDANTIC=ON ^
                $(Build.SourcesDirectory)
        displayName: "Configure Psi4"
        workingDirectory: $(Build.BinariesDirectory)

      # Build
      - script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
          cmake --build . ^
                --config %CMAKE_BUILD_TYPE% ^
                -- -j %NUMBER_OF_PROCESSORS%
        displayName: "Build Psi4"
        workingDirectory: $(Build.BinariesDirectory)/build

      # Install
      - script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
          cmake --build . ^
                --config %CMAKE_BUILD_TYPE% ^
                --target install ^
                -- -j %NUMBER_OF_PROCESSORS%
        displayName: "Install Psi4"
        workingDirectory: $(Build.BinariesDirectory)/build

      # Test (OpenMP)
      # Check if OpenMP configuration had not failed silently
      - script: |
          python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"
        displayName: "Test Psi4 (OpenMP)"
        workingDirectory: $(Build.BinariesDirectory)/install/lib

      # Spot Test
      - script: |
          set PATH=$(Build.BinariesDirectory)\install\bin;%PATH%
          psi4 $(Build.SourcesDirectory)\tests\tu1-h2o-energy\input.dat -o stdout
        displayName: 'Run, Run, Spot, Run Test'
        workingDirectory: $(Build.BinariesDirectory)/build

      - script: |
          objdump.exe -p D:/a/1/b/install/lib/psi4/core.*.pyd | grep dll
        displayName: "Library dependencies"

      # Test (ctest)
      - script: |
          setlocal EnableDelayedExpansion
          if "%CTEST_TYPE%"=="full" set CTEST_TYPE=".*"
          ctest --build-config %CMAKE_BUILD_TYPE% ^
                --label-regex !CTEST_TYPE! ^
                --label-exclude d2ints ^
                --output-on-failure ^
                --parallel %NUMBER_OF_PROCESSORS% ^
                --timeout 3000
        displayName: "Test Psi4 (ctest $(ctest.type))"
        workingDirectory: $(Build.BinariesDirectory)/build

      # Test (pytest)
      - script: |
          set PATH=$(Build.BinariesDirectory)\install\bin;%PATH%
          set PYTHONPATH=$(Build.BinariesDirectory)\install\lib;%PYTHONPATH%
          psi4 --test %PYTEST_TYPE%_not_d2ints -n %NUMBER_OF_PROCESSORS%
        displayName: "Test Psi4 (pytest $(pytest.type))"
        workingDirectory: $(Build.BinariesDirectory)

      # Build package
      - script: |
          set INSTALL_DIR=$(Build.BinariesDirectory)\install
          conda config --set channel_priority flexible
          conda build --python %PYTHON_VERSION% ^
                      conda\win
          copy /y C:\tools\miniforge3\conda-bld\win-64\psi4-*.bz2 $(Build.ArtifactStagingDirectory)
        condition: and(succeeded(), or(eq(variables['conda.build'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), and(startsWith(variables['Build.SourceBranch'], 'refs/heads/1.'), endsWith(variables['Build.SourceBranch'], '.x'))))
        displayName: "Build Psi4 package"

      # Publish package
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: conda
        condition: and(succeeded(), or(eq(variables['conda.build'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), and(startsWith(variables['Build.SourceBranch'], 'refs/heads/1.'), endsWith(variables['Build.SourceBranch'], '.x'))))
        displayName: "Publish Psi4 package"

      # Upload package
      # * use same ANACONDA_TOKEN generated on anaconda.org for GHA and save it in Azure DevOps
      #   at /psi4/psi4/Pipelines/psi4.psi4 -> Edit button -> Variables button -> new secret var `conda.anaconda_org_token`.
      #   when it expires, revoke it at anaconda.org, regenerate there and paste new one at Azure
      # * error handling may need tweaking as I don't know if failure to upload for lack of space (`echo $?`=1) will fail the workflow.
      - bash: |
          set -e
          ls -l /c/tools/miniforge3/conda-bld/win-64/*.tar.bz2
          echo "Using the mapped env var for this task works and is recommended: $(conda.anaconda_org_token)"
          anaconda whoami
          anaconda \
            --verbose \
           upload \
            --label dev \
            --skip \
            /c/tools/miniforge3/conda-bld/win-64/*.tar.bz2
          echo $?
        env:
          ANACONDA_API_TOKEN: $(conda.anaconda_org_token)
        condition: and(succeeded(), or(eq(variables['conda.build'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), and(startsWith(variables['Build.SourceBranch'], 'refs/heads/1.'), endsWith(variables['Build.SourceBranch'], '.x'))))
        displayName: "Upload Psi4 package to anaconda.org"

