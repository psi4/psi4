/*
 * @BEGIN LICENSE
 *
 * @plugin@ by Psi4 Developer, a plugin to:
 *
 * Psi4: an open-source quantum chemistry software package
 *
 * Copyright (c) 2007-2016 The Psi4 Developers.
 *
 * The copyrights for code used from other parties are included in
 * the corresponding files.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * @END LICENSE
 */

#include <psi4-dec.h>
#include <libmints/typedefs.h>

namespace psi{ 
    // Forward declare several variables
    class Options;
    class JK;

namespace @plugin@{

class SCF : public Wavefunction {
  public:
    /// The constuctor
    SCF(SharedWavefunction ref_wfn, Options &options);
    /// The destuctor
    ~SCF();
    /// Computes the SCF energy, and returns it
    double compute_energy();
  protected:
    /// The amount of information to print to the output file
    int print_;
    /// The number of doubly occupied orbitals
    int ndocc_;
    /// The number of symmetrized spin orbitals
    int nso_;
    /// The maximum number of iterations
    int maxiter_;
    /// The nuclear repulsion energy
    double e_nuc_;
    /// The convergence criterion for the density
    double d_convergence_;
    /// The convergence criterion for the energy
    double e_convergence_;
    /// The one electron integrals
    SharedMatrix H_;
    /// The overlap matrix
    SharedMatrix S_;
    /// The inverse square root of the overlap matrix
    SharedMatrix X_;
    /// The Fock Matrix
    SharedMatrix F_;
    /// The transformed Fock matrix
    SharedMatrix Ft_;
    /// The MO coefficients
    SharedMatrix C_;
    /// The occupied MO coefficients
    SharedMatrix Cocc_;
    /// The density matrix
    SharedMatrix D_;
    /// The ubiquitous JK object
    boost::shared_ptr<JK> jk_;
    /// Computes the electronic part of the SCF energy, and returns it
    double compute_electronic_energy();
    /// Sets up the integrals object
    void init_integrals();
    /// Updates the occupied MO coefficients
    void update_Cocc();
};

}} //End namespaces
