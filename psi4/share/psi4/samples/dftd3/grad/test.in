#! DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme's dftd3 program for -D2 gradients
#! update reference for new BraggSlater radii

d3_engine = psi4.driver.EmpiricalDispersion(name_hint="b3lyp", level_hint="d3bj").engine

ref = psi4.Matrix.from_list([  #TEST
 [ 0.000471410065, -0.006768779354,  0.000000000000], #TEST
 [ 0.000447921039, -0.006988124430,  0.000000000000], #TEST
 [-0.000919134243,  0.013753785605,  0.000000000000]]) #TEST
ref_d3m2b = psi4.Matrix.from_list([  #TEST
     [ 0.000451785735, -0.006479030175,  0.            ],   #TEST
     [ 0.000447891804, -0.006987693348,  0.            ],   #TEST
     [-0.000899480678,  0.013463605344,  0.            ]])  #TEST

molecule {
  0 1
  N    -0.0034118    3.5353926    0.0000000
  C     0.0751963    2.3707040    0.0000000
  H     0.1476295    1.3052847    0.0000000
}


set {
    scf_type      df
    basis         cc-pvdz
    freeze_core   true
    dft_radial_points     99
    dft_spherical_points  302
    e_convergence 8
    d_convergence 8
}

grad = gradient('bp86-d2', engine='libdisp')
compare_matrices(ref, grad, 7, "Outsourced dft gradients called by name: libdisp")  #TEST
clean()

grad = gradient('bp86-d3m2b')
compare_matrices(ref_d3m2b, grad, 7, "Outsourced dft gradients called by name: dftd3/s-dftd3")  #TEST

molecule atoms {
  @He
  Ne 1 1.0
}

import numpy as np  #TEST

if d3_engine == "dftd3":
    E, G = atoms.run_dftd3('bp86-d3(bj)')
    compare_values(0.0, E, 7, "One-real-one-ghost-atom energy")  #TEST
    compare_arrays(np.zeros((2, 3)), G, 7, "One-real-one-ghost-atom gradient")  #TEST

g, wfn = gradient("bp86-d3(bj)", return_wfn=True)
compare_values(0.0, wfn.variable("DISPERSION CORRECTION ENERGY"), 7, "One-real-one-ghost-atom energy")  #TEST
compare_arrays(np.zeros((2, 3)), wfn.variable("DISPERSION CORRECTION GRADIENT"), 7, "One-real-one-ghost-atom gradient")  #TEST
