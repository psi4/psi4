#! Exercises the various DFT-D corrections, both through python directly and through c++



gref_d4bj = [
            np.array(
                [
                    [-0.0, -0.000121388195, -0.000285720303],
                    [0.0, 0.000121388195, -0.000285720303],
                    [0.000013500589, -0.000035224119, -0.000051913946],
                    [-0.000013500589, -0.000035224119, -0.000051913946],
                    [-0.000013500589, 0.000035224119, -0.000051913946],
                    [0.000013500589, 0.000035224119, -0.000051913946],
                    [0.0, -0.0, 0.000162779428],
                    [0.0, -0.0, 0.00042515118],
                    [0.0, -0.0, 0.000180544011],
                    [0.0, -0.0, 0.000010621775],
                ]
            ),
            np.array(
                [
                    [-0.0, -0.000077703214, -0.000000117582],
                    [0.0, 0.000077703214, -0.000000117582],
                    [-0.000003720109, -0.000014373039, 0.000000058791],
                    [0.000003720109, -0.000014373039, 0.000000058791],
                    [0.000003720109, 0.000014373039, 0.000000058791],
                    [-0.000003720109, 0.000014373039, 0.000000058791],
                ]
            ),
            np.array(
                [
                    [0.0, 0.0, 0.000044445504],
                    [0.0, 0.0, -0.000044316404],
                    [0.0, 0.0, -0.000011452466],
                    [0.0, 0.0, 0.000011323366],
                ]
            ),
]


molecule eneyne {
C   0.000000  -0.667578  -2.124659
C   0.000000   0.667578  -2.124659
H   0.923621  -1.232253  -2.126185
H  -0.923621  -1.232253  -2.126185
H  -0.923621   1.232253  -2.126185
H   0.923621   1.232253  -2.126185
--
C   0.000000   0.000000   2.900503
C   0.000000   0.000000   1.693240
H   0.000000   0.000000   0.627352
H   0.000000   0.000000   3.963929
}

eneyne.update_geometry()
E, G = eneyne.run_dftd4('b3lyp', 'd4bj')
mA = eneyne.extract_subsets(1)
E, G = mA.run_dftd4('b3lyp', 'd4bj')
mB = eneyne.extract_subsets(2)
E, G = mB.run_dftd4('b3lyp', 'd4bj')

set basis sto-3g
set scf_type df
set dft_radial_points 50  # use really bad grid for speed since all we want is the -D value
set dft_spherical_points 110
#set scf print 3  # will print dftd3 program output to psi4 output file


activate(mA)
gradient('b3lyp-d4bj')

mAgB = eneyne.extract_subsets(1, 2)
activate(mAgB)
energy('b3lyp-d4')

activate(mB)
set dft_dispersion_parameters [0.40868035, 4.53807137, 16.0, 1.0, 2.02929367, 1.0]  # b3lyp-d4
energy('b3lyp-d4(bj)')

activate(eneyne)
set dft_dispersion_parameters [0.40868035, 4.53807137, 16.0, 1.0, 2.02929367, 0.0]  # b3lyp-d4-2body
energy('b3lyp-d4(bj)')

gAmB = eneyne.extract_subsets(2, 1)
activate(gAmB)
set dft_dispersion_parameters [0.75]
energy('b3lyp-d2')

set dft_dispersion_parameters [1.0,  0.722, 1.217, 14.0]
energy('b3lyp-d3')
set dft_dispersion_parameters [0.75]
set dft_dispersion_parameters [0.38574991, 4.80688534, 16.0, 1.0, 0.95948085, 1.0]  # pbe-d4
energy('b3lyp-d4')
activate(mA)
set dft_dispersion_parameters [1.0]
energy('wb97x-d')

eneyne.update_geometry()

eneyne.run_dftd4('', 'd4bj', {"s8": 0.95948085, "a1": 0.38574991, "a2": 4.80688534, "s9": 1.0})  # pbe-d4

try:
    eneyne.run_dftd4('b3lyp', 'd4bj', {"s8": 0.95948085, "a1": 0.38574991, "a2": 4.80688534, "s9": 1.0})  # pbe-d4
except psi4.driver.p4util.exceptions.TestComparisonError:
    # unlike Mol.run_dftd3(), functional overrides parameters in Mol.run_dftd4()
    pass

eneyne.run_dftd4('', 'D4', {"s8": 2.02929367, "a1": 0.40868035, "a2": 4.53807137, "s9": 0.0})  # b3lyp-d4-2body

clean_options()
activate(mB)
set basis cc-pvdz
set basis_guess sto-3g
energy('b3lyp-d4bj')

