*******************************************************************************
*******************************************************************************

Friday, Nov 11, 2018 -- hokru

[41] Addition of the n-tuple augmented polarized augmented non-relativistic
nZaPa-NR Petersson basis sets taken from the SI of the respective paper
(https://aip.scitation.org/doi/10.1063/1.4798707)

*******************************************************************************
*******************************************************************************

Monday, July 2, 2018 -- LAB

[40] Following reports by @rainli323, investigation by @mdav2 in
psi4/psi4#1058, and advice from from @bennybp that EMSL was probably
right since 3.5 (2d) is double 1.75 (d), changed Fluorine tighter
d-shell exponent from 2.396 --> 3.5.

*******************************************************************************
*******************************************************************************


Friday, April 27, 2018 -- PK

[39] The Jansen basis sets added in [33] are polarisation consistent, as
opposed to correlation consistent. Appropriate "conversion" for extrapolation
purposes between the two is pcseg-[1,2,3,4] = [2,3,4,5]-zeta, as described in
Kupka, T and Lim, C, J. Phys. Chem. A 111 (2007) 1927-1932, DOI: 10.1021/jp065008v

*******************************************************************************
*******************************************************************************


Tuesday, August 22, 2017 -- LAB

[38] Someone added Ga-Kr to 6-31G* on EMSL, but in usual fashion,
didn't define 6-31G or 6-31G**. Decomposed into valence and polarization
according to http://onlinelibrary.wiley.com/doi/10.1002/jcc.1058/epdf
and composed the requisite basis sets.

[37] Extended the non-additive basis treatment described in [35] for
pwCVXZ to pCVXZ, defining partial-basis-cc-pcvxz files and encoding
Note 212.


*******************************************************************************
*******************************************************************************


Thursday, August 17, 2017 -- CDS

[36] In the course of an application to CaH+, I noticed some odd energies
using the cc-pCV5Z basis set.  I checked EMSL and found that the Ca basis
in Psi4 had the correct information for d-h functions, but had incorrect
information for s and p functions.  When Peterson developed this basis
set, he found linear dependencies between the additional tight core-correlating
functions for s and p and the original s and p functions from cc-pV5Z.
To eliminate these dependencies, he restructured the s and p space and it
is no longer the original cc-pV5Z s & p space plus some additional tight
functions.

Note: The information on EMSL for cc-pCV5Z for Ca is INCORRECT as of 8/17/17
(it lacks tight d-f functions).  The correct basis set was retrieved 
directly from Kirk Peterson's website.  Incorrect info at EMSL was 
confirmed by Peterson.

Took the opportunity to verify Ca basis sets for cc-pVXZ via Q-Chem
and EMSL.  cc-pCVXZ (X=D-Q) are verified in Psi4 vs EMSL.


*******************************************************************************
*******************************************************************************


Saturday, June 10, 2017 -- LAB

[35] In response to issue in [34] of cc-pwCV5Z for Na & Mg not being
cc-pV5Z + tight in psi4/psi4#728 and same issue for old psi4/psi4#331
(that skipped the problem and added to outer gbs files directly)
for Sc-Zn cc-pwCVXZ (X=DTQ), decided to complicate things by making
cc-pwCVXZ to equal cc-pVXZ + tight when valid and partial-basis-cc-pwcvxz
when not. The aforementioned element/basis/zeta combinations have been
moved to the partial-basis-cc-pwcvxz files and all the make_dunning
defs adjusted accordingly.


*******************************************************************************
*******************************************************************************


Monday, June 5, 2017 -- Robert T. McGibbon

[34] rmcgibbo (Github id) harvested the cc-pVXZ and cc-pwCVXZ basis sets for Li, Be, Na and Mg from Kirk Peterson's website.
The reference is B. Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011).

The cc-pwCVXZ basis sets for these elements are new to Psi4. The cc-pVXZ basis sets from these elements are more recent
than the ones in EMSL.

Also, added cc-pwCVXZ-RI auxiliary basis sets for Li, Be, Na and Mg. The reference for these basis sets is J. G. Hill
and K. A Peterson, "Correlation consistent basis sets for explicitly correlated wavefunctions: Valence and
core-valence basis sets for Li, Be, Na, and Mg" Phys. Chem. Chem. Phys. (2010).

Also, added new cc-pV5Z-RI auxiliary basis set for Na, which was reoptimized by Hill and Peterson (2010), updating the
values given by Hattig (2005).


*******************************************************************************
*******************************************************************************


Friday, September 23, 2016 -- LAB

[33]   jvansan (GitHub id) has harvested the Jansen pc-N basis sets from EMSL for us. They have the form [aug-]pc[S][seg]-N (N=0--4; N+1-zeta basis set). Since Psi4 can't take advantage of general contractions, those have been hidden in a subfolder.

    Notes from EMSL show the following comparison:

           pc-4          5-Zeta, polarized,                                                                                           DFT optimized
           pcS-4         5-Zeta, polarized,                    tight augmented,                       for nuclear magnetic shielding, DFT optimized
    [used] pcseg-4       5-Zeta, polarized,                                     segmented contracted,                                               Consistent Valence
    [used] pcSseg-4      5-Zeta, polarized,                    tight augmented, segmented contracted, for nuclear magnetic shielding, DFT optimized
    
           aug-pc-4      5-Zeta, polarized, diffuse augmented,                                                                        DFT optimized
           aug-pcS-4     5-Zeta, polarized, diffuse augmented, tight augmented,                       for nuclear magnetic shielding, DFT optimized
    [used] aug-pcseg-4   5-Zeta, polarized, diffuse augmented,                  segmented contracted,                                               Consistent Valence
    [used] aug-pcSseg-4  5-Zeta, polarized, diffuse augmented, tight augmented, segmented contracted, for nuclear magnetic shielding, DFT optimized


*******************************************************************************
*******************************************************************************


Friday, August 12, 2011 -- LAB

[32]   The "months" basis sets systematically define degrees of truncation of the diffuse space as defined in Papajak & Truhlar JCTC 7 10 (2011). The basis aug-cc-pVDZ' is equivalent to jun-cc-pVDZ. The basis heavy-aug-cc-pVXZ is equivalent to jul-cc-pVXZ. As defined by Truhlar, the months basis sets deal only with the X+d versions, but since the operations can be performed on plain X or X+d alike, both are defined here for orbitals bases; RI and JKFIT fitting bases already deal only in X+d. A table outlining the scheme is immediately below and explicit instructions for forming the truncated diffuse sets from the full diffuse sets are provided in the "necessary constructions performed by hand" section of the Dunning table below. Though the orbital basis sets are well defined, the fitting bases are not. Generally, one angmom higher than the orbital basis has been truncated for the RI and JKFIT bases. No attempt has been made to invent a definition for the DK basis sets.

         Basis     AngMom in Diffuse Space      Abbr
                   Li-Kr !TM    H-He            

   aug-cc-pVDZ     s p d        s p              aDZ
   jul-cc-pVDZ     s p d                        haDZ
   jun-cc-pVDZ     s p                          jaDZ
       cc-pVDZ                                    DZ

   aug-cc-pVTZ     s p d f      s p d            aTZ
   jul-cc-pVTZ     s p d f                      haTZ
   jun-cc-pVTZ     s p d                        jaTZ
   may-cc-pVTZ     s p                          maTZ
       cc-pVTZ                                    TZ

   aug-cc-pVQZ     s p d f g    s p d f          aQZ
   jul-cc-pVQZ     s p d f g                    haQZ
   jun-cc-pVQZ     s p d f                      jaQZ
   may-cc-pVQZ     s p d                        maQZ
   apr-cc-pVQZ     s p                          aaQZ
       cc-pVQZ                                    QZ


*******************************************************************************
*******************************************************************************


Thursday, May 19, 2011 -- LAB

[31]   Three "old Dunning" basis sets [DZP, TZ2P, TZ2PF] have been translated from psi3's pbasis.dat back into Gaussian94 format for psi4. The DZP basis only differs from EMSL in the polarization exponents for H, Al, & Si. The TZ2P and TZ2PF are built off the EMSL TZ (Dunning) basis set but are defined for more elements.

[30]   Karlsruhe/Aldrichs basis sets added. According to the document at ftp://ftp.chemie.uni-karlsruhe.de/pub/BASES/Def2/README , def2-* are the current (and sometimes revised) basis sets of choice in the Karlsruhe family. Therefore none of the basis sets from an "Ahlrichs" search in EMSL (basis name without the def2- prefix or with a def- prefix) are introduced into psi4. None of the def2 basis sets have diffuse functions; the Turbomole manual recommends instead adding polarization or going up a zeta level. Alternately, diffuse functions can be borrowed from the Dunning sets- this has not been done for psi4. Truhlar has a paper [Theor Chem Acc (2011) 128:295--305] on appending a reduced set of diffuse functions (ma-TZV, etc.) and obtaining good results for DFT at less cost than going up a zeta level. This too has not been done for psi4. A portion of the def2 readme from the ftp site above is pasted here for reference.

   Karlsruhe CGTO basis sets of split valence (SV), triple zeta valence (TZV) and 
   quadruple zeta valence (QZV) quality for H-Rn, except Lanthanides are collected
   here. Two sets of polarization functions (partly identical) are provided, as 
   recommendable for different purposes. These bases are termed def2-SV(P), 
   def2-SVP, def2-TZVP, def2-TZVPP, def2-QZVP and def2-QZVPP, and are specified 
   in ref. 1. 
   For Rb-Rn they are designed to be used in connection with the ECPs of the 
   Stuttgart/Koeln group (refs. 2-6), which are also provided here. def2-bases 
   are related to basis sets made previously in the Karlsruhe group (refs. 7-10), 
   in many cases they are just slightly modified or even unmodified.
   
   The central idea behind these basis sets is a balanced decription of compounds 
   (similar errors) all accross the periodic table at each of the three basis set 
   levels. This was assessed by treating a large molecular test set (more than 300 
   compounds) representing (nearly) all elements in their common oxidation states. 
   Recommendations for reasonable combinations of bases and methods due to the 
   results of the tests (for details see ref.1):
   
                | 
                |  Explorative    Qualitative     Quantitative    Reference calc.
    ------------|------------------------------------------------------------
                |
    DFT         |                    def2-SV(P)       def2-TZVP    def2-QZVP
                |
    HF          |                    def2-SVP         def2-TZVPP   def2-QZVPP
                |
    MP2, CC     |     def2-SVP           def2-TZVPP   def2-QZVPP
                |

[29]   Controversy of item [28] resolved in favor of EMSL; see http://tyr0.chem.wsu.edu/~kipeters/basissets/tm3dbasis.html for justification.

*******************************************************************************
*******************************************************************************


Wednesday, May 18, 2011 -- LAB

[28]   Added Douglas-Kroll Dunning basis sets. Strongly suspect that the EMSL coefficients for Scandium diffuse-aug-cc-pvtz (and by association diffuse-aug-cc-pvdz) are wrong since they're the same as the diffuse-aug-cc-pvtz-dk in EMSL yet different in the source publication. However, not overruling EMSL just yet.

[27]   Added Ga-Kr to aug-cc-pvdz-prime basis sets- had to invent a definition, esp. for jkfit.

[26]   EMSL has updates for some existing Dunning basis sets. Basically, Sc-Zn added for basis-cc-pvdz.gbs and diffuse-aug-cc-pvdz.gbs, exponent correction for Cr for basis-cc-pvtz.gbs, and Al-Ar added for corevalence-cc-pcv6z.

[25]   Regarding item [11], the JKFIT basis sets for Ga-Br in Molpro have since been corrected, so energies should match.

[24]   Regarding item [9], Q-Chem has since corrected their coeffiecients for the RI basis sets.


*******************************************************************************
*******************************************************************************


Thursday, August 26, 2010 -- LAB

[23]     Only considering elements through Kr at present.

[22]     Basis sets have been collected from EMSL with optimized general contractions checked, since this generates same energies with fewer functions. The pbasis file had basis sets built from both optimized and unoptimized forms.


*******************************************************************************
*******************************************************************************


Tuesday, August 24, 2010
notes on psi4 basis sets -- LAB


General

[21]	The status formerly conferred by puream = T/F in pbasis is now indicated by the word 'cartesian' or 'spherical' at the top of the .gbs file. A basic script for prepending this label to multiple files is included in primitives.tar.

[20]	Warning! EMSL has a very restrictive view on what elements are defined for a given basis set. Its 6-31G* is undefined for H & He since these have no polarization functions set by *. Its cc-pCVXZ is undefined for H & He since these don't need any core functions added (the internal processor in EMSL likely does a restrictive sum of cc-pVDZ and a set of core functions). Its cc-pV(X+d)Z is only defined for Al-Ar since other elements are identical to cc-pVXZ. In other words, don't heedlessly download a basis set from EMSL and install it as new or as a replacement because it may not be complete or it may create an inconsistency in other basis sets that (should) share functions. Examine the dependency charts below. The same applies to correcting an exponent or coefficient. Trace and correct all dependencies. If performing a large-scale update, consider the scripts described below and included in primitives.tar.


Pople basis sets

[19]	Basis sets sto-3g and 3-21g and the families 6-31g and 6-311g are included.

[18]	Same "Pople-style Diffuse" from EMSL applies to both 6-31G & 6-311G.

[17]	Manually added blank H-He entries to single-plus/single-star/double-plus/double-star diffuse or polarization component files where valid.

[16]	For (2d,2p) polarization set for 6-311G, deleted Ge-Kr because only one D function present, copied from (d,p). That is, EMSL basis was not as advertised. Also, Br exponent changed (0.415 vs. 0.451) in a suspicious manner.

[15]	The prospect of checking in symbolic links (e.g., between 6-311ppgss and 6-311ppG_d_p_) was perturbing, and some that would need to be established for Dunning sets (e.g., aug-cc-pvdz-ri and aug-cc-pv_dpd_z-ri) were non-obvious. In such situations, identical files with different names are created. For Dunning sets, these copies are generated automatically by the script.

[14]	Notes in pbasis on sto-3g state that the gaussian 5D convention was used. However, a puream is never set for sto-3g, meaning it will default to cartesian (6D). However, none of the elements defined in pbasis include d-functions, so the issue is moot. In the gbs version, which does have elements with d-functions, sto-3g will be set as 5D in accordance with the pbasis note and the Gaussian website. In other words, done as psi3 says, not as it does.


Dunning basis sets

[13]	Every plain and -RI basis set that could be formed at the D, T, Q, 5, or 6-zeta level from EMSL data is included. Since Dunning basis sets have strongly additive definitions (see table below), this results in far more basis sets (and with broader element ranges) than it might look from EMSL. When basis sets of different names are actually identical, identical files with different names are created. It is hoped that such a scheme will permit default density-fitting bases to be easily set.

[12]	Dual-basis basis sets are truncated from (aug-)cc-pVXZ bases in accordance with JCP 125 074108 and JCTC 5 1560 and consistent with the q-chem manual. I have taken the liberty of applying the first-row truncation scheme to the second row for aug-cc-pVXZ-DUAL basis sets, as this was defined in the paper for the cc-pVXZ-DUAL basis sets and has been used internally within the (Sherrill) lab.

[11]	JKFIT basis sets were taken from Molpro since they aren't specified in detail in the relevant paper and the website the relevant paper recommends is dead. People at Molpro have themselves extended the basis set to cover noble gas elements, augmentation by diffuse functions, and the double-zeta family. Unfortunately, for Ga-Br, they haven't formatted the basis functions to read in properly. Consequently, for these elements, you'll never get a matching energy between Molpro and Psi. I've implemented the basis set as Molpro says, not as it does.

[10]	Heavy-augmented basis sets implemented in all accessible cases (including RI, JKFIT, and DUAL) to save trouble for the user. Also implemented is a local favorite, aug-cc-pVDZ', accessible as aug-cc-pVDZp.

[9]	Currently in pbasis I have defined (aug-)cc-pVXZ-RI-QCHEM (X=DTQ) for consistency with Q-Chem, which uses outdated coefficients for a very few elements in the (aug-)cc-pVXZ-RI basis sets. Rather than continue this here, I mean to appeal to Q-Chem to update their definitions. The affected elements are {C,N,O,F} in (aug-)cc-pVDZ-RI and {Ne} in (aug-)cc-pVTZ-RI and (aug-)cc-pVQZ-RI.

[8]	Ignoring cc-pwCVXZ-RI (X=DTQ5) family from EMSL since defined for six-element block Cu-Hg only. For more conventional elements, the basis is available as defined in the table below.

[7]	In JCP 132 054108 (2010), Hill and co. announced an update of the f-function exponents for the sulfur atom in cc-pV6Z. This is incorporated into the EMSL basis set but not into all its dependencies [for example cc-pV(6+d)Z]. File basis-cc-pv_6pd_z.gbs was corrected.

[6]	The basis set families (aug-)cc-p(wC)VXZ and (aug-)cc-p(wC)V(X+d)Z differ only for the d-functions in the six-atom block Al-Ar. The change involves adjusting existing exponents and adding an additional d-function. The (aug-)cc-p(wC)V(X+d)Z basis sets are strongly preferred.

[5]	Hattig and co. (the developers) have defined the (aug-)cc-p(wC)VXZ-RI basis set to be equivalent to the corresponding (aug-)cc-p(wC)V(X+d)Z-RI set. That is, they optimized the RI fitting bases to reproduce the more correct (X+d) variant.

[4]	The JKFIT basis sets (Weigend) were published just a year after the announcement that cc-pVXZ were deficient for Al-Ar and that cc-pV(X+d)Z were recommended in their stead. Weigend makes no acknowledgement of the (X+d) variant in his discussion. Since the original trouble with Al-Ar arose from CBS extrapolations of the correlation energy and JKFIT is primarily concerned with the HF stage, this would seem a minimal issue. Nevertheless, Weigand states that an additional steep f function for Al-Cl was added to jkfit (x=t,q). Since fitting basis sets generally have l+1 highest angmom fns (where l is highest in target basis), this is actually compatible with the extra tight d function in (X+d). Thus I (the copy-and-paster) declare (aug-)cc-p(wC)VXZ-JKFIT basis set to be equivalent to the corresponding (aug-)cc-p(wC)V(X+d)Z-JKFIT set.


Scripts

[3]	Basis sets in EMSL are available as full basis sets, supplementary polarization functions, supplementary diffuse functions, supplementary core functions, etc.. As downloaded from EMSL, gbs files with filename very close to the EMSL name are kept in the primitives.tar file. Using such component files necessitates the operation of 'adding' basis sets. A script emsl_manipulate.pl is available to merge the two gbs files given as its arguments for elements which are present in both. Run the script without arguments for description of further capabilities.

[2]	For Pople-style basis sets, the emsl_manipulate.pl script is perfectly adequate, since it's obvious how to build up a given basis. Accessible Dunning basis sets are far more numerous and their dependencies more complex (see table below). Moreover, element ranges as well as component files need to be built up. A script is available make_dunning.pl that essentially encodes the table below so that, in the presence of component gbs files from EMSL (stored in primitives.tar), it generates the full Dunning basis sets. Note that diff comparisons with complex basis sets downloaded from EMSL won't be clean because EMSL resorts all functions into S, P, D, etc. blocks. Also note DUAL and aug-cc-pVDZp basis sets are not built through this script. The script is recommended for any extensive update to Dunning basis sets. This will preserve consistency as 'GET LOWER_BASIS' did in pbasis.

[1]	Running the script documentbases.pl in a folder with gbs files creates a html page that displays what elements are available in each basis set file.


*******************************************************************************
*******************************************************************************


Pople-style

plain           heavy_diffuse   full_diffuse    alt_name
-------------------------------------------------------------------------------
sto-3g
3-21g


6-31G           +               ++
6-31G(d)        +               ++              duplicated-as-s
6-31G(d,p)      +               ++              duplicated-as-ss


6-311G          +               ++
6-311G(d)       +               ++              duplicated-as-s
6-311G(d,p)     +               ++              duplicated-as-ss

6-311G(2d)      +               ++
6-311G(2d,p)    +               ++
6-311G(2d,2p)   +               ++

6-311G(2df)     +               ++
6-311G(2df,p)   +               ++
6-311G(2df,2p)  +               ++
6-311G(2df,2pd) +               ++

6-311G(3df)     +               ++
6-311G(3df,p)   +               ++
6-311G(3df,2p)  +               ++
6-311G(3df,2pd) +               ++
6-311G(3df,3pd) +               ++


*******************************************************************************
*******************************************************************************


Dunning-style

The labels (A) below are shortcuts to EMSL files (B) of a basis set closely matching the file name. In order to form a complete 
specification, the amendments (D) need to be made. Basis sets are available at zeta levels (C).

(A)                 (B)                                 (C)     (D)
---------------------------------------------------------------------------------------------------------------------------------------------
1               =  basis-cc-pvxz                        DTQ56
2               =  basis-cc-pv_xpd_z                    DTQ56   only def. for Al-Ar, other elements appended from basis-cc-pvxz
19              =  basis-cc-pvxz-ri                     DTQ56
37              =  molpro-basis-cc-pvxz-jkfit           DTQ5
97              =  basis-cc-pvxz-dk                     DTQ5
101             =  basis-cc-pwcvxz-dk                    TQ5
partial_pcv     =  partial-basis-cc-pcvxz                  5    only def. for those elements where cv not proper superset of basis-cc-pvxz (see Note 212)
partial_pwcv    =  partial-basis-cc-pwcvxz               TQ5    only def. for those elements where wcv not proper superset of basis-cc-pvxz (see Note 211)

diffuse         =  diffuse-aug-cc-pvxz                  DTQ56
diffuse_xpd     =  diffuse-aug-cc-pv_xpd_z              DTQ56   only def. for Al-Ar, other elements appended from diffuse-aug-cc-pvxz
diffuse_ri      =  diffuse-aug-cc-pvxz-ri               DTQ56
diffuse_jk      =  molpro-diffuse-aug-cc-pvxz-jkfit     DTQ5
diffuse_dk      =  diffuse-aug-cc-pvxz-dk               DTQ5

d-diffuse       =  diffuse-d-aug-cc-pvxz                DTQ56
d-diffuse_xpd   =  DNE                                  -----
d-diffuse_ri    =  DNE                                  -----
d-diffuse_jk    =  DNE                                  -----
d-diffuse_dk    =  DNE                                  -----

diffuse_jun     =  diffuse-jun-cc-pvxz                  DTQ56
diffuse_may     =  diffuse-may-cc-pvxz                  -TQ56
diffuse_apr     =  diffuse-apr-cc-pvxz                  --Q56
diffuse_mar     =  diffuse-mar-cc-pvxz                  ---56
diffuse_feb     =  diffuse-feb-cc-pvxz                  ----6
diffuse_jun_xpd =  diffuse-jun-cc-pv_xpd_z              DTQ56   only def. for Al-Ar, other elements appended from diffuse-jun-cc-pvxz
diffuse_may_xpd =  diffuse-may-cc-pv_xpd_z              -TQ56   only def. for Al-Ar, other elements appended from diffuse-may-cc-pvxz
diffuse_apr_xpd =  diffuse-apr-cc-pv_xpd_z              --Q56   only def. for Al-Ar, other elements appended from diffuse-apr-cc-pvxz
diffuse_mar_xpd =  diffuse-mar-cc-pv_xpd_z              ---56   only def. for Al-Ar, other elements appended from diffuse-mar-cc-pvxz
diffuse_feb_xpd =  diffuse-feb-cc-pv_xpd_z              ----6   only def. for Al-Ar, other elements appended from diffuse-feb-cc-pvxz
diffuse_jun_ri  =  diffuse-jun-cc-pvxz-ri               DTQ56
diffuse_may_ri  =  diffuse-may-cc-pvxz-ri               -TQ56
diffuse_apr_ri  =  diffuse-apr-cc-pvxz-ri               --Q56
diffuse_mar_ri  =  diffuse-mar-cc-pvxz-ri               ---56
diffuse_feb_ri  =  diffuse-feb-cc-pvxz-ri               ----6
diffuse_jun_jk  =  diffuse-jun-cc-pvxz-jkfit            DTQ5
diffuse_may_jk  =  diffuse-may-cc-pvxz-jkfit            -TQ5
diffuse_apr_jk  =  diffuse-apr-cc-pvxz-jkfit            --Q5
diffuse_mar_jk  =  diffuse-mar-cc-pvxz-jkfit            ---5
diffuse_feb_jk  =  diffuse-feb-cc-pvxz-jkfit            -----
diffuse_jun_dk  =  DNE                                  -----   
diffuse_may_dk  =  DNE                                  -----   
diffuse_apr_dk  =  DNE                                  -----   
diffuse_mar_dk  =  DNE                                  -----   
diffuse_feb_dk  =  DNE                                  -----   

core            =  corevalence-cc-pcvxz                 DTQ56   blanks-added-for: H,He
w-core          =  tight-cc-pwcvxz                      DTQ5    blanks-added-for: H,He
core_ri         =  DNE                                  -----
w-core_ri       =  tight-cc-pwcvxz-ri                   DTQ5    blanks-added-for: H,He
core_jk         =  DNE                                  -----
w-core_jk       =  DNE                                  -----
core_dk         =  --> corevalence-cc-pcvxz
w-core_dk       =  DNE


detailed description of necessary constructions performed by make_dunning.pl
2               =  basis-cc-pvxz.gbs with elements Al-Ar replaced by basis-cc-pv_xpd_z.gbs [net change compared to 1 is (for Al-Ar) new
                   exponents for all d-orbitals and one extra d-orbital]
diffuse_xpd     =  diffuse-aug-cc-pvxz.gbs with elements Al-Ar replaced by diffuse-aug-cc-pv_xpd_z.gbs [net change compared to diffuse is
                   (for Al-Ar) a new exponent for the d-orbital]
core            =  corevalence-cc-pcvxz.gbs with blank entries added for H and He, which require no supplementary functions to describe core
                   [LAB: Aug 2017] line above now only part of the story. see Note 212
w-core          =  tight-cc-pwcvxz.gbs with blank entries added for H and He, which require no supplementary functions to describe core
                   [LAB: Jun 2017] line above now only part of the story. see Note 211
w-core_ri       =  tight-cc-pwcvxz-ri.gbs with blank entries added for H and He, which require no supplementary functions to describe core
core_dk         =  same as core
w-core_dk       =  cc-pwcvxz-dk almost but not quite disentanglable into cc-pvxz-dk + w-core_dk, so cc-pwcvxz-dk must be defined in its
                   own right and w-core_dk remain undefined

[LAB: Jun 2017] detailed description of Note 211
                   cc-pwcvxz is sometimes disentangleable into valence + tight, sometimes not, so element gets one of:
otrpartial_pwcv    (a.1) (formerly 5) tight-cc-pwcvxz.gbs with blank entries added for H and He, which require no supplementary functions to describe core
otrpartial_pwcv_xpd(a.2) (formerly 6) tight-cc-pwcvxz.gbs with blank entries added for H and He, which require no supplementary functions to describe core
                   (b) partial-basis-cc-pwcvxz.gbs outright containing valence and tight together (non- Al-Ar)
5                  (=.1) partial_pwcv else 1 + w-core
6                  (=.2) partial_pwcv else 2 + w-core
[LAB: Aug 2017] detailed description of Note 212
                   cc-pcvxz is sometimes disentangleable into valence + tight, sometimes not, so analogous to Note 211
otrpartial_pcv     (a.1) (formerly 3) corevalence-cc-pcvxz.gbs with blank entries added for H and He, which require no supplementary functions to describe core
otrpartial_pcv_xpd (a.2) (formerly 4) corevalence-cc-pcvxz.gbs with blank entries added for H and He, which require no supplementary functions to describe core
                   (b) partial-basis-cc-pcvxz.gbs outright containing valence and tight together (non- Al-Ar)
3                  (=.1) partial_pcv else 1 + core
4                  (=.2) partial_pcv else 2 + core

detailed description of necessary constructions performed by hand
diffuse_jun     =  diffuse-aug-cc-pvxz with elements Sc-Zn removed (if present), elements H-He emptied of basis functions, and
                   for the remaining elements the highest angmom removed [D for DZ through I for 6Z]
diffuse_may     =  diffuse-jun-cc-pvxz with the highest angmom removed [D for TZ through H for 6Z]
diffuse_apr     =  diffuse-may-cc-pvxz with the highest angmom removed [D for QZ through G for 6Z]
diffuse_mar     =  diffuse-apr-cc-pvxz with the highest angmom removed [D for 5Z through F for 6Z]
diffuse_feb     =  diffuse-mar-cc-pvxz with the highest angmom removed [D for 6Z]
diffuse_jun_xpd =  diffuse-aug-cc-pv_xpd_z with the highest angmom removed [D for DZ through I for 6Z]
diffuse_may_xpd =  diffuse-jun-cc-pv_xpd_z with the highest angmom removed [D for TZ through H for 6Z]
diffuse_apr_xpd =  diffuse-may-cc-pv_xpd_z with the highest angmom removed [D for QZ through G for 6Z]
diffuse_mar_xpd =  diffuse-apr-cc-pv_xpd_z with the highest angmom removed [D for 5Z through F for 6Z]
diffuse_feb_xpd =  diffuse-mar-cc-pv_xpd_z with the highest angmom removed [D for 6Z]
diffuse_jun_ri  =  diffuse-aug-cc-pvxz-ri with elements H-He emptied of basis functions and
                   for the remaining elements the highest angmom removed [F for DZ through K for 6Z]
diffuse_may_ri  =  diffuse-jun-cc-pvxz-ri with the highest angmom removed [F for TZ through I for 6Z]
diffuse_apr_ri  =  diffuse-may-cc-pvxz-ri with the highest angmom removed [F for QZ through H for 6Z]
diffuse_mar_ri  =  diffuse-apr-cc-pvxz-ri with the highest angmom removed [F for 5Z through G for 6Z]
diffuse_feb_ri  =  diffuse-mar-cc-pvxz-ri with the highest angmom removed [F for 6Z]
diffuse_jun_jk  =  diffuse-aug-cc-pvxz-jkfit with elements H-He emptied of basis functions and
                   for the remaining elements the highest angmom removed [F for DZ through K for 6Z], for Ga-Kr keep one (larger) when F or G on ax
diffuse_may_jk  =  diffuse-jun-cc-pvxz-jkfit with the highest angmom removed [F for TZ through I for 6Z], for Ga-Kr keep one (larger) when F or G on ax
diffuse_apr_jk  =  diffuse-may-cc-pvxz-jkfit with the highest angmom removed [F for QZ through H for 6Z], for Ga-Kr keep one (larger) when F or G on ax
diffuse_mar_jk  =  diffuse-apr-cc-pvxz-jkfit with the highest angmom removed [F for 5Z through G for 6Z], for Ga-Kr keep one (larger) when F or G on ax
diffuse_feb_jk  =  diffuse-mar-cc-pvxz-jkfit with the highest angmom removed [F for 6Z through], for Ga-Kr keep one (larger) when F or G on ax

key
[elem: label] =  elements in list elem are taken from basis set label
DNE =  basis sets not available



basis                           label       straightforward_construction    fundamental_construction                            available
---------------------------------------------------------------------------------------------------------------------------------------------
!  cc-pVXZ                       1      =   1                           =   1                                                   DTQ56
!  cc-pV(X+d)Z                   2      =   2                           =   2                                                   DTQ56
!  cc-pCVXZ                      3      =   3                           =   3 (Aug 2017: once and sometimes 1 + core)           DTQ56
!  cc-pCV(X+d)Z                  4      =   4                           =   4 (Aug 2017: once and sometimes 2 + core)           DTQ56
!  cc-pwCVXZ                     5      =   5                           =   5 (Jun 2017: once and sometimes 1 + w-core)         DTQ5
!  cc-pwCV(X+d)Z                 6      =   6                           =   6 (Jun 2017: once and sometimes 2 + w-core)         DTQ5

!  aug-cc-pVXZ                   7      =   1 + diffuse                 =   1 + diffuse                                         DTQ56
!  aug-cc-pV(X+d)Z               8      =   2 + diffuse_xpd             =   2 + diffuse_xpd                                     DTQ56
!  aug-cc-pCVXZ                  9      =   3 + diffuse                 =   ~ 1 + core + diffuse                                DTQ56
!  aug-cc-pCV(X+d)Z             10      =   4 + diffuse_xpd             =   ~ 2 + core + diffuse_xpd                            DTQ56
!  aug-cc-pwCVXZ                11      =   5 + diffuse                 =   ~ 1 + w-core + diffuse                              DTQ5
!  aug-cc-pwCV(X+d)Z            12      =   6 + diffuse_xpd             =   ~ 2 + w-core + diffuse_xpd                          DTQ5

!  heavy-aug-cc-pVXZ            73      =   7 [H-He:  1]                =   1 + diffuse [H-He:  1]                              DTQ56
!  heavy-aug-cc-pV(X+d)Z        74      =   8 [H-He:  1]                =   2 + diffuse_xpd [H-He:  1]                          DTQ56
!  heavy-aug-cc-pCVXZ           75      =   9 [H-He:  1]                =   ~ 1 + core + diffuse [H-He:  1]                     DTQ56
!  heavy-aug-cc-pCV(X+d)Z       76      =  10 [H-He:  1]                =   ~ 2 + core + diffuse_xpd [H-He:  1]                 DTQ56
!  heavy-aug-cc-pwCVXZ          77      =  11 [H-He:  1]                =   ~ 1 + w-core + diffuse [H-He:  1]                   DTQ5
!  heavy-aug-cc-pwCV(X+d)Z      78      =  12 [H-He:  1]                =   ~ 2 + w-core + diffuse_xpd [H-He:  1]               DTQ5

!  jun-cc-pVXZ                 121      =   1 + diffuse_jun             =   1 + diffuse_jun                                     DTQ56
!  jun-cc-pV(X+d)Z             122      =   2 + diffuse_jun_xpd         =   2 + diffuse_jun_xpd                                 DTQ56
!  jun-cc-pCVXZ                123      =   3 + diffuse_jun             =   ~ 1 + core + diffuse_jun                            DTQ56
!  jun-cc-pCV(X+d)Z            124      =   4 + diffuse_jun_xpd         =   ~ 2 + core + diffuse_jun_xpd                        DTQ56
!  jun-cc-pwCVXZ               125      =   5 + diffuse_jun             =   ~ 1 + w-core + diffuse_jun                          DTQ5
!  jun-cc-pwCV(X+d)Z           126      =   6 + diffuse_jun_xpd         =   ~ 2 + w-core + diffuse_jun_xpd                      DTQ5

!  may-cc-pVXZ                 127      =   1 + diffuse_may             =   1 + diffuse_may                                     -TQ56
!  may-cc-pV(X+d)Z             128      =   2 + diffuse_may_xpd         =   2 + diffuse_may_xpd                                 -TQ56
!  may-cc-pCVXZ                129      =   3 + diffuse_may             =   ~ 1 + core + diffuse_may                            -TQ56
!  may-cc-pCV(X+d)Z            130      =   4 + diffuse_may_xpd         =   ~ 2 + core + diffuse_may_xpd                        -TQ56
!  may-cc-pwCVXZ               131      =   5 + diffuse_may             =   ~ 1 + w-core + diffuse_may                          -TQ5
!  may-cc-pwCV(X+d)Z           132      =   6 + diffuse_may_xpd         =   ~ 2 + w-core + diffuse_may_xpd                      -TQ5

!  apr-cc-pVXZ                 133      =   1 + diffuse_apr             =   1 + diffuse_apr                                     --Q56
!  apr-cc-pV(X+d)Z             134      =   2 + diffuse_apr_xpd         =   2 + diffuse_apr_xpd                                 --Q56
!  apr-cc-pCVXZ                135      =   3 + diffuse_apr             =   ~ 1 + core + diffuse_apr                            --Q56
!  apr-cc-pCV(X+d)Z            136      =   4 + diffuse_apr_xpd         =   ~ 2 + core + diffuse_apr_xpd                        --Q56
!  apr-cc-pwCVXZ               137      =   5 + diffuse_apr             =   ~ 1 + w-core + diffuse_apr                          --Q5
!  apr-cc-pwCV(X+d)Z           138      =   6 + diffuse_apr_xpd         =   ~ 2 + w-core + diffuse_apr_xpd                      --Q5

!  mar-cc-pVXZ                 139      =   1 + diffuse_mar             =   1 + diffuse_mar                                     ---56
!  mar-cc-pV(X+d)Z             140      =   2 + diffuse_mar_xpd         =   2 + diffuse_mar_xpd                                 ---56
!  mar-cc-pCVXZ                141      =   3 + diffuse_mar             =   ~ 1 + core + diffuse_mar                            ---56
!  mar-cc-pCV(X+d)Z            142      =   4 + diffuse_mar_xpd         =   ~ 2 + core + diffuse_mar_xpd                        ---56
!  mar-cc-pwCVXZ               143      =   5 + diffuse_mar             =   ~ 1 + w-core + diffuse_mar                          ---5
!  mar-cc-pwCV(X+d)Z           144      =   6 + diffuse_mar_xpd         =   ~ 2 + w-core + diffuse_mar_xpd                      ---5

!  feb-cc-pVXZ                 145      =   1 + diffuse_feb             =   1 + diffuse_feb                                     ----6
!  feb-cc-pV(X+d)Z             146      =   2 + diffuse_feb_xpd         =   2 + diffuse_feb_xpd                                 ----6
!  feb-cc-pCVXZ                147      =   3 + diffuse_feb             =   ~ 1 + core + diffuse_feb                            ----6
!  feb-cc-pCV(X+d)Z            148      =   4 + diffuse_feb_xpd         =   ~ 2 + core + diffuse_feb_xpd                        ----6
!  feb-cc-pwCVXZ               149      =   5 + diffuse_feb             =   ~ 1 + w-core + diffuse_feb                          -----
!  feb-cc-pwCV(X+d)Z           150      =   6 + diffuse_feb_xpd         =   ~ 2 + w-core + diffuse_feb_xpd                      -----

!  d-aug-cc-pVXZ                13      =   7 + d-diffuse               =   1 + diffuse + d-diffuse                             DTQ56
!  d-aug-cc-pV(X+d)Z            14      =   8 + d-diffuse_xpd           =   2 + diffuse_xpd + d-diffuse_xpd                     -----
!  d-aug-cc-pCVXZ               15      =   9 + d-diffuse               =   ~ 1 + core + diffuse + d-diffuse                    DTQ56
!  d-aug-cc-pCV(X+d)Z           16      =  10 + d-diffuse_xpd           =   ~ 2 + core + diffuse_xpd + d-diffuse_xpd            -----
!  d-aug-cc-pwCVXZ              17      =  11 + d-diffuse               =   ~ 1 + w-core + diffuse + d-diffuse                  DTQ5
!  d-aug-cc-pwCV(X+d)Z          18      =  12 + d-diffuse_xpd           =   ~ 2 + w-core + diffuse_xpd + d-diffuse_xpd          -----


!  cc-pVXZ-RI                   19      =  19                           =  19                                                   DTQ56
!  cc-pV(X+d)Z-RI               20      =  19                           =  19                                                   DTQ56
!  cc-pCVXZ-RI                  21      =  19 + core_ri                 =  19 + core_ri                                         -----
!  cc-pCV(X+d)Z-RI              22      =  21                           =  19 + core_ri                                         -----
!  cc-pwCVXZ-RI                 23      =  19 + w-core_ri               =  19 + w-core_ri                                       DTQ5
!  cc-pwCV(X+d)Z-RI             24      =  23                           =  19 + w-core_ri                                       DTQ5

!  aug-cc-pVXZ-RI               25      =  19 + diffuse_ri              =  19 + diffuse_ri                                      DTQ56
!  aug-cc-pV(X+d)Z-RI           26      =  25                           =  19 + diffuse_ri                                      DTQ56
!  aug-cc-pCVXZ-RI              27      =  21 + diffuse_ri              =  19 + core_ri + diffuse_ri                            -----
!  aug-cc-pCV(X+d)Z-RI          28      =  27                           =  19 + core_ri + diffuse_ri                            -----
!  aug-cc-pwCVXZ-RI             29      =  23 + diffuse_ri              =  19 + w-core_ri + diffuse_ri                          DTQ5
!  aug-cc-pwCV(X+d)Z-RI         30      =  29                           =  19 + w-core_ri + diffuse_ri                          DTQ5

!  heavy-aug-cc-pVXZ-RI         79      =  25 [H-He: 19]                =  19 + diffuse_ri [H-He: 19]                           DTQ56
!  heavy-aug-cc-pV(X+d)Z-RI     80      =  79                           =  19 + diffuse_ri [H-He: 19]                           DTQ56
!  heavy-aug-cc-pCVXZ-RI        81      =  27 [H-He: 19]                =  19 + core_ri + diffuse_ri [H-He: 19]                 -----
!  heavy-aug-cc-pCV(X+d)Z-RI    82      =  81                           =  19 + core_ri + diffuse_ri [H-He: 19]                 -----
!  heavy-aug-cc-pwCVXZ-RI       83      =  29 [H-He: 19]                =  19 + w-core_ri + diffuse_ri [H-He: 19]               DTQ5
!  heavy-aug-cc-pwCV(X+d)Z-RI   84      =  83                           =  19 + w-core_ri + diffuse_ri [H-He: 19]               DTQ5

!  jun-cc-pVXZ-RI              151      =  19 + diffuse_jun_ri          =  19 + diffuse_jun_ri                                  DTQ56
!  jun-cc-pV(X+d)Z-RI          152      = 151                           =  19 + diffuse_jun_ri                                  DTQ56
!  jun-cc-pCVXZ-RI             153      =  21 + diffuse_jun_ri          =  19 + core_ri + diffuse_jun_ri                        -----
!  jun-cc-pCV(X+d)Z-RI         154      = 153                           =  19 + cori_ri + diffuse_jun_ri                        -----
!  jun-cc-pwCVXZ-RI            155      =  23 + diffuse_jun_ri          =  19 + w-core_ri + diffuse_jun_ri                      DTQ5
!  jun-cc-pwCV(X+d)Z-RI        156      = 155                           =  19 + w-core_ri + diffuse_jun_ri                      DTQ5

!  may-cc-pVXZ-RI              157      =  19 + diffuse_may_ri          =  19 + diffuse_may_ri                                  -TQ56
!  may-cc-pV(X+d)Z-RI          158      = 157                           =  19 + diffuse_may_ri                                  -TQ56
!  may-cc-pCVXZ-RI             159      =  21 + diffuse_may_ri          =  19 + core_ri + diffuse_may_ri                        -----
!  may-cc-pCV(X+d)Z-RI         160      = 159                           =  19 + cori_ri + diffuse_may_ri                        -----
!  may-cc-pwCVXZ-RI            161      =  23 + diffuse_may_ri          =  19 + w-core_ri + diffuse_may_ri                      -TQ5
!  may-cc-pwCV(X+d)Z-RI        162      = 161                           =  19 + w-core_ri + diffuse_may_ri                      -TQ5

!  apr-cc-pVXZ-RI              163      =  19 + diffuse_apr_ri          =  19 + diffuse_apr_ri                                  --Q56
!  apr-cc-pV(X+d)Z-RI          164      = 163                           =  19 + diffuse_apr_ri                                  --Q56
!  apr-cc-pCVXZ-RI             165      =  21 + diffuse_apr_ri          =  19 + core_ri + diffuse_apr_ri                        -----
!  apr-cc-pCV(X+d)Z-RI         166      = 165                           =  19 + cori_ri + diffuse_apr_ri                        -----
!  apr-cc-pwCVXZ-RI            167      =  23 + diffuse_apr_ri          =  19 + w-core_ri + diffuse_apr_ri                      --Q5
!  apr-cc-pwCV(X+d)Z-RI        168      = 167                           =  19 + w-core_ri + diffuse_apr_ri                      --Q5

!  mar-cc-pVXZ-RI              169      =  19 + diffuse_mar_ri          =  19 + diffuse_mar_ri                                  ---56
!  mar-cc-pV(X+d)Z-RI          170      = 169                           =  19 + diffuse_mar_ri                                  ---56
!  mar-cc-pCVXZ-RI             171      =  21 + diffuse_mar_ri          =  19 + core_ri + diffuse_mar_ri                        -----
!  mar-cc-pCV(X+d)Z-RI         172      = 171                           =  19 + cori_ri + diffuse_mar_ri                        -----
!  mar-cc-pwCVXZ-RI            173      =  23 + diffuse_mar_ri          =  19 + w-core_ri + diffuse_mar_ri                      ---5
!  mar-cc-pwCV(X+d)Z-RI        174      = 173                           =  19 + w-core_ri + diffuse_mar_ri                      ---5

!  feb-cc-pVXZ-RI              175      =  19 + diffuse_feb_ri          =  19 + diffuse_feb_ri                                  ----6
!  feb-cc-pV(X+d)Z-RI          176      = 175                           =  19 + diffuse_feb_ri                                  ----6
!  feb-cc-pCVXZ-RI             177      =  21 + diffuse_feb_ri          =  19 + core_ri + diffuse_feb_ri                        -----
!  feb-cc-pCV(X+d)Z-RI         178      = 177                           =  19 + cori_ri + diffuse_feb_ri                        -----
!  feb-cc-pwCVXZ-RI            179      =  23 + diffuse_feb_ri          =  19 + w-core_ri + diffuse_feb_ri                      -----
!  feb-cc-pwCV(X+d)Z-RI        180      = 179                           =  19 + w-core_ri + diffuse_feb_ri                      -----

!  d-aug-cc-pVXZ-RI             31      =  25 + d-diffuse_ri            =  19 + diffuse_ri + d-diffuse_ri                       -----
!  d-aug-cc-pV(X+d)Z-RI         32      =  31                           =  19 + diffuse_ri + d-diffuse_ri                       -----
!  d-aug-cc-pCVXZ-RI            33      =  27 + d-diffuse_ri            =  19 + core_ri + diffuse_ri + d-diffuse_ri             -----
!  d-aug-cc-pCV(X+d)Z-RI        34      =  33                           =  19 + core_ri + diffuse_ri + d-diffuse_ri             -----
!  d-aug-cc-pwCVXZ-RI           35      =  29 + d-diffuse_ri            =  19 + w-core_ri + diffuse_ri + d-diffuse_ri           -----
!  d-aug-cc-pwCV(X+d)Z-RI       36      =  35                           =  19 + w-core_ri + diffuse_ri + d-diffuse_ri           -----


!  cc-pVXZ-JKFIT                37      =  37                           =  37                                                   DTQ5
!  cc-pV(X+d)Z-JKFIT            38      =  37                           =  37                                                   DTQ5
!  cc-pCVXZ-JKFIT               39      =  37 + core_jk                 =  37 + core_jk                                         -----
!  cc-pCV(X+d)Z-JKFIT           40      =  39                           =  37 + core_jk                                         -----
!  cc-pwCVXZ-JKFIT              41      =  37 + w-core_jk               =  37 + w-core_jk                                       -----
!  cc-pwCV(X+d)Z-JKFIT          42      =  41                           =  37 + w-core_jk                                       -----

!  aug-cc-pVXZ-JKFIT            43      =  37 + diffuse_jk              =  37 + diffuse_jk                                      DTQ5
!  aug-cc-pV(X+d)Z-JKFIT        44      =  43                           =  37 + diffuse_jk                                      DTQ5
!  aug-cc-pCVXZ-JKFIT           45      =  39 + diffuse_jk              =  37 + core_jk + diffuse_jk                            -----
!  aug-cc-pCV(X+d)Z-JKFIT       46      =  45                           =  37 + core_jk + diffuse_jk                            -----
!  aug-cc-pwCVXZ-JKFIT          47      =  41 + diffuse_jk              =  37 + w-core_jk + diffuse_jk                          -----
!  aug-cc-pwCV(X+d)Z-JKFIT      48      =  47                           =  37 + w-core_jk + diffuse_jk                          -----

!  heavy-aug-cc-pVXZ-JKFIT      85      =  43 [H-He: 37]                =  37 + diffuse_jk [H-He: 37]                           DTQ5
!  heavy-aug-cc-pV(X+d)Z-JKFIT  86      =  85                           =  37 + diffuse_jk [H-He: 37]                           DTQ5
!  heavy-aug-cc-pCVXZ-JKFIT     87      =  45 [H-He: 37]                =  37 + core_jk + diffuse_jk [H-He: 37]                 -----
!  heavy-aug-cc-pCV(X+d)Z-JKFIT 88      =  87                           =  37 + core_jk + diffuse_jk [H-He: 37]                 -----
!  heavy-aug-cc-pwCVXZ-JKFIT    89      =  47 [H-He: 37]                =  37 + w-core_jk + diffuse_jk [H-He: 37]               -----
!  heavy-aug-cc-pwCV(X+d)Z-JKFIT90      =  89                           =  37 + w-core_jk + diffuse_jk [H-He: 37]               -----

!  jun-cc-pVXZ-JKFIT           181      =  37 + diffuse_jun_jk          =  37 + diffuse_jun_jk                                  DTQ5
!  jun-cc-pV(X+d)Z-JKFIT       182      = 181                           =  37 + diffuse_jun_jk                                  DTQ5
!  jun-cc-pCVXZ-JKFIT          183      =  39 + diffuse_jun_jk          =  37 + core_jk + diffuse_jun_jk                        -----
!  jun-cc-pCV(X+d)Z-JKFIT      184      = 183                           =  37 + core_jk + diffuse_jun_jk                        -----
!  jun-cc-pwCVXZ-JKFIT         185      =  41 + diffuse_jun_jk          =  37 + w-core_jk + diffuse_jun_jk                      -----
!  jun-cc-pwCV(X+d)Z-JKFIT     186      = 185                           =  37 + w-core_jk + diffuse_jun_jk                      -----

!  may-cc-pVXZ-JKFIT           187      =  37 + diffuse_may_jk          =  37 + diffuse_may_jk                                  -TQ5
!  may-cc-pV(X+d)Z-JKFIT       188      = 187                           =  37 + diffuse_may_jk                                  -TQ5
!  may-cc-pCVXZ-JKFIT          189      =  39 + diffuse_may_jk          =  37 + core_jk + diffuse_may_jk                        -----
!  may-cc-pCV(X+d)Z-JKFIT      190      = 189                           =  37 + core_jk + diffuse_may_jk                        -----
!  may-cc-pwCVXZ-JKFIT         191      =  41 + diffuse_may_jk          =  37 + w-core_jk + diffuse_may_jk                      -----
!  may-cc-pwCV(X+d)Z-JKFIT     192      = 191                           =  37 + w-core_jk + diffuse_may_jk                      -----

!  apr-cc-pVXZ-JKFIT           193      =  37 + diffuse_apr_jk          =  37 + diffuse_apr_jk                                  --Q5
!  apr-cc-pV(X+d)Z-JKFIT       194      = 193                           =  37 + diffuse_apr_jk                                  --Q5
!  apr-cc-pCVXZ-JKFIT          195      =  39 + diffuse_apr_jk          =  37 + core_jk + diffuse_apr_jk                        -----
!  apr-cc-pCV(X+d)Z-JKFIT      196      = 195                           =  37 + core_jk + diffuse_apr_jk                        -----
!  apr-cc-pwCVXZ-JKFIT         197      =  41 + diffuse_apr_jk          =  37 + w-core_jk + diffuse_apr_jk                      -----
!  apr-cc-pwCV(X+d)Z-JKFIT     198      = 197                           =  37 + w-core_jk + diffuse_apr_jk                      -----

!  mar-cc-pVXZ-JKFIT           199      =  37 + diffuse_mar_jk          =  37 + diffuse_mar_jk                                  ---5
!  mar-cc-pV(X+d)Z-JKFIT       200      = 199                           =  37 + diffuse_mar_jk                                  ---5
!  mar-cc-pCVXZ-JKFIT          201      =  39 + diffuse_mar_jk          =  37 + core_jk + diffuse_mar_jk                        -----
!  mar-cc-pCV(X+d)Z-JKFIT      202      = 201                           =  37 + core_jk + diffuse_mar_jk                        -----
!  mar-cc-pwCVXZ-JKFIT         203      =  41 + diffuse_mar_jk          =  37 + w-core_jk + diffuse_mar_jk                      -----
!  mar-cc-pwCV(X+d)Z-JKFIT     204      = 203                           =  37 + w-core_jk + diffuse_mar_jk                      -----

!  feb-cc-pVXZ-JKFIT           205      =  37 + diffuse_feb_jk          =  37 + diffuse_feb_jk                                  -----
!  feb-cc-pV(X+d)Z-JKFIT       206      = 205                           =  37 + diffuse_feb_jk                                  -----
!  feb-cc-pCVXZ-JKFIT          207      =  39 + diffuse_feb_jk          =  37 + core_jk + diffuse_feb_jk                        -----
!  feb-cc-pCV(X+d)Z-JKFIT      208      = 207                           =  37 + core_jk + diffuse_feb_jk                        -----
!  feb-cc-pwCVXZ-JKFIT         209      =  41 + diffuse_feb_jk          =  37 + w-core_jk + diffuse_feb_jk                      -----
!  feb-cc-pwCV(X+d)Z-JKFIT     210      = 209                           =  37 + w-core_jk + diffuse_feb_jk                      -----

!  d-aug-cc-pVXZ-JKFIT          49      =  43 + d-diffuse_jk            =  37 + diffuse_jk + d-diffuse_jk                       -----
!  d-aug-cc-pV(X+d)Z-JKFIT      50      =  49                           =  37 + diffuse_jk + d-diffuse_jk                       -----
!  d-aug-cc-pCVXZ-JKFIT         51      =  45 + d-diffuse_jk            =  37 + core_jk + diffuse_jk + d-diffuse_jk             -----
!  d-aug-cc-pCV(X+d)Z-JKFIT     52      =  51                           =  37 + core_jk + diffuse_jk + d-diffuse_jk             -----
!  d-aug-cc-pwCVXZ-JKFIT        53      =  47 + d-diffuse_jk            =  37 + w-core_jk + diffuse_jk + d-diffuse_jk           -----
!  d-aug-cc-pwCV(X+d)Z-JKFIT    54      =  53                           =  37 + w-core_jk + diffuse_jk + d-diffuse_jk           -----


!  cc-pVXZ-DUAL                 55      =   1 - selected                                                                         TQ
!  cc-pV(X+d)Z-DUAL             56      = 
!  cc-pCVXZ-DUAL                57      = 
!  cc-pCV(X+d)Z-DUAL            58      = 
!  cc-pwCVXZ-DUAL               59      = 
!  cc-pwCV(X+d)Z-DUAL           60      = 

!  aug-cc-pVXZ-DUAL             61      =   7 - selected                                                                        DTQ
!  aug-cc-pV(X+d)Z-DUAL         62      = 
!  aug-cc-pCVXZ-DUAL            63      = 
!  aug-cc-pCV(X+d)Z-DUAL        64      = 
!  aug-cc-pwCVXZ-DUAL           65      = 
!  aug-cc-pwCV(X+d)Z-DUAL       66      = 

!  heavy-aug-cc-pVXZ-DUAL       91      =  61 [H-He: 55]                                                                         TQ
!  heavy-aug-cc-pV(X+d)Z-DUAL   92      = 
!  heavy-aug-cc-pCVXZ-DUAL      93      = 
!  heavy-aug-cc-pCV(X+d)Z-DUAL  94      = 
!  heavy-aug-cc-pwCVXZ-DUAL     95      = 
!  heavy-aug-cc-pwCV(X+d)Z-DUAL 96      = 

!  d-aug-cc-pVXZ-DUAL           67      = 
!  d-aug-cc-pV(X+d)Z-DUAL       68      = 
!  d-aug-cc-pCVXZ-DUAL          69      = 
!  d-aug-cc-pCV(X+d)Z-DUAL      70      = 
!  d-aug-cc-pwCVXZ-DUAL         71      = 
!  d-aug-cc-pwCV(X+d)Z-DUAL     72      = 


!  cc-pVXZ-DK                   97      =  97                           =  97                                                   DTQ5
!  cc-pV(X+d)Z-DK               98      =
!  cc-pCVXZ-DK                  99      =  97 + core                    =  97 + core                                            DTQ5
!  cc-pCV(X+d)Z-DK              100     =
!  cc-pwCVXZ-DK                 101     = 101                           = 101                                                    TQ5
!  cc-pwCV(X+d)Z-DK             102     =

!  aug-cc-pVXZ-DK               103     =  97 + diffuse_dk              =  97 + diffuse_dk                                      DTQ5  
!  aug-cc-pV(X+d)Z-DK           104     =
!  aug-cc-pCVXZ-DK              105     =  99 + diffuse_dk              =  97 + core + diffuse_dk                               DTQ5
!  aug-cc-pCV(X+d)Z-DK          106     =
!  aug-cc-pwCVXZ-DK             107     = 101 + diffuse_dk              = 101 + diffuse_dk                                       TQ5
!  aug-cc-pwCV(X+d)Z-DK         108     =

!  heavy-aug-cc-pVXZ-DK         109     = 103 [H-He:  97]               =  97 + diffuse_dk [H-He:  97]                          DTQ5
!  heavy-aug-cc-pV(X+d)Z-DK     110     =
!  heavy-aug-cc-pCVXZ-DK        111     = 105 [H-He:  97]               =  97 + core + diffuse_dk [H-He:  97]                   DTQ5
!  heavy-aug-cc-pCV(X+d)Z-DK    112     =
!  heavy-aug-cc-pwCVXZ-DK       113     = 107 [H-He:  97]               = 101 + diffuse_dk [H-He:  97]                           TQ5
!  heavy-aug-cc-pwCV(X+d)Z-DK   114     =

!  d-aug-cc-pVXZ-DK             115     = 103 + d-diffuse_dk            =  97 + diffuse_dk + d-diffuse_dk                       ----
!  d-aug-cc-pV(X+d)Z-DK         116     = 
!  d-aug-cc-pCVXZ-DK            117     = 105 + d-diffuse_dk            =  97 + core + diffuse_dk + d-diffuse_dk                ----
!  d-aug-cc-pCV(X+d)Z-DK        118     = 
!  d-aug-cc-pwCVXZ-DK           119     = 107 + d-diffuse_dk            = 101 + diffuse_dk + d-diffuse_dk                       ----
!  d-aug-cc-pwCV(X+d)Z-DK       120     = 


*******************************************************************************
*******************************************************************************
