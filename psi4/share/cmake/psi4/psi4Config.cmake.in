@PACKAGE_INIT@

# Found one of Psi4's header files.
find_path(psi4_INCLUDE_DIR NAMES psi4/psi4-dec.h
    PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@
    NO_DEFAULT_PATH
)
if (${psi4_INCLUDE_DIR} MATCHES "psi4_INCLUDE_DIR-NOTFOUND")
    set(Psi4Plugins_FOUND FALSE)
    message(STATUS "No Psi4 include directory found.")
    return()
else()
    message(STATUS "Psi4 include directory: ${psi4_INCLUDE_DIR}")
endif()

find_program(psi4_EXECUTABLE NAMES psi4
    PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_BINDIR@
    NO_DEFAULT_PATH
)
if (${psi4_EXECUTABLE} MATCHES "psi4_EXECUTABLE-NOTFOUND")
    set(psi4_FOUND FALSE)
    set(PSI4_FOUND FALSE)
    message(STATUS "No Psi4 executable found.")
    return()
else()
    message(STATUS "Psi4 executable: ${psi4_EXECUTABLE}")
endif()

find_program(core_LIBRARY NAMES core.so
    PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@@PYMOD_INSTALL_LIBDIR@/psi4
    NO_DEFAULT_PATH
    )
if (${core_LIBRARY} MATCHES "core_LIBRARY-NOTFOUND")
    set(psi4_FOUND FALSE)
    set(PSI4_FOUND FALSE)
    message(STATUS "Unable to find Psi4's core library.")
    return()
else()
    message(STATUS "Psi4 core library: ${core_LIBRARY}")
    get_filename_component(psi4_driver_dir_prefix ${core_LIBRARY} DIRECTORY)
    set(driver_DIR "${psi4_driver_dir_prefix}/driver")
    message(STATUS "Psi4 driver directory: ${driver_DIR}")
endif()


message(STATUS "Python executable: @PYTHON_EXECUTABLE@")

macro(psi4_component name on)
   if(${on})
      list(APPEND PSI4_COMPONENTS ${name})
   endif()
endmacro()

psi4_component(PCMSOLVER @ENABLE_PCMSolver@)
psi4_component(AMBIT @ENABLE_AMBIT@)
psi4_component(GTFOCK @ENABLE_GTFock@)
psi4_component(GDMA @ENABLE_gdma@)
psi4_component(CHEMPS2 @ENABLE_CheMPS2@)
psi4_component(DKH @ENABLE_dkh@)

foreach(_comp ${PSI4_FIND_COMPONENTS})
   list(FIND PSI4_COMPONENTS ${_comp} _comp_found)
   if(NOT ${_comp_found})
      set(PSI4_FOUND FALSE)
      set(PSI4_FOUND FALSE)
      message(STATUS "Psi4 was not compiled with the requested component: ${_comp}")
      return()
   endif()
endforeach()

set(PSI4_INCLUDE_DIRS
    ${psi4_INCLUDE_DIR}
    @PYTHON_INCLUDE_DIR@
    ${psi4_INCLUDE_DIR}/@RELATIVE_PYBIND11_INCLUDE_DIR@
)

set(psi4_FOUND TRUE)
set(PSI4_FOUND TRUE)

function(add_psi4_plugin TARGET SOURCES)
    # remove ${TARGET} from ${ARGV} to use ${ARGV} as ${SOURCES}
    list(REMOVE_AT ARGV 0)

    add_library(${TARGET} MODULE ${ARGV})
    target_include_directories(${TARGET} SYSTEM PRIVATE ${PSI4_INCLUDE_DIRS})
    target_link_libraries(${TARGET} ${core_LIBRARY})
    set_target_properties(${TARGET} PROPERTIES
                          PREFIX ""
                          COMPILE_FLAGS "-std=c++11")
    if (APPLE)
        set_target_properties(${TARGET} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
    endif()

    # Add additional properties to the "make clean" to delete *.pyc
    set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "*.pyc")
endfunction(add_psi4_plugin)

