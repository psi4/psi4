/*
 * @BEGIN LICENSE
 *
 * Psi4: an open-source quantum chemistry software package
 *
 * Copyright (c) 2007-2018 The Psi4 Developers.
 *
 * The copyrights for code used from other parties are included in
 * the corresponding files.
 *
 * This file is part of Psi4.
 *
 * Psi4 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * Psi4 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with Psi4; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * @END LICENSE
 */

/**!
 * \file
 * \brief Interface to all BLAS routines
 * \ingroup QT
 *
 * Autogenerated by Rob Parrish on 1/24/2011
 *
 */

#include "blas_level3.h"

#ifdef USING_LAPACK_MKL
#include <mkl_cblas.h>
#else
#include <cblas.h>
#endif

#include "blas_level2.h"

namespace psi {
void C_DGEMM(char transa, char transb, int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb,
             double beta, double* c, int ldc) {
    if (m == 0 || n == 0 || k == 0) return;
    auto TransA = detail::dispatch_trans(transa, __func__, __FILE__, __LINE__);
    auto TransB = detail::dispatch_trans(transb, __func__, __FILE__, __LINE__);
    cblas_dgemm(CblasRowMajor, TransA, TransB, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);
}

void C_DSYMM(char side, char uplo, int m, int n, double alpha, double* a, int lda, double* b, int ldb, double beta,
             double* c, int ldc) {
    if (m == 0 || n == 0) return;
    auto Side = detail::dispatch_side(side, __func__, __FILE__, __LINE__);
    auto Uplo = detail::dispatch_uplo(uplo, __func__, __FILE__, __LINE__);
    cblas_dsymm(CblasRowMajor, Side, Uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc);
}

void C_DTRMM(char side, char uplo, char transa, char diag, int m, int n, double alpha, double* a, int lda, double* b,
             int ldb) {
    if (m == 0 || n == 0) return;
    auto Side = detail::dispatch_side(side, __func__, __FILE__, __LINE__);
    auto Uplo = detail::dispatch_uplo(uplo, __func__, __FILE__, __LINE__);
    auto TransA = detail::dispatch_trans(transa, __func__, __FILE__, __LINE__);
    auto Diag = detail::dispatch_diag(diag, __func__, __FILE__, __LINE__);
    cblas_dtrmm(CblasRowMajor, Side, Uplo, TransA, Diag, m, n, alpha, a, lda, b, ldb);
}

void C_DSYRK(char uplo, char trans, int n, int k, double alpha, double* a, int lda, double beta, double* c, int ldc) {
    if (n == 0 || k == 0) return;
    auto Uplo = detail::dispatch_uplo(uplo, __func__, __FILE__, __LINE__);
    auto TransA = detail::dispatch_trans(trans, __func__, __FILE__, __LINE__);
    cblas_dsyrk(CblasRowMajor, Uplo, TransA, n, k, alpha, a, lda, beta, c, ldc);
}

void C_DSYR2K(char uplo, char trans, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta,
              double* c, int ldc) {
    if (n == 0 || k == 0) return;
    auto Uplo = detail::dispatch_uplo(uplo, __func__, __FILE__, __LINE__);
    auto TransA = detail::dispatch_trans(trans, __func__, __FILE__, __LINE__);
    cblas_dsyr2k(CblasRowMajor, Uplo, TransA, n, k, alpha, a, lda, b, ldb, beta, c, ldc);
}
}  // namespace psi
