#! External potential calculation involving a TIP3P water and a QM water.
#! Energies and gradients computed using analytic charge embedding
#! through the external_potentials keyword are compared against those
#! evaluated numerically through the EMBPOT functionality.

molecule water {
  0 1
  O  -0.778803000000  0.000000000000  1.132683000000
  H  -0.666682000000  0.764099000000  1.706291000000
  H  -0.666682000000  -0.764099000000  1.706290000000
  symmetry c1
  no_reorient
  no_com
}

# Define a TIP3P water as the external potential
import numpy as np
external_potentials = np.array([
-0.834,1.649232019048,0.0,-2.356023604706,
0.417,0.544757019107,0.0,-3.799961446760,
0.417,0.544757019107,0.0,-0.912085762652]).reshape((-1, 4))
# convert coordinates columns to bohr
external_potentials[:,[1,2,3]] /= psi_bohr2angstroms

set {
    scf_type df
    d_convergence 12
    basis 6-31G*
    dft_spherical_points 1202
    dft_radial_points 300
}

# Calculate the total energy and gradient on the wavefunction in the
# presence of the external potential charges, embedded analytically.
e_analytic, wfn = energy('scf', molecule=water, return_wfn=True,
                         external_potentials=external_potentials)
grad_analytic = gradient('scf', ref_wfn=wfn)

# Construct quadrature grid and potential at each point.
grid = DFTGrid.build(water, wfn.basisset())
data = []
for block in grid.blocks():
    x = np.asarray(block.x())
    y = np.asarray(block.y())
    z = np.asarray(block.z())
    w = np.asarray(block.w())
    v = np.zeros_like(w)
    for i in range(block.npoints()):
        for charge in external_potentials:
            r = np.array(
                [x[i] - charge[1],
                 y[i] - charge[2],
                 z[i] - charge[3]],
            )
            v[i] += -charge[0] / np.linalg.norm(r)
    data.append(np.stack((x, y, z, w, v), axis=-1))

# Write EMBPOT file, to be read in.
data = np.concatenate(tuple(data), axis=0)
np.savetxt("EMBPOT", data, header=f"{len(data)}", comments="")

set {
    perturb_h true
    perturb_with embpot
}

# Calculate the electronic contributions to the energy and gradient on
# the wavefunction in the presence of the external potential charges,
# embedded numerically via EMBPOT.
e_embpot, wfn = energy('scf', molecule=water, return_wfn=True)
grad_embpot = gradient('scf', ref_wfn=wfn)

# Calculate the nuclear contributions to the energy and gradient on
# the wavefunction in the presence of the external potential charges.
e_nuc = 0
grad_nuc = []
for atom in range(water.natom()):
    grad_charge = []
    for charge in external_potentials:
        r = np.array(
            [water.x(atom) - charge[1],
             water.y(atom) - charge[2],
             water.z(atom) - charge[3]],
        )
        e_nuc += charge[0] * water.Z(atom) / np.linalg.norm(r)
        grad_charge.append(
            [-charge[0] * water.Z(atom) * r[0] * np.linalg.norm(r)**-3,
             -charge[0] * water.Z(atom) * r[1] * np.linalg.norm(r)**-3,
             -charge[0] * water.Z(atom) * r[2] * np.linalg.norm(r)**-3],
        )
    grad_nuc.append(
        [sum([grad[i] for grad in grad_charge]) for i in range(3)],
    )
grad_nuc = Matrix.from_array(np.array(grad_nuc))

# Add nuclear contributions to energy and gradient.
e_embpot += e_nuc
grad_embpot.add(grad_nuc)

compare_matrices(grad_analytic, grad_embpot, 5, "Gradient with analytic point charge embedding vs. with numerical EMBPOT embedding") #TEST
compare_values(e_analytic, e_embpot, 6, "Energy with analytic point charge embedding vs. with numerical EMBPOT embedding")  #TEST
