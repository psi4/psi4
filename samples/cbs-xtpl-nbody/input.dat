#! RHF interaction energies using nbody and cbs parts of the driver
#! Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz


molecule ne2 {
    0 1
    Ne 0 0 0
    --
    0 1
    Ne 0 0 2
}

set {
    scf_type      df
    mp2_type      df
    cc_type       df
    e_convergence 7
    reference     rhf
}

def unaug_focal(func, label, **kwargs):
    kwargs['scf_basis'] = kwargs.get('scf_basis', 'cc-pVTZ')
    kwargs['scf_scheme'] = kwargs.get('scf_scheme', driver_cbs.xtpl_highest_1)

    kwargs['corl_wfn'] = kwargs.get('corl_wfn', 'mp2')
    kwargs['corl_basis'] = kwargs.get('corl_basis', 'cc-pV[DT]Z')
    kwargs['corl_scheme'] = kwargs.get('corl_scheme', driver_cbs.corl_xtpl_helgaker_2)

    kwargs['delta_wfn'] = kwargs.get('delta_wfn', 'ccsd(t)')
    kwargs['delta_wfn_lesser'] = kwargs.get('delta_wfn_lesser', 'mp2')
    kwargs['delta_basis'] = kwargs.get('delta_basis', 'cc-pVDZ')
    kwargs['delta_scheme'] = kwargs.get('delta_scheme', driver_cbs.xtpl_highest_1)

    if label == 'custom_function':
        label = 'Unaug Focal'
    return driver_cbs.cbs(func, label, **kwargs)


E_func         = energy(unaug_focal, bsse_type="nocp")
E_method_basis = energy("MP2/cc-pv[dt]z + D:CCSD(T)/cc-pvdz", bsse_type="nocp")
E_cbs          = energy(cbs, bsse_type="nocp", corl_wfn="mp2", corl_basis="cc-pv[dt]z",
                                               delta_wfn="ccsd(t)", delta_basis="cc-pvdz")

