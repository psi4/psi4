#! DCFT calculation for the HF+ using DC-06 functional. This performs both
#! two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation.
#! Four-virtual integrals are first handled in the MO Basis for the first two energy computations.
#! In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for 
#! four-virtual case is avoided. 
#! The computation is then repeated using the DC-12 functional with the same algorithms.

memory 250 mb

refscf      = -98.190834079292387  #TEST
refmp2      = -98.202705508819363  #TEST
refdcftscf  = -98.164839047679820  #TEST
refdcft     = -98.2078192401319967 #TEST

# DC-12                               #TEST
refdcftscfexact = -98.165972603361965 #TEST
refdcftexact = -98.207614955904603    #TEST

# ODC-06                              #TEST
refodc06scf = -98.161561565771748     #TEST
refodc06    = -98.2086151665222360    #TEST

# ODC-12                              #TEST
refodc12scf = -98.163060134490195     #TEST
refodc12    = -98.2083640708414407    #TEST

# ODC-13
refodc13scf = -98.162361155505053     #TEST
refodc13    = -98.2084516176586817    #TEST

molecule HF {
1 2
H
F 1 R

R = 1.000
}

set {
    r_convergence 12
    d_convergence 12
    ao_basis    none
    algorithm   twostep
    basis       sto-3g
    qc_coupling true
    reference   uhf
}

#DC-06
set dcft_functional dc-06
energy('dcft')

compare_values(refscf, get_variable("SCF TOTAL ENERGY"), 10, "SCF Energy");                                       #TEST
compare_values(refmp2, get_variable("MP2 TOTAL ENERGY"), 10, "MP2 Energy");                                             #TEST
compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (two-step, ao_basis=none)");     #TEST
compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (two-step, ao_basis=none)");                #TEST

set ao_basis none
set algorithm simultaneous
energy('dcft')

compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (simultaneous, ao_basis=none)"); #TEST
compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (simultaneous, ao_basis=none)");            #TEST

set ao_basis disk
set algorithm twostep
energy('dcft')

compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (two-step, ao_basis=disk)");     #TEST
compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (two-step, ao_basis=disk)");                #TEST

set ao_basis disk
set algorithm simultaneous
energy('dcft')

compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (simultaneous, ao_basis=disk)"); #TEST
compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (simultaneous, ao_basis=disk)");            #TEST

set ao_basis none
set algorithm qc
set qc_type simultaneous
energy('dcft')

compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (qc, qc_type=simultaneous, ao_basis=none)");     #TEST
compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (qc, qc_type=simultaneous, ao_basis=none)");                #TEST

set ao_basis none
set algorithm qc
set qc_type twostep
energy('dcft')

compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (qc, qc_type=twostep, ao_basis=none)");     #TEST
compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (qc, qc_type=twostep, ao_basis=none)");                #TEST

set ao_basis disk
set algorithm qc
set qc_type twostep
energy('dcft')

compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (qc, qc_type=twostep, ao_basis=disk)");     #TEST
compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (qc, qc_type=twostep, ao_basis=disk)");                #TEST

#DC-12
set dcft_functional dc-12
set ao_basis none
set algorithm twostep
energy('dcft')

compare_values(refdcftscfexact, get_variable("DCFT SCF ENERGY"), 10, "DC-12 SCF Energy (two-step, ao_basis=none)");     #TEST
compare_values(refdcftexact, get_variable("DCFT TOTAL ENERGY"), 10, "DC-12 Energy (two-step, ao_basis=none)");                #TEST

set ao_basis disk
set algorithm twostep
energy('dcft')

compare_values(refdcftscfexact, get_variable("DCFT SCF ENERGY"), 10, "DC-12 SCF Energy (two-step, ao_basis=disk)");     #TEST
compare_values(refdcftexact, get_variable("DCFT TOTAL ENERGY"), 10, "DC-12 Energy (two-step, ao_basis=disk)");                #TEST

set ao_basis none
set algorithm simultaneous
energy('dcft')

compare_values(refdcftscfexact, get_variable("DCFT SCF ENERGY"), 10, "DC-12 SCF Energy (simultaneous, ao_basis=none)");     #TEST
compare_values(refdcftexact, get_variable("DCFT TOTAL ENERGY"), 10, "DC-12 Energy (simultaneous, ao_basis=none)");                #TEST

set ao_basis disk
set algorithm simultaneous
energy('dcft')

compare_values(refdcftscfexact, get_variable("DCFT SCF ENERGY"), 10, "DC-12 SCF Energy (simultaneous, ao_basis=disk)");     #TEST
compare_values(refdcftexact, get_variable("DCFT TOTAL ENERGY"), 10, "DC-12 Energy (simultaneous, ao_basis=disk)");                #TEST

set ao_basis none
set algorithm qc
set qc_type simultaneous
energy('dcft')

compare_values(refdcftscfexact, get_variable("DCFT SCF ENERGY"), 10, "DC-12 SCF Energy (qc, qc_type=simultaneous, ao_basis=none)");     #TEST
compare_values(refdcftexact, get_variable("DCFT TOTAL ENERGY"), 10, "DC-12 Energy (qc, qc_type=simultaneous, ao_basis=none)");                #TEST

#ODC-06
set dcft_functional odc-06
set ao_basis none
set algorithm simultaneous
energy('dcft')

compare_values(refodc06scf, get_variable("DCFT SCF ENERGY"), 10, "ODC-06 SCF Energy (simultaneous, ao_basis=none)");     #TEST
compare_values(refodc06, get_variable("DCFT TOTAL ENERGY"), 10, "ODC-06 Energy (simultaneous, ao_basis=none)");                #TEST

set ao_basis disk
set algorithm simultaneous
energy('dcft')

compare_values(refodc06scf, get_variable("DCFT SCF ENERGY"), 10, "ODC-06 SCF Energy (simultaneous, ao_basis=disk)");     #TEST
compare_values(refodc06, get_variable("DCFT TOTAL ENERGY"), 10, "ODC-06 Energy (simultaneous, ao_basis=disk)");                #TEST

set ao_basis none
set algorithm qc
set qc_type simultaneous
energy('dcft')

compare_values(refodc06scf, get_variable("DCFT SCF ENERGY"), 10, "ODC-06 SCF Energy (qc, qc_type=simultaneous, ao_basis=none)");     #TEST
compare_values(refodc06, get_variable("DCFT TOTAL ENERGY"), 10, "ODC-06 Energy (qc, qc_type=simultaneous, ao_basis=none)");                #TEST

set ao_basis none
set algorithm qc
set qc_type twostep
energy('dcft')

compare_values(refodc06scf, get_variable("DCFT SCF ENERGY"), 10, "ODC-06 SCF Energy (qc, qc_type=twostep, ao_basis=none)");     #TEST
compare_values(refodc06, get_variable("DCFT TOTAL ENERGY"), 10, "ODC-06 Energy (qc, qc_type=twostep, ao_basis=none)");                #TEST

#ODC-12
set dcft_functional odc-12
set ao_basis none
set algorithm simultaneous
energy('dcft')

compare_values(refodc12scf, get_variable("DCFT SCF ENERGY"), 10, "ODC-12 SCF Energy (simultaneous, ao_basis=none)");     #TEST
compare_values(refodc12, get_variable("DCFT TOTAL ENERGY"), 10, "ODC-12 Energy (simultaneous, ao_basis=none)");                #TEST

set ao_basis disk
set algorithm simultaneous
energy('dcft')
compare_values(refodc12scf, get_variable("DCFT SCF ENERGY"), 10, "ODC-12 SCF Energy (simultaneous, ao_basis=disk)");     #TEST
compare_values(refodc12, get_variable("DCFT TOTAL ENERGY"), 10, "ODC-12 Energy (simultaneous, ao_basis=disk)");                #TEST

set ao_basis none
set algorithm qc
set qc_type simultaneous
energy('dcft')

compare_values(refodc12scf, get_variable("DCFT SCF ENERGY"), 10, "ODC-12 SCF Energy (qc, qc_type=simultaneous, ao_basis=none)");     #TEST
compare_values(refodc12, get_variable("DCFT TOTAL ENERGY"), 10, "ODC-12 Energy (qc, qc_type=simultaneous, ao_basis=none)");                #TEST

#ODC-13
set dcft_functional odc-13
set ao_basis none
set algorithm simultaneous
energy('dcft')

compare_values(refodc13scf, get_variable("DCFT SCF ENERGY"), 10, "ODC-13 SCF Energy (simultaneous, ao_basis=none)");     #TEST
compare_values(refodc13, get_variable("DCFT TOTAL ENERGY"), 10, "ODC-13 Energy (simultaneous, ao_basis=none)");                #TEST

set ao_basis disk
set algorithm simultaneous
energy('dcft')
compare_values(refodc13scf, get_variable("DCFT SCF ENERGY"), 10, "ODC-13 SCF Energy (simultaneous, ao_basis=disk)");     #TEST
compare_values(refodc13, get_variable("DCFT TOTAL ENERGY"), 10, "ODC-13 Energy (simultaneous, ao_basis=disk)");                #TEST

set ao_basis none
set algorithm qc
set qc_type simultaneous
energy('dcft')

compare_values(refodc13scf, get_variable("DCFT SCF ENERGY"), 10, "ODC-13 SCF Energy (qc, qc_type=simultaneous, ao_basis=none)");     #TEST
compare_values(refodc13, get_variable("DCFT TOTAL ENERGY"), 10, "ODC-13 Energy (qc, qc_type=simultaneous, ao_basis=none)");                #TEST
