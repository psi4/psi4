#! DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with
#! Python's built-in loop mechanism. The geometry is specified by a Z-matrix with dummy
#! atoms, fixed parameters, updated parameters, and separate charge/multiplicity
#! specifiers for each monomer. One-electron properties computed for dimer and one monomer.
 
refENuc   = [ 268.6171792624, 13.021346350778909,  #TEST
              258.850942303987608, 13.0213463507789093 ] #TEST
refESCF   = [ -303.20625701463621, -75.32040649282145,  #TEST
              -303.20499967720298, -75.32040649282028 ] #TEST
refDipY   = [ 17.7759552887,  2.2770512884, 21.6845920985,  2.2770512884 ]  #TEST
refQuadYY = [ 25.4523671288, -5.5116358496, 57.3954213176, -5.5116358496 ]  #TEST
 
Rvals = [ 4.0, 5.0 ]

set {
    DIIS True
    DIIS_MIN_VECS 5
    DIIS_MAX_VECS 9
    MAXITER 1000
    E_CONVERGENCE 11
    D_CONVERGENCE 11
    GUESS SAD
    SCF_TYPE DF
    REFERENCE RHF
}

count = 0                                                                                            #TEST

for R in Rvals:
    molecule dimer {
    0 1
               C          0.710500000000    Bz    -1.230622098778
               C          1.421000000000    Bz     0.000000000000
               C          0.710500000000    Bz     1.230622098778
               C         -0.710500000000    Bz     1.230622098778
               H          1.254500000000    Bz    -2.172857738095
               H         -1.254500000000    Bz     2.172857738095
               C         -0.710500000000    Bz    -1.230622098778
               C         -1.421000000000    Bz     0.000000000000
               H          2.509000000000    Bz     0.000000000000
               H          1.254500000000    Bz     2.172857738095
               H         -1.254500000000    Bz    -2.172857738095
               H         -2.509000000000    Bz     0.000000000000
    --
    1 1
               O          0.000000000000    Oy     0.000000000000
               H          0.494974746831    Hy    -0.857321409974
               H          0.494974746831    Hy     0.857321409974
               H         -0.989949493661    Hy     0.000000000000
    units angstrom
    no_reorient
    }
    #dimer.Bz = -4.794637665924 + R
    #dimer.Oy = -0.794637665924 + R
    #dimer.Hy = -0.444637665924 + R
    dimer.Bz = 0.0
    dimer.Oy = R
    dimer.Hy = R + 0.35
    
    # Force COM translation so multipole origin (0, 0, 0) and COM will be identical
    dimer.move_to_com()

    set BASIS sto-3g
    set DF_BASIS_SCF cc-pVDZ-JKFIT

    activate(dimer)

    eehf, hf_wfn = energy('scf', return_wfn=True)
    oeprop(hf_wfn, "DIPOLE", "QUADRUPOLE", title='BZH3O+ SCF')

    compare_values(refENuc[count], dimer.nuclear_repulsion_energy(),                                 #TEST
                      9, "Nuclear repulsion energy %d" % count)                                      #TEST
    compare_values(refESCF[count], eehf, 9, "Reference energy %d" % count)                           #TEST
    compare_values(refDipY[count], variable("SCF DIPOLE Y"),                                     #TEST
                      5, "Y Component of Dipole %d" % count)                                         #TEST
    compare_values(refQuadYY[count], variable("BZH3O+ SCF QUADRUPOLE YY"),                       #TEST
                      5, "YY Component of Quadrupole %d" % count)                                    #TEST

    clean()
    count = count + 1                                                                                #TEST

    monoB = dimer.extract_subsets(2)

    # Force COM translation so multipole origin (0, 0, 0) and COM will be identical
    monoB.move_to_com()

    eehf, hf_wfn = energy('scf', return_wfn=True)
    oeprop(hf_wfn, "DIPOLE", "QUADRUPOLE",title="H3O+ SCF")
    
    compare_values(refENuc[count], monoB.nuclear_repulsion_energy(),                                 #TEST
                      9, "Nuclear repulsion energy %d" % count)                                      #TEST
    compare_values(refESCF[count], eehf, 9, "Reference energy %d" % count)                           #TEST
    compare_values(refDipY[count], variable("SCF DIPOLE Y"),                                     #TEST
                      5, "Y Component of Dipole %d" % count)                                         #TEST
    compare_values(refQuadYY[count], variable("H3O+ SCF QUADRUPOLE YY"),                         #TEST
                      5, "YY Component of Quadrupole %d" % count)                                    #TEST

    clean()
    count = count + 1                                                                                #TEST

