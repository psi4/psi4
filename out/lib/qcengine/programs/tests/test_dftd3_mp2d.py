import copy
import pprint

import numpy as np
import pytest
import qcelemental as qcel
from qcelemental.models import AtomicInput
from qcelemental.testing import compare, compare_recursive, compare_values, tnm

import qcengine as qcng
from qcengine.programs import empirical_dispersion_resources
from qcengine.testing import is_program_new_enough, using


@using("dftd3")
@pytest.mark.parametrize("method", ["b3lyp-d3", "b3lyp-d3m", "b3lyp-d3bj", "b3lyp-d3mbj"])
def test_dftd3_task(method):
    json_data = {"molecule": qcng.get_molecule("eneyne"), "driver": "energy", "model": {"method": method}}

    ret = qcng.compute(json_data, "dftd3", raise_error=True, return_dict=True)

    assert ret["driver"] == "energy"
    assert "provenance" in ret
    assert "normal termination of dftd3" in ret["stdout"]

    for key in ["cpu", "hostname", "username", "wall_time"]:
        assert key in ret["provenance"]

    assert ret["success"] is True


@using("dftd3")
def test_dftd3_error():
    json_data = {
        "molecule": qcng.get_molecule("eneyne"),
        "driver": "energy",
        "model": {"method": "b3lyp-d3(bj)"},
        "keywords": {},
    }

    # Test driver
    with pytest.raises(qcng.exceptions.InputError) as exc:
        input_data = json_data.copy()
        input_data["driver"] = "properties"
        ret = qcng.compute(input_data, "dftd3", raise_error=True)

    assert "Driver properties not implemented" in str(exc.value)

    # Test extension
    with pytest.raises(qcng.exceptions.InputError) as exc:
        input_data = json_data.copy()
        input_data["model"]["method"] = "b3lyp-quadD"
        ret = qcng.compute(input_data, "dftd3", raise_error=True)

    assert "correction level" in str(exc.value)


# Resources

ref = {}
dmm = ["dimer", "mA", "mB", "mAgB", "gAmB"]
ref["eneyne"] = {}
ref["eneyne"]["B3LYP-D2"] = dict(zip(dmm, [-0.00390110, -0.00165271, -0.00058118, -0.00165271, -0.00058118]))
ref["eneyne"]["B3LYP-D3"] = dict(zip(dmm, [-0.00285088, -0.00084340, -0.00031923, -0.00084340, -0.00031923]))
ref["eneyne"]["B3LYP-D3(BJ)"] = dict(zip(dmm, [-0.00784595, -0.00394347, -0.00226683, -0.00394347, -0.00226683]))
ref["eneyne"]["PBE-D2"] = dict(zip(dmm, [-0.00278650, -0.00118051, -0.00041513, -0.00118051, -0.00041513]))
ref["eneyne"]["PBE-D3"] = dict(zip(dmm, [-0.00175474, -0.00045421, -0.00016839, -0.00045421, -0.00016839]))
ref["eneyne"]["PBE-D3(BJ)"] = dict(zip(dmm, [-0.00475937, -0.00235265, -0.00131239, -0.00235265, -0.00131239]))
ref["eneyne"]["ATM"] = dict(
    zip(dmm, [-0.000000175571, 0.000000216003, -0.000000055859, 0.000000216003, -0.000000055859])
)
ref["eneyne"]["MP2-DMP2"] = dict(
    zip(dmm, [0.00632174635953, 0.00265335573161, 0.00344334929607, 0.00265335573161, 0.00344334929607])
)
ref["eneyne"]["SAPT0-D3M(BJ)"] = dict(zip(dmm, [-0.06896506, -0.03995152, -0.02689133, -0.03995152, -0.02689133]))
ref["eneyne"]["SAPT0-D3M"] = dict(zip(dmm, [-0.04486853, -0.02659896, -0.01614236, -0.02659896, -0.01614236]))
ref["eneyne"]["GCP"] = dict(zip(dmm, [0.0159608596, -0.0018710542, 0.0012920388, 0.0049560054, 0.0103950441]))
ref["eneyne"]["B3LYP-D4(BJ,EEQ)ATM"] = dict(zip(dmm, [-0.00625445, -0.00306407, -0.00176150, -0.00306407, -0.00176150]))
ref["eneyne"]["PBE-D4(BJ,EEQ)ATM"] = dict(zip(dmm, [-0.00399176, -0.00190682, -0.00108739, -0.00190682, -0.00108739]))
ref["eneyne"]["B3LYP-D4(BJ)-2BODY"] = dict(zip(dmm, [-0.00625366, -0.00306413, -0.00176146, -0.00306413, -0.00176146]))

ref["ne"] = {}
ref["ne"]["B3LYP-D3(BJ)"] = {"atom": 0.0}
ref["ne"]["MP2-DMP2"] = {"atom": 0.0}
ref["ne"]["ATM"] = {"atom": 0.0}
ref["ne"]["GCP"] = {"atom": 0.0}
ref["ne"]["B3LYP-D4(BJ,EEQ)ATM"] = {"atom": 0.0}
ref["ne"]["PBE-D4(BJ,EEQ)ATM"] = {"atom": 0.0}

gref = {}
gref["eneyne"] = {}
gref["eneyne"]["B3LYP-D2"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [0.00000000000000e00, 0.48816402308826e-03, -0.52644615172697e-03],
                    [0.00000000000000e00, -0.48816402308826e-03, -0.52644615172697e-03],
                    [-0.73597441492032e-03, -0.91579236339614e-04, -0.84500341812746e-04],
                    [0.73597441492032e-03, -0.91579236339614e-04, -0.84500341812746e-04],
                    [0.73597441492032e-03, 0.91579236339614e-04, -0.84500341812746e-04],
                    [-0.73597441492032e-03, 0.91579236339614e-04, -0.84500341812746e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.49418952404353e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.10115907534998e-02],
                    [0.00000000000000e00, 0.00000000000000e00, 0.13962586025551e-02],
                    [0.00000000000000e00, 0.00000000000000e00, -0.52276616130647e-03],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.60147644572925e-03, -0.48929640608715e-06],
                    [0.00000000000000e00, -0.60147644572925e-03, -0.48929640608715e-06],
                    [-0.76078100143016e-03, -0.58483420364762e-04, 0.24464820304358e-06],
                    [0.76078100143016e-03, -0.58483420364762e-04, 0.24464820304358e-06],
                    [0.76078100143016e-03, 0.58483420364762e-04, 0.24464820304358e-06],
                    [-0.76078100143016e-03, 0.58483420364762e-04, 0.24464820304358e-06],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, -0.56705458935397e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.56456483332009e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.53090524837336e-03],
                    [0.00000000000000e00, 0.00000000000000e00, -0.52841549233948e-03],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.60147644572925e-03, -0.48929640608715e-06],
                    [0.00000000000000e00, -0.60147644572925e-03, -0.48929640608715e-06],
                    [-0.76078100143016e-03, -0.58483420364762e-04, 0.24464820304358e-06],
                    [0.76078100143016e-03, -0.58483420364762e-04, 0.24464820304358e-06],
                    [0.76078100143016e-03, 0.58483420364762e-04, 0.24464820304358e-06],
                    [-0.76078100143016e-03, 0.58483420364762e-04, 0.24464820304358e-06],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, -0.56705458935397e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.56456483332009e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.53090524837336e-03],
                    [0.00000000000000e00, 0.00000000000000e00, -0.52841549233948e-03],
                ]
            ),
        ],
    )
)
gref["eneyne"]["B3LYP-D3"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [0.67762635780344e-20, 0.19657186672293e-03, -0.23180716200687e-03],
                    [0.50821976835258e-20, -0.19657186672293e-03, -0.23180716200687e-03],
                    [-0.83754349667195e-04, 0.45844828386013e-04, -0.92969637976992e-04],
                    [0.83754349667195e-04, 0.45844828386013e-04, -0.92969637976992e-04],
                    [0.83754349667195e-04, -0.45844828386013e-04, -0.92969637976992e-04],
                    [-0.83754349667195e-04, -0.45844828386013e-04, -0.92969637976992e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.11800508571549e-03],
                    [-0.33881317890172e-20, -0.50821976835258e-20, 0.62302832736499e-03],
                    [0.50821976835258e-20, 0.33881317890172e-20, 0.50037535445493e-03],
                    [0.00000000000000e00, -0.52939559203394e-22, -0.16990572018272e-03],
                ]
            ),
            np.array(
                [
                    [0.20328790734103e-19, 0.24171499732116e-03, -0.20480842481032e-06],
                    [-0.16940658945086e-20, -0.24171499732116e-03, -0.20480842481032e-06],
                    [-0.10776189540054e-03, 0.78926689997812e-04, 0.10240421240516e-06],
                    [0.10776189540054e-03, 0.78926689997812e-04, 0.10240421240516e-06],
                    [0.10776189540054e-03, -0.78926689997812e-04, 0.10240421240516e-06],
                    [-0.10776189540054e-03, -0.78926689997812e-04, 0.10240421240516e-06],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, -0.21752286612122e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.21634915516554e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.17823532330490e-03],
                    [0.00000000000000e00, 0.00000000000000e00, -0.17706161234922e-03],
                ]
            ),
            np.array(
                [
                    [0.20328790734103e-19, 0.24171499732116e-03, -0.20480842481032e-06],
                    [-0.16940658945086e-20, -0.24171499732116e-03, -0.20480842481032e-06],
                    [-0.10776189540054e-03, 0.78926689997812e-04, 0.10240421240516e-06],
                    [0.10776189540054e-03, 0.78926689997812e-04, 0.10240421240516e-06],
                    [0.10776189540054e-03, -0.78926689997812e-04, 0.10240421240516e-06],
                    [-0.10776189540054e-03, -0.78926689997812e-04, 0.10240421240516e-06],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, -0.21752286612122e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.21634915516554e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.17823532330490e-03],
                    [0.00000000000000e00, 0.00000000000000e00, -0.17706161234922e-03],
                ]
            ),
        ],
    )
)
gref["eneyne"]["B3LYP-D3(BJ)"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [0.16940658945086e-20, -0.10896372137622e-03, -0.28496931787936e-03],
                    [0.33881317890172e-20, 0.10896372137622e-03, -0.28496931787936e-03],
                    [0.56547183189867e-04, -0.10791733716132e-03, -0.81750328898176e-04],
                    [-0.56547183189867e-04, -0.10791733716132e-03, -0.81750328898176e-04],
                    [-0.56547183189867e-04, 0.10791733716132e-03, -0.81750328898176e-04],
                    [0.56547183189867e-04, 0.10791733716132e-03, -0.81750328898176e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.14698301085008e-03],
                    [-0.16940658945086e-20, -0.33881317890172e-20, 0.43655907696000e-03],
                    [0.00000000000000e00, 0.33881317890172e-20, 0.23688438591518e-03],
                    [0.00000000000000e00, -0.52939559203394e-22, 0.76513477626168e-04],
                ]
            ),
            np.array(
                [
                    [-0.33881317890172e-20, -0.54157860939394e-04, 0.11299781801723e-07],
                    [-0.93173624197973e-20, 0.54157860939394e-04, 0.11299781801723e-07],
                    [0.35880725530239e-04, -0.79323052619042e-04, -0.56498909008614e-08],
                    [-0.35880725530239e-04, -0.79323052619042e-04, -0.56498909008614e-08],
                    [-0.35880725530239e-04, 0.79323052619042e-04, -0.56498909008614e-08],
                    [0.35880725530239e-04, 0.79323052619042e-04, -0.56498909008614e-08],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.45552310986933e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.45561218665227e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.69342175541743e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.69351083220036e-04],
                ]
            ),
            np.array(
                [
                    [-0.33881317890172e-20, -0.54157860939394e-04, 0.11299781801723e-07],
                    [-0.93173624197973e-20, 0.54157860939394e-04, 0.11299781801723e-07],
                    [0.35880725530239e-04, -0.79323052619042e-04, -0.56498909008614e-08],
                    [-0.35880725530239e-04, -0.79323052619042e-04, -0.56498909008614e-08],
                    [-0.35880725530239e-04, 0.79323052619042e-04, -0.56498909008614e-08],
                    [0.35880725530239e-04, 0.79323052619042e-04, -0.56498909008614e-08],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.45552310986933e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.45561218665227e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.69342175541743e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.69351083220036e-04],
                ]
            ),
        ],
    )
)
gref["eneyne"]["PBE-D2"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [0.00000000000000e00, 0.34868860375520e-03, -0.37603298259607e-03],
                    [0.00000000000000e00, -0.34868860375520e-03, -0.37603298259607e-03],
                    [-0.52569603453084e-03, -0.65413743213220e-04, -0.60357389750118e-04],
                    [0.52569603453084e-03, -0.65413743213220e-04, -0.60357389750118e-04],
                    [0.52569603453084e-03, 0.65413743213220e-04, -0.60357389750118e-04],
                    [-0.52569603453084e-03, 0.65413743213220e-04, -0.60357389750118e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.35299253320442e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.72256485674234e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.99732761854534e-03],
                    [0.00000000000000e00, 0.00000000000000e00, -0.37340441789063e-03],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.42962605217439e-03, -0.34949744879114e-06],
                    [0.00000000000000e00, -0.42962605217439e-03, -0.34949744879114e-06],
                    [-0.54341502569968e-03, -0.41773873586195e-04, 0.17474872439557e-06],
                    [0.54341502569968e-03, -0.41773873586195e-04, 0.17474872439557e-06],
                    [0.54341502569968e-03, 0.41773873586195e-04, 0.17474872439557e-06],
                    [-0.54341502569968e-03, 0.41773873586195e-04, 0.17474872439557e-06],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, -0.40503901078976e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.40326061354193e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.37921805177386e-03],
                    [0.00000000000000e00, 0.00000000000000e00, -0.37743965452603e-03],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.42962605217439e-03, -0.34949744879114e-06],
                    [0.00000000000000e00, -0.42962605217439e-03, -0.34949744879114e-06],
                    [-0.54341502569968e-03, -0.41773873586195e-04, 0.17474872439557e-06],
                    [0.54341502569968e-03, -0.41773873586195e-04, 0.17474872439557e-06],
                    [0.54341502569968e-03, 0.41773873586195e-04, 0.17474872439557e-06],
                    [-0.54341502569968e-03, 0.41773873586195e-04, 0.17474872439557e-06],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, -0.40503901078976e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.40326061354193e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.37921805177386e-03],
                    [0.00000000000000e00, 0.00000000000000e00, -0.37743965452603e-03],
                ]
            ),
        ],
    )
)
gref["eneyne"]["PBE-D3"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [0.33881317890172e-20, 0.97730853016389e-04, -0.71901324069440e-04],
                    [0.29646153153901e-20, -0.97730853016389e-04, -0.71901324069440e-04],
                    [-0.31222554291636e-04, 0.29545643062003e-04, -0.67132324795951e-04],
                    [0.31222554291636e-04, 0.29545643062003e-04, -0.67132324795951e-04],
                    [0.31222554291636e-04, -0.29545643062003e-04, -0.67132324795951e-04],
                    [-0.31222554291636e-04, -0.29545643062003e-04, -0.67132324795951e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.20867204655394e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.30651555323142e-03],
                    [0.16940658945086e-20, 0.16940658945086e-20, 0.18769576731255e-03],
                    [0.00000000000000e00, 0.00000000000000e00, -0.61012168565887e-04],
                ]
            ),
            np.array(
                [
                    [0.33881317890172e-20, 0.11021182403760e-03, -0.93982803767757e-07],
                    [-0.42351647362715e-21, -0.11021182403760e-03, -0.93982803767758e-07],
                    [-0.48220259417857e-04, 0.52933097691669e-04, 0.46991401883879e-07],
                    [0.48220259417857e-04, 0.52933097691669e-04, 0.46991401883879e-07],
                    [0.48220259417857e-04, -0.52933097691669e-04, 0.46991401883879e-07],
                    [-0.48220259417857e-04, -0.52933097691669e-04, 0.46991401883879e-07],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, -0.99901515312115e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.99340886211351e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.67878928346081e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.67318299245317e-04],
                ]
            ),
            np.array(
                [
                    [0.33881317890172e-20, 0.11021182403760e-03, -0.93982803767757e-07],
                    [-0.42351647362715e-21, -0.11021182403760e-03, -0.93982803767758e-07],
                    [-0.48220259417857e-04, 0.52933097691669e-04, 0.46991401883879e-07],
                    [0.48220259417857e-04, 0.52933097691669e-04, 0.46991401883879e-07],
                    [0.48220259417857e-04, -0.52933097691669e-04, 0.46991401883879e-07],
                    [-0.48220259417857e-04, -0.52933097691669e-04, 0.46991401883879e-07],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, -0.99901515312115e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.99340886211351e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.67878928346081e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.67318299245317e-04],
                ]
            ),
        ],
    )
)
gref["eneyne"]["PBE-D3(BJ)"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [0.00000000000000e00, -0.61939589939064e-04, -0.16066534797355e-03],
                    [0.25410988417629e-20, 0.61939589939064e-04, -0.16066534797355e-03],
                    [0.35330272921363e-04, -0.65816270722009e-04, -0.53748175167354e-04],
                    [-0.35330272921363e-04, -0.65816270722009e-04, -0.53748175167354e-04],
                    [-0.35330272921363e-04, 0.65816270722009e-04, -0.53748175167354e-04],
                    [0.35330272921363e-04, 0.65816270722009e-04, -0.53748175167354e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.98332430764322e-04],
                    [-0.25410988417629e-20, -0.33881317890172e-20, 0.25661736016373e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.13371752089002e-03],
                    [0.00000000000000e00, -0.26469779601697e-22, 0.47656084798449e-04],
                ]
            ),
            np.array(
                [
                    [-0.25410988417629e-20, -0.31329250082804e-04, 0.61088639781542e-08],
                    [-0.50821976835258e-20, 0.31329250082804e-04, 0.61088639781542e-08],
                    [0.21959764459240e-04, -0.47293026603847e-04, -0.30544319890771e-08],
                    [-0.21959764459240e-04, -0.47293026603847e-04, -0.30544319890771e-08],
                    [-0.21959764459240e-04, 0.47293026603847e-04, -0.30544319890771e-08],
                    [0.21959764459240e-04, 0.47293026603847e-04, -0.30544319890771e-08],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.25685884880777e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.25704336611069e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.41528315631943e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.41546767362234e-04],
                ]
            ),
            np.array(
                [
                    [-0.25410988417629e-20, -0.31329250082804e-04, 0.61088639781542e-08],
                    [-0.50821976835258e-20, 0.31329250082804e-04, 0.61088639781542e-08],
                    [0.21959764459240e-04, -0.47293026603847e-04, -0.30544319890771e-08],
                    [-0.21959764459240e-04, -0.47293026603847e-04, -0.30544319890771e-08],
                    [-0.21959764459240e-04, 0.47293026603847e-04, -0.30544319890771e-08],
                    [0.21959764459240e-04, 0.47293026603847e-04, -0.30544319890771e-08],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.25685884880777e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.25704336611069e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.41528315631943e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.41546767362234e-04],
                ]
            ),
        ],
    )
)
gref["eneyne"]["ATM"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [0.00000000000000e00, -0.57988139838201e-06, -0.71628554331971e-06],
                    [0.00000000000000e00, 0.57988139838201e-06, -0.71628554331971e-06],
                    [0.53149296386534e-06, -0.41638019417978e-06, 0.52694338024860e-06],
                    [-0.53149296386534e-06, -0.41638019417978e-06, 0.52694338024860e-06],
                    [-0.53149296386533e-06, 0.41638019417978e-06, 0.52694338024860e-06],
                    [0.53149296386533e-06, 0.41638019417978e-06, 0.52694338024858e-06],
                    [0.00000000000000e00, 0.00000000000000e00, -0.92557313363084e-06],
                    [0.00000000000000e00, 0.00000000000000e00, 0.31010265235900e-06],
                    [0.00000000000000e00, 0.00000000000000e00, 0.10194777599160e-05],
                    [0.00000000000000e00, 0.00000000000000e00, -0.10792097129990e-05],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, -0.45154573778694e-07, 0.11131133827146e-09],
                    [0.00000000000000e00, 0.45154573778707e-07, 0.11131133827146e-09],
                    [0.10133274017225e-06, -0.72175367263952e-07, -0.55655669135736e-10],
                    [-0.10133274017225e-06, -0.72175367263966e-07, -0.55655669135736e-10],
                    [-0.10133274017227e-06, 0.72175367263952e-07, -0.55655669135736e-10],
                    [0.10133274017227e-06, 0.72175367263966e-07, -0.55655669135736e-10],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.14079365564105e-07],
                    [0.00000000000000e00, 0.00000000000000e00, -0.14067311316192e-07],
                    [0.00000000000000e00, 0.00000000000000e00, 0.67277034390041e-07],
                    [0.00000000000000e00, 0.00000000000000e00, -0.67289088637954e-07],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, -0.45154573778694e-07, 0.11131133827146e-09],
                    [0.00000000000000e00, 0.45154573778707e-07, 0.11131133827146e-09],
                    [0.10133274017225e-06, -0.72175367263952e-07, -0.55655669135736e-10],
                    [-0.10133274017225e-06, -0.72175367263966e-07, -0.55655669135736e-10],
                    [-0.10133274017227e-06, 0.72175367263952e-07, -0.55655669135736e-10],
                    [0.10133274017227e-06, 0.72175367263966e-07, -0.55655669135736e-10],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.14079365564105e-07],
                    [0.00000000000000e00, 0.00000000000000e00, -0.14067311316192e-07],
                    [0.00000000000000e00, 0.00000000000000e00, 0.67277034390041e-07],
                    [0.00000000000000e00, 0.00000000000000e00, -0.67289088637954e-07],
                ]
            ),
        ],
    )
)
gref["eneyne"]["MP2-DMP2"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [0.000000000000, 8.33766812971e-05, 0.000109143431777],
                    [0.000000000000, -8.33766812971e-05, 0.000109143431777],
                    [6.65762086716e-05, -8.48726541848e-06, -6.94161475862e-06],
                    [-6.65762086716e-05, -8.48726541848e-06, -6.94161475862e-06],
                    [-6.65762086716e-05, 8.48726541848e-06, -6.94161475862e-06],
                    [6.65762086716e-05, 8.48726541848e-06, -6.94161475862e-06],
                    [0.00000000000, 0.00000000000, -6.06356381132e-05],
                    [0.00000000000, 0.00000000000, -0.000146587460686],
                    [0.00000000000, 0.00000000000, 5.56226390549e-05],
                    [0.00000000000, 0.00000000000, -3.89199447758e-05],
                ]
            ),
            np.array(
                [
                    [0.00000000000, 6.40910926532e-05, -5.69353173759e-08],
                    [0.00000000000, -6.40910926532e-05, -5.69353173759e-08],
                    [6.40446102957e-05, -5.1224992828e-06, 2.84676586879e-08],
                    [-6.40446102957e-05, -5.1224992828e-06, 2.84676586879e-08],
                    [-6.40446102957e-05, 5.1224992828e-06, 2.84676586879e-08],
                    [6.40446102957e-05, 5.1224992828e-06, 2.84676586879e-08],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, -3.49290530324e-05],
                    [0.00000000000000e00, 0.00000000000000e00, 3.41911680578e-05],
                    [0.00000000000000e00, 0.00000000000000e00, 3.99755714285e-05],
                    [0.00000000000000e00, 0.00000000000000e00, -3.9237686454e-05],
                ]
            ),
            np.array(
                [
                    [0.00000000000, 6.40910926532e-05, -5.69353173759e-08],
                    [0.00000000000, -6.40910926532e-05, -5.69353173759e-08],
                    [6.40446102957e-05, -5.1224992828e-06, 2.84676586879e-08],
                    [-6.40446102957e-05, -5.1224992828e-06, 2.84676586879e-08],
                    [-6.40446102957e-05, 5.1224992828e-06, 2.84676586879e-08],
                    [6.40446102957e-05, 5.1224992828e-06, 2.84676586879e-08],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, -3.49290530324e-05],
                    [0.00000000000000e00, 0.00000000000000e00, 3.41911680578e-05],
                    [0.00000000000000e00, 0.00000000000000e00, 3.99755714285e-05],
                    [0.00000000000000e00, 0.00000000000000e00, -3.9237686454e-05],
                ]
            ),
        ],
    )
)

gref["eneyne"]["SAPT0-D3M"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [0.000000000, -0.0045737729976216, -0.00066334525752522],
                    [0.000000000, 0.0045737729976216, -0.00066334525752522],
                    [0.0012805716442335, -0.0020206093754054, -0.00012113832932721],
                    [-0.0012805716442335, -0.0020206093754054, -0.00012113832932721],
                    [-0.0012805716442335, 0.0020206093754054, -0.00012113832932721],
                    [0.0012805716442335, 0.0020206093754054, -0.00012113832932721],
                    [-2.1175823681358e-22, 0.0000000000, 0.0030713413478305],
                    [0.0000000000, 0.0000000000, -0.0024234049836295],
                    [-3.3881317890172e-21, 0.0000000000, 0.00015928898896433],
                    [0.0000000000, 0.0000000000, 0.001004018479194],
                ]
            ),
            np.array(
                [
                    [2.168404344971e-19, -0.0044293578230772, 8.090944122832e-07],
                    [0.0000000000, 0.0044293578230772, 8.090944122832e-07],
                    [0.0012474945946527, -0.0019751474381077, -4.045472061416e-07],
                    [-0.0012474945946527, -0.0019751474381077, -4.045472061416e-07],
                    [-0.0012474945946527, 0.0019751474381077, -4.045472061416e-07],
                    [0.0012474945946527, 0.0019751474381077, -4.045472061416e-07],
                ],
            ),
            np.array(
                [
                    [0.0000000000, 0.0000000000, 0.0029837992525676],
                    [0.0000000000, 0.0000000000, -0.0030053144036229],
                    [0.0000000000, 0.0000000000, -0.0009761517016775],
                    [0.0000000000, 0.0000000000, 0.00099766685273284],
                ]
            ),
            np.array(
                [
                    [2.168404344971e-19, -0.0044293578230772, 8.090944122832e-07],
                    [0.0000000000, 0.0044293578230772, 8.090944122832e-07],
                    [0.0012474945946527, -0.0019751474381077, -4.045472061416e-07],
                    [-0.0012474945946527, -0.0019751474381077, -4.045472061416e-07],
                    [-0.0012474945946527, 0.0019751474381077, -4.045472061416e-07],
                    [0.0012474945946527, 0.0019751474381077, -4.045472061416e-07],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                ],
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.0000000000, 0.0000000000, 0.0029837992525676],
                    [0.0000000000, 0.0000000000, -0.0030053144036229],
                    [0.0000000000, 0.0000000000, -0.0009761517016775],
                    [0.0000000000, 0.0000000000, 0.00099766685273284],
                ]
            ),
        ],
    )
)

gref["eneyne"]["SAPT0-D3M(BJ)"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [0.0000000000, -0.0045136232857308, -0.00075231393260748],
                    [0.0000000000, 0.0045136232857308, -0.00075231393260748],
                    [0.0014948082321618, -0.0021113594425158, -0.0001174597215329],
                    [-0.0014948082321618, -0.0021113594425158, -0.0001174597215329],
                    [-0.0014948082321618, 0.0021113594425158, -0.0001174597215329],
                    [0.0014948082321618, 0.0021113594425158, -0.0001174597215329],
                    [-2.1175823681358e-22, 0.0000000000, 0.0024546111241176],
                    [0.0000000000, 0.0000000000, -0.0018133073317862],
                    [-3.3881317890172e-21, 0.0000000000, -0.00049587587501463],
                    [0.0000000000, 0.0000000000, 0.0018290388340298],
                ]
            ),
            np.array(
                [
                    [2.168404344971e-19, -0.0043467052643878, 2.7707227349768e-06],
                    [8.1315162936413e-20, 0.0043467052643878, 2.7707227349768e-06],
                    [0.0014630922150675, -0.0020676643712317, -1.3853613674884e-06],
                    [-0.0014630922150675, -0.0020676643712317, -1.3853613674884e-06],
                    [-0.0014630922150675, 0.0020676643712317, -1.3853613674884e-06],
                    [0.0014630922150675, 0.0020676643712317, -1.3853613674884e-06],
                ],
            ),
            np.array(
                [
                    [0.0000000000, 0.0000000000, 0.0023714953184327],
                    [0.0000000000, 0.0000000000, -0.0023773120665058],
                    [0.0000000000, 0.0000000000, -0.0018170208599158],
                    [0.0000000000, 0.0000000000, 0.001822837607989],
                ]
            ),
            np.array(
                [
                    [2.168404344971e-19, -0.0043467052643878, 2.7707227349768e-06],
                    [8.1315162936413e-20, 0.0043467052643878, 2.7707227349768e-06],
                    [0.0014630922150675, -0.0020676643712317, -1.3853613674884e-06],
                    [-0.0014630922150675, -0.0020676643712317, -1.3853613674884e-06],
                    [-0.0014630922150675, 0.0020676643712317, -1.3853613674884e-06],
                    [0.0014630922150675, 0.0020676643712317, -1.3853613674884e-06],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                ],
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.0000000000, 0.0000000000, 0.0023714953184327],
                    [0.0000000000, 0.0000000000, -0.0023773120665058],
                    [0.0000000000, 0.0000000000, -0.0018170208599158],
                    [0.0000000000, 0.0000000000, 0.001822837607989],
                ]
            ),
        ],
    )
)

gref["eneyne"]["GCP"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [-0.32710379543888e-19, -0.69172406585692e-04, 0.10982631419040e-03],
                    [0.37383290907300e-19, 0.69172406585692e-04, 0.10982631419040e-03],
                    [-0.15254697454698e-02, 0.11030956605292e-02, 0.28014891183255e-04],
                    [0.15254697454698e-02, 0.11030956605292e-02, 0.28014891183255e-04],
                    [0.15254697454698e-02, -0.11030956605292e-02, 0.28014891183255e-04],
                    [-0.15254697454698e-02, -0.11030956605292e-02, 0.28014891183255e-04],
                    [0.22816950016663e-23, -0.13690170009998e-22, 0.18237229624453e-03],
                    [0.00000000000000e00, 0.14602848010664e-21, -0.25950727860856e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.14756310364428e-02],
                    [0.00000000000000e00, -0.11408475008331e-23, -0.17302082471926e-02],
                ]
            ),
            np.array(
                [
                    [0.34266209661404e-18, -0.20208529257725e-01, 0.10107213710498e-04],
                    [-0.33566899260151e-18, 0.20208529257725e-01, 0.10107213710498e-04],
                    [0.27231252084318e-02, -0.14200517748742e-02, -0.50536068552489e-05],
                    [-0.27231252084318e-02, -0.14200517748742e-02, -0.50536068552489e-05],
                    [-0.27231252084318e-02, 0.14200517748742e-02, -0.50536068552489e-05],
                    [0.27231252084318e-02, 0.14200517748742e-02, -0.50536068552489e-05],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.68069703161428e-04],
                    [0.00000000000000e00, 0.00000000000000e00, -0.67416294638677e-04],
                    [0.00000000000000e00, 0.00000000000000e00, 0.34846719859829e-03],
                    [0.00000000000000e00, 0.00000000000000e00, -0.34912060712104e-03],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.17633567333202e-02, 0.74522722040174e-06],
                    [0.00000000000000e00, -0.17633567333202e-02, 0.74522722040174e-06],
                    [0.22552670725250e-03, 0.33585712825095e-03, -0.37261361020087e-06],
                    [-0.22552670725250e-03, 0.33585712825095e-03, -0.37261361020087e-06],
                    [-0.22552670725250e-03, -0.33585712825095e-03, -0.37261361020087e-06],
                    [0.22552670725250e-03, -0.33585712825095e-03, -0.37261361020087e-06],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                ]
            ),
            np.array(
                [
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.00000000000000e00],
                    [0.00000000000000e00, 0.00000000000000e00, 0.63749053662728e-03],
                    [0.00000000000000e00, 0.00000000000000e00, -0.62817584877172e-03],
                    [0.00000000000000e00, 0.00000000000000e00, 0.31837548471878e-02],
                    [0.00000000000000e00, 0.00000000000000e00, -0.31930695350433e-02],
                ]
            ),
        ],
    )
)

gref["eneyne"]["B3LYP-D4(BJ,EEQ)ATM"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [-0.0, -0.000121388195, -0.000285720303],
                    [0.0, 0.000121388195, -0.000285720303],
                    [0.000013500589, -0.000035224119, -0.000051913946],
                    [-0.000013500589, -0.000035224119, -0.000051913946],
                    [-0.000013500589, 0.000035224119, -0.000051913946],
                    [0.000013500589, 0.000035224119, -0.000051913946],
                    [0.0, -0.0, 0.000162779428],
                    [0.0, -0.0, 0.00042515118],
                    [0.0, -0.0, 0.000180544011],
                    [0.0, -0.0, 0.000010621775],
                ]
            ),
            np.array(
                [
                    [-0.0, -0.000077703214, -0.000000117582],
                    [0.0, 0.000077703214, -0.000000117582],
                    [-0.000003720109, -0.000014373039, 0.000000058791],
                    [0.000003720109, -0.000014373039, 0.000000058791],
                    [0.000003720109, 0.000014373039, 0.000000058791],
                    [-0.000003720109, 0.000014373039, 0.000000058791],
                ]
            ),
            np.array(
                [
                    [0.0, 0.0, 0.000044445504],
                    [0.0, 0.0, -0.000044316404],
                    [0.0, 0.0, -0.000011452466],
                    [0.0, 0.0, 0.000011323366],
                ]
            ),
            np.array(
                [
                    [-0.0, -0.000077703214, -0.000000117582],
                    [0.0, 0.000077703214, -0.000000117582],
                    [-0.000003720109, -0.000014373039, 0.000000058791],
                    [0.000003720109, -0.000014373039, 0.000000058791],
                    [0.000003720109, 0.000014373039, 0.000000058791],
                    [-0.000003720109, 0.000014373039, 0.000000058791],
                    [0.0, -0.0, 0.0],
                    [0.0, -0.0, 0.0],
                    [0.0, -0.0, 0.0],
                    [0.0, -0.0, 0.0],
                ]
            ),
            np.array(
                [
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.000044445504],
                    [0.0, 0.0, -0.000044316404],
                    [0.0, 0.0, -0.000011452466],
                    [0.0, 0.0, 0.000011323366],
                ]
            ),
        ],
    )
)

gref["eneyne"]["PBE-D4(BJ,EEQ)ATM"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [-0.0, -0.000075815381, -0.00017520537],
                    [0.0, 0.000075815381, -0.00017520537],
                    [0.000007491515, -0.000020129841, -0.000035107085],
                    [-0.000007491515, -0.000020129841, -0.000035107085],
                    [-0.000007491515, 0.000020129841, -0.000035107085],
                    [0.000007491515, 0.000020129841, -0.000035107085],
                    [0.0, -0.0, 0.000114234095],
                    [0.0, -0.0, 0.000264656137],
                    [0.0, -0.0, 0.00010600965],
                    [0.0, -0.0, 0.000005939201],
                ]
            ),
            np.array(
                [
                    [-0.0, -0.000048683304, -0.000000077468],
                    [-0.0, 0.000048683304, -0.000000077468],
                    [-0.000003585439, -0.000006613721, 0.000000038734],
                    [0.000003585439, -0.000006613721, 0.000000038734],
                    [0.000003585439, 0.000006613721, 0.000000038734],
                    [-0.000003585439, 0.000006613721, 0.000000038734],
                ]
            ),
            np.array(
                [
                    [0.0, 0.0, 0.000027225998],
                    [0.0, 0.0, -0.000027154133],
                    [0.0, 0.0, -0.000005688871],
                    [0.0, 0.0, 0.000005617006],
                ]
            ),
            np.array(
                [
                    [-0.0, -0.000048683304, -0.000000077468],
                    [-0.0, 0.000048683304, -0.000000077468],
                    [-0.000003585439, -0.000006613721, 0.000000038734],
                    [0.000003585439, -0.000006613721, 0.000000038734],
                    [0.000003585439, 0.000006613721, 0.000000038734],
                    [-0.000003585439, 0.000006613721, 0.000000038734],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                ]
            ),
            np.array(
                [
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.000027225998],
                    [0.0, 0.0, -0.000027154133],
                    [0.0, 0.0, -0.000005688871],
                    [0.0, 0.0, 0.000005617006],
                ]
            ),
        ],
    )
)

gref["eneyne"]["B3LYP-D4(BJ)-2BODY"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [-2.37238242e-20, -1.20552026e-04, -2.85188070e-04],
                    [1.77428629e-20, 1.20552026e-04, -2.85188070e-04],
                    [1.29618968e-05, -3.48247508e-05, -5.24578644e-05],
                    [-1.29618968e-05, -3.48247508e-05, -5.24578644e-05],
                    [-1.29618968e-05, 3.48247508e-05, -5.24578644e-05],
                    [1.29618968e-05, 3.48247508e-05, -5.24578644e-05],
                    [1.52364928e-21, -2.22548925e-21, 1.64760284e-04],
                    [9.68759086e-21, -1.90663898e-20, 4.23463450e-04],
                    [5.52800316e-21, -1.28345778e-20, 1.79843750e-04],
                    [3.79855004e-22, -4.55050785e-22, 1.21401127e-05],
                ]
            ),
            np.array(
                [
                    [-1.49709758e-20, -7.76770859e-05, -1.17642905e-07],
                    [6.65584060e-21, 7.76770859e-05, -1.17642905e-07],
                    [-3.75026735e-06, -1.43576031e-05, 5.88214523e-08],
                    [3.75026735e-06, -1.43576031e-05, 5.88214523e-08],
                    [3.75026735e-06, 1.43576031e-05, 5.88214523e-08],
                    [-3.75026735e-06, 1.43576031e-05, 5.88214523e-08],
                ]
            ),
            np.array(
                [
                    [0.0, 0.0, 4.44399748e-05],
                    [0.0, 0.0, -4.43108715e-05],
                    [0.0, 0.0, -1.14903043e-05],
                    [0.0, 0.0, 1.13612010e-05],
                ]
            ),
            np.array(
                [
                    [-1.49709758e-20, -7.76770859e-05, -1.17642905e-07],
                    [6.65584060e-21, 7.76770859e-05, -1.17642905e-07],
                    [-3.75026735e-06, -1.43576031e-05, 5.88214523e-08],
                    [3.75026735e-06, -1.43576031e-05, 5.88214523e-08],
                    [3.75026735e-06, 1.43576031e-05, 5.88214523e-08],
                    [-3.75026735e-06, 1.43576031e-05, 5.88214523e-08],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                ]
            ),
            np.array(
                [
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0],
                    [0.0, 0.0, 4.44399748e-05],
                    [0.0, 0.0, -4.43108715e-05],
                    [0.0, 0.0, -1.14903043e-05],
                    [0.0, 0.0, 1.13612010e-05],
                ]
            ),
        ],
    )
)

gref["ne"] = {}
gref["ne"]["B3LYP-D3(BJ)"] = {"atom": np.zeros((1, 3))}
gref["ne"]["MP2-DMP2"] = {"atom": np.zeros((1, 3))}
gref["ne"]["ATM"] = {"atom": np.zeros((1, 3))}
gref["ne"]["GCP"] = {"atom": np.zeros((1, 3))}
gref["ne"]["B3LYP-D4(BJ,EEQ)ATM"] = {"atom": np.zeros((1, 3))}
gref["ne"]["PBE-D4(BJ,EEQ)ATM"] = {"atom": np.zeros((1, 3))}


pref = {}
pref["eneyne"] = {}
pref["eneyne"]["SAPT0-D3M"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [
                        0.00000000e00,
                        -7.85678891e-03,
                        -1.95928495e-03,
                        -1.95928495e-03,
                        -2.01222438e-03,
                        -2.01222438e-03,
                        -4.53698281e-05,
                        -2.51948360e-04,
                        -4.60630446e-04,
                        -4.15929931e-06,
                    ],
                    [
                        -7.85678891e-03,
                        0.00000000e00,
                        -2.01222438e-03,
                        -2.01222438e-03,
                        -1.95928495e-03,
                        -1.95928495e-03,
                        -4.53698281e-05,
                        -2.51948360e-04,
                        -4.60630446e-04,
                        -4.15929931e-06,
                    ],
                    [
                        -1.95928495e-03,
                        -2.01222438e-03,
                        0.00000000e00,
                        -1.04060569e-03,
                        -9.67953410e-05,
                        -2.90146983e-04,
                        -1.15854812e-05,
                        -5.42143151e-05,
                        -8.42058910e-05,
                        -1.19520095e-06,
                    ],
                    [
                        -1.95928495e-03,
                        -2.01222438e-03,
                        -1.04060569e-03,
                        0.00000000e00,
                        -2.90146983e-04,
                        -9.67953410e-05,
                        -1.15854812e-05,
                        -5.42143151e-05,
                        -8.42058910e-05,
                        -1.19520095e-06,
                    ],
                    [
                        -2.01222438e-03,
                        -1.95928495e-03,
                        -9.67953410e-05,
                        -2.90146983e-04,
                        0.00000000e00,
                        -1.04060569e-03,
                        -1.15854812e-05,
                        -5.42143151e-05,
                        -8.42058910e-05,
                        -1.19520095e-06,
                    ],
                    [
                        -2.01222438e-03,
                        -1.95928495e-03,
                        -2.90146983e-04,
                        -9.67953410e-05,
                        -1.04060569e-03,
                        0.00000000e00,
                        -1.15854812e-05,
                        -5.42143151e-05,
                        -8.42058910e-05,
                        -1.19520095e-06,
                    ],
                    [
                        -4.53698281e-05,
                        -4.53698281e-05,
                        -1.15854812e-05,
                        -1.15854812e-05,
                        -1.15854812e-05,
                        -1.15854812e-05,
                        0.00000000e00,
                        -8.94451739e-03,
                        -1.49243946e-03,
                        -2.06978526e-03,
                    ],
                    [
                        -2.51948360e-04,
                        -2.51948360e-04,
                        -5.42143151e-05,
                        -5.42143151e-05,
                        -5.42143151e-05,
                        -5.42143151e-05,
                        -8.94451739e-03,
                        0.00000000e00,
                        -2.07365771e-03,
                        -1.50094929e-03,
                    ],
                    [
                        -4.60630446e-04,
                        -4.60630446e-04,
                        -8.42058910e-05,
                        -8.42058910e-05,
                        -8.42058910e-05,
                        -8.42058910e-05,
                        -1.49243946e-03,
                        -2.07365771e-03,
                        0.00000000e00,
                        -6.02859360e-05,
                    ],
                    [
                        -4.15929931e-06,
                        -4.15929931e-06,
                        -1.19520095e-06,
                        -1.19520095e-06,
                        -1.19520095e-06,
                        -1.19520095e-06,
                        -2.06978526e-03,
                        -1.50094929e-03,
                        -6.02859360e-05,
                        0.00000000e00,
                    ],
                ]
            ),
            np.zeros((6, 6)),
            np.zeros((4, 4)),
            np.zeros((10, 10)),
            np.zeros((10, 10)),
        ],
    )
)
pref["eneyne"]["PBE-D4(BJ,EEQ)ATM"] = dict(
    zip(
        dmm,
        [
            np.array(
                [
                    [
                        0.00000000e00,
                        -2.64744008e-04,
                        -7.32623305e-05,
                        -7.32623305e-05,
                        -7.01934088e-05,
                        -7.01934088e-05,
                        -2.69705044e-05,
                        -1.06309035e-04,
                        -5.46185898e-05,
                        -1.67640345e-06,
                    ],
                    [
                        -2.64744008e-04,
                        0.00000000e00,
                        -7.01934088e-05,
                        -7.01934088e-05,
                        -7.32623305e-05,
                        -7.32623305e-05,
                        -2.69705044e-05,
                        -1.06309035e-04,
                        -5.46185898e-05,
                        -1.67640345e-06,
                    ],
                    [
                        -7.32623305e-05,
                        -7.01934088e-05,
                        0.00000000e00,
                        -1.90214207e-05,
                        -1.14919996e-05,
                        -1.67283942e-05,
                        -4.39710997e-06,
                        -1.70897298e-05,
                        -1.03017176e-05,
                        -2.96551988e-07,
                    ],
                    [
                        -7.32623305e-05,
                        -7.01934088e-05,
                        -1.90214207e-05,
                        0.00000000e00,
                        -1.67283942e-05,
                        -1.14919996e-05,
                        -4.39710997e-06,
                        -1.70897298e-05,
                        -1.03017176e-05,
                        -2.96551988e-07,
                    ],
                    [
                        -7.01934088e-05,
                        -7.32623305e-05,
                        -1.14919996e-05,
                        -1.67283942e-05,
                        0.00000000e00,
                        -1.90214207e-05,
                        -4.39710997e-06,
                        -1.70897298e-05,
                        -1.03017176e-05,
                        -2.96551988e-07,
                    ],
                    [
                        -7.01934088e-05,
                        -7.32623305e-05,
                        -1.67283942e-05,
                        -1.14919996e-05,
                        -1.90214207e-05,
                        0.00000000e00,
                        -4.39710997e-06,
                        -1.70897298e-05,
                        -1.03017176e-05,
                        -2.96551988e-07,
                    ],
                    [
                        -2.69705044e-05,
                        -2.69705044e-05,
                        -4.39710997e-06,
                        -4.39710997e-06,
                        -4.39710997e-06,
                        -4.39710997e-06,
                        0.00000000e00,
                        -2.70797078e-04,
                        -6.64000329e-05,
                        -7.15900093e-05,
                    ],
                    [
                        -1.06309035e-04,
                        -1.06309035e-04,
                        -1.70897298e-05,
                        -1.70897298e-05,
                        -1.70897298e-05,
                        -1.70897298e-05,
                        -2.70797078e-04,
                        0.00000000e00,
                        -7.10525707e-05,
                        -6.69658005e-05,
                    ],
                    [
                        -5.46185898e-05,
                        -5.46185898e-05,
                        -1.03017176e-05,
                        -1.03017176e-05,
                        -1.03017176e-05,
                        -1.03017176e-05,
                        -6.64000329e-05,
                        -7.10525707e-05,
                        0.00000000e00,
                        -8.31720277e-06,
                    ],
                    [
                        -1.67640345e-06,
                        -1.67640345e-06,
                        -2.96551988e-07,
                        -2.96551988e-07,
                        -2.96551988e-07,
                        -2.96551988e-07,
                        -7.15900093e-05,
                        -6.69658005e-05,
                        -8.31720277e-06,
                        0.00000000e00,
                    ],
                ]
            ),
            np.zeros((6, 6)),
            np.zeros((4, 4)),
            np.zeros((10, 10)),
            np.zeros((10, 10)),
        ],
    )
)

seneyne = """
C   0.000000  -0.667578  -2.124659
C   0.000000   0.667578  -2.124659
H   0.923621  -1.232253  -2.126185
H  -0.923621  -1.232253  -2.126185
H  -0.923621   1.232253  -2.126185
H   0.923621   1.232253  -2.126185
--
C   0.000000   0.000000   2.900503
C   0.000000   0.000000   1.693240
H   0.000000   0.000000   0.627352
H   0.000000   0.000000   3.963929
"""

sne = """
Ne 0 0 0
"""


def eneyne_ne_qcdbmols():
    if not is_program_new_enough("psi4", "1.4a1.dev55"):
        pytest.skip("Psi4 requires at least Psi4 v1.3rc2")
    from psi4.driver import qcdb

    eneyne = qcdb.Molecule(seneyne)
    ne = qcdb.Molecule(sne)
    mols = {
        "eneyne": {
            "dimer": eneyne,
            "mA": eneyne.extract_subsets(1),
            "mB": eneyne.extract_subsets(2),
            "mAgB": eneyne.extract_subsets(1, 2),
            "gAmB": eneyne.extract_subsets(2, 1),
        },
        "ne": {"atom": ne},
    }
    return mols


def eneyne_ne_psi4mols():
    if not is_program_new_enough("psi4", "1.4a1.dev55"):
        pytest.skip("Psi4 requires at least Psi4 v1.3rc2")
    import psi4

    eneyne = psi4.core.Molecule.from_string(seneyne)
    ne = psi4.core.Molecule.from_string(sne)
    mols = {
        "eneyne": {
            "dimer": eneyne,
            "mA": eneyne.extract_subsets(1),
            "mB": eneyne.extract_subsets(2),
            "mAgB": eneyne.extract_subsets(1, 2),
            "gAmB": eneyne.extract_subsets(2, 1),
        },
        "ne": {"atom": ne},
    }
    return mols


def eneyne_ne_qcschemamols():

    eneyne = qcel.molparse.to_schema(qcel.molparse.from_string(seneyne)["qm"], dtype=2)
    mA = qcel.molparse.to_schema(qcel.molparse.from_string("\n".join(seneyne.splitlines()[:7]))["qm"], dtype=2)
    mB = qcel.molparse.to_schema(qcel.molparse.from_string("\n".join(seneyne.splitlines()[-4:]))["qm"], dtype=2)
    ne = qcel.molparse.to_schema(qcel.molparse.from_string(sne)["qm"], dtype=2)

    mAgB = qcel.molparse.from_string(seneyne)["qm"]
    mAgB["real"] = [
        (iat < mAgB["fragment_separators"][0]) for iat in range(len(mAgB["elem"]))
    ]  # works b/c chgmult doesn't need refiguring
    mAgB = qcel.molparse.to_schema(mAgB, dtype=2)

    gAmB = qcel.molparse.from_string(seneyne)["qm"]
    gAmB["real"] = [(iat >= gAmB["fragment_separators"][0]) for iat in range(len(gAmB["elem"]))]
    gAmB = qcel.molparse.to_schema(gAmB, dtype=2)

    mols = {"eneyne": {"dimer": eneyne, "mA": mA, "mB": mB, "mAgB": mAgB, "gAmB": gAmB}, "ne": {"atom": ne}}
    return mols


db3lypd3bj = {
    "dashlevel": "d3bj",
    "dashparams": {"s8": 1.9889, "s6": 1.0, "a2": 4.4211, "a1": 0.3981},
    "dashparams_citation": "",
    "fctldash": "b3lyp-d3(bj)",
}
db3lypd3bjcustom = copy.deepcopy(db3lypd3bj)
db3lypd3bjcustom["fctldash"] = ""
db3lypd3bjcustom["dashparams"]["a2"] = 5.4211

dpbed3zero = {
    "dashlevel": "d3zero",
    "dashparams": {"s6": 1.0, "s8": 0.722, "sr6": 1.217, "sr8": 1.0, "alpha6": 14.0},
    "dashparams_citation": "",
    "fctldash": "pbe-d3",
}

atmgr = {"dashlevel": "atmgr", "dashparams": {"alpha6": 14.0}, "dashparams_citation": "", "fctldash": "atm(gr)"}

chg = {"dashlevel": "chg", "dashparams": {"s6": 1.0}, "dashparams_citation": "", "fctldash": "chg"}

dmp2dmp2 = {
    "dashlevel": "dmp2",
    "dashparams": {"s8": 1.187, "a1": 0.944, "a2": 0.480, "rcut": 0.72, "w": 0.20},
    "dashparams_citation": "",
    "fctldash": "mp2-dmp2",
}


def _compute_key(pjrec):
    return pjrec["fctldash"].upper()


# Tests


@pytest.mark.parametrize(
    "inp,expected",
    [
        (({"name_hint": "b3lyp", "level_hint": "d3bj"}, "B3LYP-D3(BJ)"), db3lypd3bj),
        (({"name_hint": "b3LYP", "level_hint": "D3bj"}, "B3LYP-D3(BJ)"), db3lypd3bj),
        (
            (
                {"param_tweaks": {"s8": 1.9889, "s6": 1.0, "a2": 4.4211, "a1": 0.3981}, "level_hint": "d3bj"},
                "B3LYP-D3(BJ)",
            ),
            db3lypd3bj,
        ),
        (({"name_hint": "b3lyp", "level_hint": "d3bJ", "param_tweaks": {"a2": 4.4211}}, "B3LYP-D3(BJ)"), db3lypd3bj),
        (
            ({"verbose": 3, "name_hint": "b3lyp", "level_hint": "d3bJ", "param_tweaks": {"a2": 5.4211}}, ""),
            db3lypd3bjcustom,
        ),
        (({"name_hint": "b3lyp-d3bj", "param_tweaks": {"a2": 4.4211}}, "B3LYP-D3(BJ)"), db3lypd3bj),
        (({"name_hint": "pbe", "level_hint": "d3zero"}, "PBE-D3"), dpbed3zero),
        (({"name_hint": "pbe", "level_hint": "d3"}, "PBE-D3"), dpbed3zero),
        (({"name_hint": "pbe-d3"}, "PBE-D3"), dpbed3zero),
        (({"name_hint": "atm(gr)", "level_hint": "atmgr"}, "ATM(GR)"), atmgr),
        (({"name_hint": "atmgr"}, "ATM(GR)"), atmgr),
        (({"name_hint": "bp86-atmgr"}, "ATM(GR)"), atmgr),
        (({"name_hint": "asdf-chg"}, "CHG"), chg),
        (({"name_hint": "mp2-dmp2"}, "MP2-DMP2"), dmp2dmp2),
        (({"name_hint": "MP2", "level_hint": "dmp2"}, "MP2-DMP2"), dmp2dmp2),
    ],
)
def test_dftd3__from_arrays(inp, expected):
    res = empirical_dispersion_resources.from_arrays(**inp[0])
    assert compare_recursive(expected, res, atol=1.0e-4)
    assert compare(inp[1], _compute_key(res), "key")
    res = empirical_dispersion_resources.from_arrays(
        name_hint=res["fctldash"], level_hint=res["dashlevel"], param_tweaks=res["dashparams"]
    )
    assert compare_recursive(expected, res, tnm() + " idempotent", atol=1.0e-4)


@pytest.mark.parametrize(
    "inp",
    [
        ({"name_hint": "b3lyp", "level_hint": "d3bJ", "param_tweaks": {"a3": 5.4211}}),
        ({"name_hint": "fakeb3lyp", "level_hint": "d3bJ", "param_tweaks": {"s6": 5.4211}}),
        ({"level_hint": "d3bJ", "param_tweaks": {"s6": 5.4211}}),
        ({"name_hint": "b3lyp-d3bj", "param_tweaks": {"a2": 4.4211, "zzz": 0.0}}),
        ({"name_hint": "asdf-d4"}),
        ({"name_hint": "atm(gr)", "level_hint": "chg"}),
    ],
)
def test_dftd3__from_arrays__error(inp):
    with pytest.raises(qcng.exceptions.InputError):
        empirical_dispersion_resources.from_arrays(**inp)


def test_dftd3__from_arrays__supplement():
    ans = {
        "dashlevel": "chg",
        "dashparams": {"s6": 4.05},
        "fctldash": "asdf-d4",
        "dashparams_citation": "    mypaper\n",
    }
    supp = {"chg": {"definitions": {"asdf-d4": {"params": {"s6": 4.05}, "citation": "    mypaper\n"}}}}

    res = empirical_dispersion_resources.from_arrays(name_hint="asdf-d4", level_hint="chg", dashcoeff_supplement=supp)
    assert compare_recursive(ans, res, atol=1.0e-4)
    with pytest.raises(qcng.exceptions.InputError) as e:
        empirical_dispersion_resources.from_arrays(
            name_hint=res["fctldash"], level_hint=res["dashlevel"], param_tweaks=res["dashparams"]
        )
    assert "Can't guess -D correction level" in str(e.value)
    res = empirical_dispersion_resources.from_arrays(
        name_hint=res["fctldash"],
        level_hint=res["dashlevel"],
        param_tweaks=res["dashparams"],
        dashcoeff_supplement=supp,
    )
    assert compare_recursive(ans, res, tnm() + " idempotent", atol=1.0e-4)


@using("dftd3")
def test_3():
    sys = qcel.molparse.from_string(seneyne)["qm"]

    resinp = {
        "schema_name": "qcschema_input",
        "schema_version": 1,
        "molecule": qcel.molparse.to_schema(sys, dtype=2),
        "driver": "energy",
        "model": {"method": "b3lyp"},
        "keywords": {"level_hint": "d3bj"},
    }
    res = qcng.compute(resinp, "dftd3", raise_error=True)
    res = res.dict()

    # res = dftd3.run_dftd3_from_arrays(molrec=sys, name_hint='b3lyp', level_hint='d3bj')
    assert compare("B3LYP-D3(BJ)", _compute_key(res["extras"]["local_keywords"]), "key")


@using("dftd3")
@pytest.mark.parametrize(
    "subjects",
    [
        pytest.param(eneyne_ne_psi4mols, marks=using("psi4")),
        pytest.param(
            eneyne_ne_qcdbmols, marks=using("psi4")
        ),  # needs qcdb.Molecule, presently more common in psi4 than in qcdb
    ],
    ids=["qmol", "pmol"],
)
@pytest.mark.parametrize(
    "inp",
    [
        ({"first": "b3lyp", "second": "d", "parent": "eneyne", "subject": "dimer", "lbl": "B3LYP-D2"}),
        ({"first": "b3lyp", "second": "d3bj", "parent": "eneyne", "subject": "mA", "lbl": "B3LYP-D3(BJ)"}),
        ({"first": "pbe", "second": "d3zero", "parent": "eneyne", "subject": "mB", "lbl": "PBE-D3"}),
        ({"first": "pbe", "second": "d3zero", "parent": "eneyne", "subject": "gAmB", "lbl": "PBE-D3"}),
        ({"first": "pbe", "second": "d2", "parent": "eneyne", "subject": "mAgB", "lbl": "PBE-D2"}),
        ({"first": "b3lyp", "second": "d3bj", "parent": "ne", "subject": "atom", "lbl": "B3LYP-D3(BJ)"}),
        # ({'first': '', 'second': 'atmgr', 'parent': 'eneyne', 'subject': 'dimer', 'lbl': 'ATM'}),
        # ({'first': 'b3lyp', 'second': 'atmgr', 'parent': 'eneyne', 'subject': 'mA', 'lbl': 'ATM'}),
        # ({'first': 'pbe', 'second': 'atm(gr)', 'parent': 'eneyne', 'subject': 'mB', 'lbl': 'ATM'}),
        # ({'first': '', 'second': 'ATMgr', 'parent': 'eneyne', 'subject': 'mAgB', 'lbl': 'ATM'}),
        # below two xfail until dftd3 that's only 2-body is out of psi4 proper
        pytest.param(
            {"first": "atmgr", "second": "atmgr", "parent": "eneyne", "subject": "gAmB", "lbl": "ATM"},
            marks=[using("dftd3_321")],
        ),
        pytest.param(
            {"first": "pbe-atmgr", "second": None, "parent": "ne", "subject": "atom", "lbl": "ATM"},
            marks=[using("dftd3_321")],
        ),
    ],
)
def test_molecule__run_dftd3__23body(inp, subjects):
    subject = subjects()[inp["parent"]][inp["subject"]]
    expected = ref[inp["parent"]][inp["lbl"]][inp["subject"]]
    gexpected = gref[inp["parent"]][inp["lbl"]][inp["subject"]]

    E, G = subject.run_dftd3(inp["first"], inp["second"])
    assert compare_values(expected, E, atol=1.0e-7)
    assert compare_values(gexpected, G, atol=1.0e-7)


@using("qcdb")
def test_qcdb__energy_d3():
    import qcdb

    eneyne = qcdb.set_molecule(seneyne)
    eneyne.update_geometry()

    E, jrec = qcdb.energy("d3-b3lyp-d2", return_wfn=True)
    assert compare_values(ref["eneyne"]["B3LYP-D2"]["dimer"], E, "P: Ethene-Ethyne -D2", atol=1.0e-7)
    assert compare_values(
        ref["eneyne"]["B3LYP-D2"]["dimer"], jrec["qcvars"]["DISPERSION CORRECTION ENERGY"].data, tnm(), atol=1.0e-7
    )
    assert compare_values(
        ref["eneyne"]["B3LYP-D2"]["dimer"],
        jrec["qcvars"]["B3LYP-D2 DISPERSION CORRECTION ENERGY"].data,
        tnm(),
        atol=1.0e-7,
    )

    mA = eneyne.extract_subsets(1)

    E, jrec = qcdb.energy("d3-b3lyp-d3bj", return_wfn=True, molecule=mA)
    assert compare_values(ref["eneyne"]["B3LYP-D3(BJ)"]["mA"], E, tnm(), atol=1.0e-7)
    assert compare_values(
        ref["eneyne"]["B3LYP-D3(BJ)"]["mA"], jrec["qcvars"]["DISPERSION CORRECTION ENERGY"].data, tnm(), atol=1.0e-7
    )
    assert compare_values(
        ref["eneyne"]["B3LYP-D3(BJ)"]["mA"],
        jrec["qcvars"]["B3LYP-D3(BJ) DISPERSION CORRECTION ENERGY"].data,
        tnm(),
        atol=1.0e-7,
    )


@using("mp2d")
@pytest.mark.parametrize(
    "subjects",
    [
        pytest.param(eneyne_ne_psi4mols, marks=using("psi4")),
        pytest.param(
            eneyne_ne_qcdbmols, marks=using("psi4")
        ),  # needs qcdb.Molecule, presently more common in psi4 than in qcdb
        pytest.param(eneyne_ne_qcschemamols),
    ],
    ids=["qmol", "pmol", "qcmol"],
)
@pytest.mark.parametrize(
    "inp",
    [
        ({"parent": "eneyne", "name": "mp2d-mp2-dmp2", "subject": "dimer", "lbl": "MP2-DMP2"}),
        ({"parent": "eneyne", "name": "mp2d-mp2-dmp2", "subject": "mA", "lbl": "MP2-DMP2"}),
        ({"parent": "eneyne", "name": "mp2d-mp2-dmp2", "subject": "mB", "lbl": "MP2-DMP2"}),
        ({"parent": "eneyne", "name": "mp2d-mp2-dmp2", "subject": "gAmB", "lbl": "MP2-DMP2"}),
        ({"parent": "eneyne", "name": "mp2d-mp2-dmp2", "subject": "mAgB", "lbl": "MP2-DMP2"}),
        ({"parent": "ne", "name": "mp2d-mp2-dmp2", "subject": "atom", "lbl": "MP2-DMP2"}),
    ],
)
def test_mp2d__run_mp2d__2body(inp, subjects, request):
    subject = subjects()[inp["parent"]][inp["subject"]]
    expected = ref[inp["parent"]][inp["lbl"]][inp["subject"]]
    gexpected = gref[inp["parent"]][inp["lbl"]][inp["subject"]]

    if "qcmol" in request.node.name:
        mol = subject
    else:
        mol = subject.to_schema(dtype=2)

    resinp = {
        "schema_name": "qcschema_input",
        "schema_version": 1,
        "molecule": mol,
        "driver": "gradient",
        "model": {"method": inp["name"]},
        "keywords": {},
    }
    jrec = qcng.compute(resinp, "mp2d", raise_error=True)
    jrec = jrec.dict()

    # assert len(jrec['extras']['qcvars']) == 8

    assert compare_values(expected, jrec["extras"]["qcvars"]["CURRENT ENERGY"], atol=1.0e-7)
    assert compare_values(expected, jrec["extras"]["qcvars"]["DISPERSION CORRECTION ENERGY"], atol=1.0e-7)
    assert compare_values(expected, jrec["extras"]["qcvars"][inp["lbl"] + " DISPERSION CORRECTION ENERGY"], atol=1.0e-7)

    assert compare_values(gexpected, jrec["extras"]["qcvars"]["CURRENT GRADIENT"], atol=1.0e-7)
    assert compare_values(gexpected, jrec["extras"]["qcvars"]["DISPERSION CORRECTION GRADIENT"], atol=1.0e-7)
    assert compare_values(
        gexpected, jrec["extras"]["qcvars"][inp["lbl"] + " DISPERSION CORRECTION GRADIENT"], atol=1.0e-7
    )


_d3_b3lyp = {"s6": 1.0, "s8": 1.703, "sr6": 1.261, "alpha6": 14.0, "sr8": 1.000}
_d3_pbe = {"s6": 1.0, "s8": 0.722, "sr6": 1.217, "alpha6": 14.0, "sr8": 1.000}
_d4_b3lyp = {"s8": 2.02929367, "a1": 0.40868035, "a2": 4.53807137, "s9": 1.0, "s6": 1.0, "alp": 16.0}
_d4_pbe = {"s8": 0.95948085, "a1": 0.38574991, "a2": 4.80688534, "s9": 1.0, "s6": 1.0, "alp": 16.0}
_d4_b3lyp_2body = {"s8": 2.02929367, "a1": 0.40868035, "a2": 4.53807137, "s9": 0.0, "s6": 1.0, "alp": 16.0}


@pytest.mark.parametrize(
    "subjects",
    [
        pytest.param(eneyne_ne_psi4mols, marks=using("psi4")),
        pytest.param(
            eneyne_ne_qcdbmols, marks=using("psi4")
        ),  # needs qcdb.Molecule, presently more common in psi4 than in qcdb
        pytest.param(eneyne_ne_qcschemamols),
    ],
    ids=["qmol", "pmol", "qcmol"],
)
@pytest.mark.parametrize(
    "inp",
    # fmt: off
    [
        pytest.param({"parent": "eneyne", "subject": "dimer", "qcsk": {"model": {"method": "d3-b3lyp-d"}, "keywords": {}}, "lbl": "B3LYP-D2"}, marks=using("dftd3")),
        pytest.param({"parent": "eneyne", "subject": "mA", "qcsk": {"model": {"method": "d3-b3lyp-d3bj"}, "keywords": {}}, "lbl": "B3LYP-D3(BJ)"}, marks=using("dftd3")),
        pytest.param({"parent": "eneyne", "subject": "mB", "qcsk": {"model": { "method": "d3-PBE-D3zero"}, "keywords": {}}, "lbl": "PBE-D3"}, marks=using("dftd3")),
        pytest.param({ "parent": "eneyne", "subject": "gAmB", "qcsk": { "model": { "method": "d3-PBE-D3zero"}, "keywords": {}}, "lbl": "PBE-D3"}, marks=using("dftd3")),
        pytest.param({ "parent": "eneyne", "subject": "mAgB", "qcsk": { "model": { "method": "d3-PBE-D2"}, "keywords": {}}, "lbl": "PBE-D2"}, marks=using("dftd3")),
        pytest.param({ "parent": "ne", "subject": "atom", "qcsk": { "model": { "method": "d3-b3lyp-d3bj"}, "keywords": {}}, "lbl": "B3LYP-D3(BJ)"}, marks=using("dftd3")),
        pytest.param({ "parent": "eneyne", "subject": "dimer", "qcsk": {"model": {"method": "d3-SAPT0-D3M(BJ)"}, "keywords": {}}, "lbl": "SAPT0-D3M(BJ)"}, marks=using("dftd3")),
        pytest.param({ "parent": "eneyne", "subject": "mA", "qcsk": { "model": { "method": "d3-SAPT0-D3M"}, "keywords": {}}, "lbl": "SAPT0-D3M"}, marks=using("dftd3")),

        pytest.param({ "parent": "eneyne", "subject": "dimer", "qcsk": { "model": { "method": "d4-b3lyp-d4"}, "keywords": {}}, "lbl": "B3LYP-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),
        pytest.param({ "parent": "ne", "subject": "atom", "qcsk": { "model": { "method": "d4-b3lyp-d4"}, "keywords": {}}, "lbl": "B3LYP-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),
        pytest.param({ "parent": "eneyne", "subject": "mA", "qcsk": { "model": { "method": "d4-b3lyp-d4"}, "keywords": {}}, "lbl": "B3LYP-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),
        pytest.param({ "parent": "eneyne", "subject": "gAmB", "qcsk": { "model": { "method": "d4-b3lyp-d4"}, "keywords": {}}, "lbl": "B3LYP-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),
        pytest.param({ "parent": "eneyne", "subject": "mB", "qcsk": { "model": { "method": "d4-PBE-D4"}, "keywords": {}}, "lbl": "PBE-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),
        pytest.param({ "parent": "eneyne", "subject": "mAgB", "qcsk": { "model": { "method": "d4-PBE-D4"}, "keywords": {}}, "lbl": "PBE-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),

        pytest.param({ "parent": "eneyne", "subject": "dimer", "qcsk": {"model": {"method": ""}, "keywords": {"level_hint": "d3", "params_tweaks": _d3_b3lyp}}, "lbl": "B3LYP-D3"}, marks=using("dftd3")),  # params only
        pytest.param({ "parent": "eneyne", "subject": "dimer", "qcsk": {"model": {"method": "b3lyp-d3"}, "keywords": {"level_hint": "d3", "params_tweaks": _d3_b3lyp}}, "lbl": "B3LYP-D3"}, marks=using("dftd3")),  # method reinforcing params
        pytest.param({ "parent": "eneyne", "subject": "dimer", "qcsk": {"model": {"method": "pbe-d3"}, "keywords": {"level_hint": "d3", "params_tweaks": _d3_b3lyp}}, "lbl": "B3LYP-D3"}, marks=using("dftd3")),  # method contradicting params (D3: params win)

        pytest.param({ "parent": "eneyne", "subject": "mAgB", "qcsk": {"model": {"method": ""}, "keywords": {"level_hint": "d4", "params_tweaks": _d4_b3lyp_2body}}, "lbl": "B3LYP-D4(BJ)-2BODY"}, marks=using("dftd4")),  # params only
        pytest.param({ "parent": "eneyne", "subject": "dimer", "qcsk": {"model": {"method": ""}, "keywords": {"level_hint": "d4", "params_tweaks": _d4_b3lyp}}, "lbl": "B3LYP-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),  # params only
        pytest.param({ "parent": "eneyne", "subject": "dimer", "qcsk": {"model": {"method": "b3lyp-d4"}, "keywords": {"level_hint": "d4", "params_tweaks": _d4_b3lyp}}, "lbl": "B3LYP-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),  # method reinforcing params
        pytest.param({ "parent": "eneyne", "subject": "dimer", "qcsk": { "model": {"method": "pbe-d4"}, "keywords": {"pair_resolved": True, "level_hint": "d4", "params_tweaks": _d4_b3lyp}}, "lbl": "PBE-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),  # method contradicting params (D4: method wins)
    ],
    # fmt: on
)
def test_dftd3__run_dftd3__2body(inp, subjects, request):
    subject = subjects()[inp["parent"]][inp["subject"]]
    expected = ref[inp["parent"]][inp["lbl"]][inp["subject"]]
    gexpected = gref[inp["parent"]][inp["lbl"]][inp["subject"]]

    if "qcmol" in request.node.name:
        mol = subject
    else:
        mol = subject.to_schema(dtype=2)

    program = "dftd4" if ("D4(BJ" in inp["lbl"]) else "dftd3"

    atin = AtomicInput(
        molecule=mol,
        driver="gradient",
        **inp["qcsk"],
    )
    jrec = qcng.compute(atin, program, raise_error=True)
    jrec = jrec.dict()
    pprint.pprint(jrec)

    assert compare_values(expected, jrec["properties"]["return_energy"], atol=1.0e-7)
    assert compare_values(expected, jrec["extras"]["qcvars"]["CURRENT ENERGY"], atol=1.0e-7)
    assert compare_values(expected, jrec["extras"]["qcvars"]["DISPERSION CORRECTION ENERGY"], atol=1.0e-7)
    if program == "dftd3":
        assert compare_values(expected, jrec["extras"]["qcvars"]["2-BODY DISPERSION CORRECTION ENERGY"], atol=1.0e-7)
    if atin.model.method:
        assert compare_values(
            expected, jrec["extras"]["qcvars"][inp["lbl"] + " DISPERSION CORRECTION ENERGY"], atol=1.0e-7
        )

    assert compare_values(gexpected, jrec["return_result"], atol=1.0e-7)
    assert compare_values(gexpected, jrec["extras"]["qcvars"]["CURRENT GRADIENT"], atol=1.0e-7)
    assert compare_values(gexpected, jrec["extras"]["qcvars"]["DISPERSION CORRECTION GRADIENT"], atol=1.0e-7)
    if program == "dftd3":
        assert compare_values(gexpected, jrec["extras"]["qcvars"]["2-BODY DISPERSION CORRECTION GRADIENT"], atol=1.0e-7)
    if atin.model.method:
        assert compare_values(
            gexpected, jrec["extras"]["qcvars"][inp["lbl"] + " DISPERSION CORRECTION GRADIENT"], atol=1.0e-7
        )


@pytest.mark.parametrize(
    "subjects",
    [
        pytest.param(eneyne_ne_psi4mols, marks=using("psi4")),
        pytest.param(
            eneyne_ne_qcdbmols, marks=using("psi4")
        ),  # needs qcdb.Molecule, presently more common in psi4 than in qcdb
        pytest.param(eneyne_ne_qcschemamols),
    ],
    ids=["qmol", "pmol", "qcmol"],
)
@pytest.mark.parametrize(
    "inp",
    # fmt: off
    [
        pytest.param({"parent": "eneyne", "subject": "dimer", "qcsk": {"model": {"method": ""}, "keywords": {"level_hint": "d3", "params_tweaks": _d3_b3lyp}}, "lbl": "PBE-D3"}, marks=using("dftd3")),  # wrong ref lbl
        pytest.param({"parent": "eneyne", "subject": "dimer", "qcsk": {"model": {"method": "pbe-d3"}, "keywords": {"level_hint": "d3", "params_tweaks": _d3_b3lyp}}, "lbl": "PBE-D3"}, marks=using("dftd3")),  # method contradicting params (D3: params win -> fail)

        pytest.param({"parent": "eneyne", "subject": "dimer", "qcsk": {"model": {"method": ""}, "keywords": {"level_hint": "d4", "params_tweaks": _d4_b3lyp}}, "lbl": "PBE-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),  # wrong ref lbl
        pytest.param({"parent": "eneyne", "subject": "dimer", "qcsk": {"model": {"method": "pbe-d4"}, "keywords": {"level_hint": "d4", "params_tweaks": _d4_b3lyp}}, "lbl": "B3LYP-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),  # method contradicting params (D4: method wins -> fail)
    ],
    # fmt: on
)
def test_dftd3__run_dftd3__2body_error(inp, subjects, request):
    subject = subjects()[inp["parent"]][inp["subject"]]
    expected = ref[inp["parent"]][inp["lbl"]][inp["subject"]]
    gexpected = gref[inp["parent"]][inp["lbl"]][inp["subject"]]

    if "qcmol" in request.node.name:
        mol = subject
    else:
        mol = subject.to_schema(dtype=2)

    program = "dftd4" if ("D4(BJ" in inp["lbl"]) else "dftd3"

    atin = AtomicInput(
        molecule=mol,
        driver="gradient",
        **inp["qcsk"],
    )
    jrec = qcng.compute(atin, program, raise_error=True)
    jrec = jrec.dict()

    with pytest.raises(AssertionError) as exc:
        assert compare_values(expected, jrec["properties"]["return_energy"], atol=1.0e-7)


@using("dftd3_321")
@pytest.mark.parametrize(
    "subjects",
    [
        pytest.param(eneyne_ne_psi4mols, marks=using("psi4")),
        pytest.param(
            eneyne_ne_qcdbmols, marks=using("psi4")
        ),  # needs qcdb.Molecule, presently more common in psi4 than in qcdb
        pytest.param(eneyne_ne_qcschemamols),
    ],
    ids=["qmol", "pmol", "qcmol"],
)
@pytest.mark.parametrize(
    "inp",
    [
        ({"parent": "eneyne", "name": "d3-atmgr", "subject": "dimer", "lbl": "ATM"}),
        ({"parent": "eneyne", "name": "d3-b3lyp-atmgr", "subject": "mA", "lbl": "ATM"}),
        ({"parent": "eneyne", "name": "d3-pbe-atm(gr)", "subject": "mB", "lbl": "ATM"}),
        ({"parent": "eneyne", "name": "d3-ATMgr", "subject": "mAgB", "lbl": "ATM"}),
        ({"parent": "eneyne", "name": "d3-atmgr", "subject": "gAmB", "lbl": "ATM"}),
        ({"parent": "ne", "name": "d3-atmgr", "subject": "atom", "lbl": "ATM"}),
    ],
)
def test_dftd3__run_dftd3__3body(inp, subjects, request):
    subject = subjects()[inp["parent"]][inp["subject"]]
    expected = ref[inp["parent"]][inp["lbl"]][inp["subject"]]
    gexpected = gref[inp["parent"]][inp["lbl"]][inp["subject"]]

    if "qcmol" in request.node.name:
        mol = subject
    else:
        mol = subject.to_schema(dtype=2)

    resinp = {
        "schema_name": "qcschema_input",
        "schema_version": 1,
        "molecule": mol,
        "driver": "gradient",
        "model": {"method": inp["name"]},
        "keywords": {},
    }
    jrec = qcng.compute(resinp, "dftd3", raise_error=True)
    jrec = jrec.dict()

    assert len(jrec["extras"]["qcvars"]) == 8

    assert compare_values(expected, jrec["extras"]["qcvars"]["CURRENT ENERGY"], atol=1.0e-7)
    assert compare_values(expected, jrec["extras"]["qcvars"]["DISPERSION CORRECTION ENERGY"], atol=1.0e-7)
    assert compare_values(expected, jrec["extras"]["qcvars"]["3-BODY DISPERSION CORRECTION ENERGY"], atol=1.0e-7)
    assert compare_values(
        expected, jrec["extras"]["qcvars"]["AXILROD-TELLER-MUTO 3-BODY DISPERSION CORRECTION ENERGY"], atol=1.0e-7
    )

    assert compare_values(gexpected, jrec["extras"]["qcvars"]["CURRENT GRADIENT"], atol=1.0e-7)
    assert compare_values(gexpected, jrec["extras"]["qcvars"]["DISPERSION CORRECTION GRADIENT"], atol=1.0e-7)
    assert compare_values(gexpected, jrec["extras"]["qcvars"]["3-BODY DISPERSION CORRECTION GRADIENT"], atol=1.0e-7)
    assert compare_values(
        gexpected, jrec["extras"]["qcvars"]["AXILROD-TELLER-MUTO 3-BODY DISPERSION CORRECTION GRADIENT"], atol=1.0e-7
    )


@pytest.mark.parametrize(
    "subjects",
    [
        pytest.param(eneyne_ne_psi4mols, marks=using("psi4")),
        pytest.param(
            eneyne_ne_qcdbmols, marks=using("psi4")
        ),  # needs qcdb.Molecule, presently more common in psi4 than in qcdb
        pytest.param(eneyne_ne_qcschemamols),
    ],
    ids=["qmol", "pmol", "qcmol"],
)
@pytest.mark.parametrize(
    "inp",
    [
        pytest.param({"parent": "eneyne", "subject": "dimer", "lbl": "SAPT0-D3M"}, marks=using("dftd3")),
        pytest.param({"parent": "eneyne", "subject": "dimer", "lbl": "PBE-D4(BJ,EEQ)ATM"}, marks=using("dftd4")),
    ],
)
def test_sapt_pairwise(inp, subjects, request):
    subject = subjects()[inp["parent"]][inp["subject"]]
    expected = ref[inp["parent"]][inp["lbl"]][inp["subject"]]
    expected_pairwise = pref[inp["parent"]][inp["lbl"]][inp["subject"]]

    if "qcmol" in request.node.name:
        mol = subject
    else:
        mol = subject.to_schema(dtype=2)

    program = "dftd4" if ("D4(BJ" in inp["lbl"]) else "dftd3"

    atin = AtomicInput(
        molecule=mol,
        driver="energy",
        model={"method": inp["lbl"]},
        keywords={
            "pair_resolved": True,
        },
    )
    jrec = qcng.compute(atin, program, raise_error=True)
    jrec = jrec.dict()

    assert compare_values(expected, jrec["extras"]["qcvars"]["CURRENT ENERGY"], atol=1.0e-7)
    assert compare_values(expected, jrec["extras"]["qcvars"]["DISPERSION CORRECTION ENERGY"], atol=1.0e-7)
    # assert compare_values(expected, jrec["extras"]["qcvars"]["2-BODY DISPERSION CORRECTION ENERGY"], atol=1.0e-7)
    assert compare_values(expected, jrec["extras"]["qcvars"][inp["lbl"] + " DISPERSION CORRECTION ENERGY"], atol=1.0e-7)
    assert compare_values(
        expected_pairwise, jrec["extras"]["qcvars"]["2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS"], atol=1.0e-7
    )


@pytest.mark.parametrize(
    "program",
    [
        pytest.param("gcp", marks=using("gcp")),
        pytest.param("mctc-gcp", marks=using("mctc-gcp")),
    ],
)
@pytest.mark.parametrize(
    "subjects",
    [
        pytest.param(eneyne_ne_psi4mols, marks=using("psi4")),
        pytest.param(
            eneyne_ne_qcdbmols, marks=using("psi4")
        ),  # needs qcdb.Molecule, presently more common in psi4 than in qcdb
        pytest.param(eneyne_ne_qcschemamols),
    ],
    ids=["qmol", "pmol", "qcmol"],
)
@pytest.mark.parametrize(
    "inp",
    [
        ({"parent": "eneyne", "name": "hf/sv", "subject": "dimer", "lbl": "GCP"}),
        ({"parent": "eneyne", "name": "hf3c", "subject": "mA", "lbl": "GCP"}),
        ({"parent": "eneyne", "name": "dft/def2-tzvp", "subject": "mB", "lbl": "GCP"}),
        ({"parent": "eneyne", "name": "dft/def2-SV(P)", "subject": "gAmB", "lbl": "GCP"}),
        ({"parent": "eneyne", "name": "pbeh3c", "subject": "mAgB", "lbl": "GCP"}),
        ({"parent": "ne", "name": "hf/minis", "subject": "atom", "lbl": "GCP"}),
    ],
)
def test_gcp(inp, subjects, program, request):
    subject = subjects()[inp["parent"]][inp["subject"]]
    expected = ref[inp["parent"]][inp["lbl"]][inp["subject"]]
    gexpected = gref[inp["parent"]][inp["lbl"]][inp["subject"]]

    if "qcmol" in request.node.name:
        mol = subject
    else:
        mol = subject.to_schema(dtype=2)

    resinp = {
        "schema_name": "qcschema_input",
        "schema_version": 1,
        "molecule": mol,
        "driver": "gradient",
        "model": {"method": inp["name"]},
        "keywords": {},
    }
    jrec = qcng.compute(resinp, program, raise_error=True)
    jrec = jrec.dict()

    # assert len(jrec["extras"]["qcvars"]) == 8
    print(jrec["extras"]["qcvars"])

    assert compare_values(expected, jrec["extras"]["qcvars"]["CURRENT ENERGY"], atol=1.0e-7)
    assert compare_values(expected, jrec["extras"]["qcvars"]["GCP CORRECTION ENERGY"], atol=1.0e-7)
    assert compare_values(
        expected, jrec["extras"]["qcvars"][inp["name"].upper() + " GCP CORRECTION ENERGY"], atol=1.0e-7
    )

    assert compare_values(gexpected, jrec["extras"]["qcvars"]["CURRENT GRADIENT"], atol=1.0e-7)
    assert compare_values(gexpected, jrec["extras"]["qcvars"]["GCP CORRECTION GRADIENT"], atol=1.0e-7)
    assert compare_values(
        gexpected, jrec["extras"]["qcvars"][inp["name"].upper() + " GCP CORRECTION GRADIENT"], atol=1.0e-7
    )
