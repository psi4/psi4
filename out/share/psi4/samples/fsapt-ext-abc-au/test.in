#! analog of fsapt-ext-abc with molecule and external potentials in Bohr

memory 1 GB

# water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf
# Table S43

mol = psi4.core.Molecule.from_arrays(
    elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],
    fragment_separators=[3, 6],
    fix_com=True,
    fix_orientation=True,
    fix_symmetry='c1',
    geom=np.array([
  0.0290, -1.1199, -1.5243,
  0.9481, -1.3990, -1.3587,
  1.4371, -0.5588, -1.3099,
  1.0088, -1.5240,  0.5086,
  1.0209, -1.1732,  1.4270,
  1.5864, -0.3901,  1.3101,
 -1.0231,  1.6243, -0.8743,
 -0.5806,  2.0297, -0.1111,
 -0.9480,  1.5096,  0.6281])/psi_bohr2angstroms,
    units="Bohr")
activate(mol)

Chrgfield_A = QMMM()
Chrgfield_A.extern.addCharge( 0.417, -0.5496 / psi_bohr2angstroms, -0.6026 / psi_bohr2angstroms,  1.5720 / psi_bohr2angstroms)
Chrgfield_A.extern.addCharge(-0.834, -1.4545 / psi_bohr2angstroms, -0.1932 / psi_bohr2angstroms,  1.4677 / psi_bohr2angstroms)
Chrgfield_A.extern.addCharge( 0.417, -1.9361 / psi_bohr2angstroms, -0.4028 / psi_bohr2angstroms,  2.2769 / psi_bohr2angstroms)

Chrgfield_B = QMMM()
Chrgfield_B.extern.addCharge( 0.417, -2.5628 / psi_bohr2angstroms, -0.8269 / psi_bohr2angstroms, -1.6696 / psi_bohr2angstroms)
Chrgfield_B.extern.addCharge(-0.834, -1.7899 / psi_bohr2angstroms, -0.4027 / psi_bohr2angstroms, -1.2768 / psi_bohr2angstroms)
Chrgfield_B.extern.addCharge( 0.417, -1.8988 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms)

Chrgfield_C = QMMM()
Chrgfield_C.extern.addCharge( 0.417,  1.1270 / psi_bohr2angstroms,  1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms)
Chrgfield_C.extern.addCharge(-0.834,  1.9896 / psi_bohr2angstroms,  1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms)
Chrgfield_C.extern.addCharge( 0.417,  2.6619 / psi_bohr2angstroms,  1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms)


external_potentials = {
                       'A': Chrgfield_A,
                       'B': Chrgfield_B,
                       'C': Chrgfield_C,
                      }

set {
basis jun-cc-pvdz
scf_type df
guess sad
freeze_core true
}

energy('fisapt0', external_potentials=external_potentials)

keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot']  #TEST

Eref = {  #TEST
    'Enuc'  : 74.2330370461897,      #TEST
    'Eelst' : -0.04919037863747235,  #TEST
    'Eexch' :  0.018239207303845935, #TEST
    'Eind'  : -0.007969545823122322, #TEST
    'Edisp' : -0.002794948165605119, #TEST
    'Etot'  : -0.04171566532235386,  #TEST
    }

Epsi = {  #TEST
    'Enuc'  : mol.nuclear_repulsion_energy(),  #TEST
    'Eelst' : variable("SAPT ELST ENERGY"),    #TEST
    'Eexch' : variable("SAPT EXCH ENERGY"),    #TEST
    'Eind'  : variable("SAPT IND ENERGY"),     #TEST
    'Edisp' : variable("SAPT DISP ENERGY"),    #TEST
    'Etot'  : variable("SAPT0 TOTAL ENERGY"),  #TEST
    }  #TEST

for key in keys:  #TEST
    compare_values(Eref[key], Epsi[key], 6, key)  #TEST


import os
import sys
import subprocess

os.chdir('fsapt')
with open('fA.dat', 'w') as fA: fA.write("w1 1 2 3")
with open('fB.dat', 'w') as fB: fB.write("w3 4 5 6")
subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True)

fEnergies = {}
fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot']    #TEST

with open('fsapt.dat', 'r') as fsapt:                                    #TEST
    Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]]     #TEST

for pair in zip(fkeys,Energies):            #TEST
    fEnergies[pair[0]] = pair[1] #TEST

fEref = {               #TEST
    'fEelst' : -30.867, #TEST
    'fEexch' :  11.445, #TEST
    'fEindAB': -3.138,  #TEST
    'fEindBA': -1.863,  #TEST
    'fEdisp' : -1.754,  #TEST
    'fEedisp':  0.000,  #TEST
    'fEtot'  : -26.177} #TEST

for key in fkeys:                                      #TEST
    compare_values(fEref[key], fEnergies[key], 2, key) #TEST

