#! Numpy interface testing

import numpy as np

# Matrix from array
arr_matrix = np.random.rand(2, 2)
arr_matrix_value = arr_matrix[0, 0]

mat1 = psi4.Matrix.from_array(arr_matrix)
mat2 = psi4.Matrix.from_array([arr_matrix, arr_matrix+3])



# Array from matrix
np_mat1 = mat1.to_array()
np_mat2 = mat2.to_array()
np_mat1_ex = np.array(mat1)

for h in range(mat2.nirrep()):

np_mat1_view = mat1.to_array(copy=False)
np_mat2_view = mat2.to_array(copy=False)
mat1.set(0, 0, 13)
mat2.set(0, 0, 0, 13)




# Vector from array
arr_vector = np.random.rand(4)
arr_vec_value = arr_vector[0]

vec1 = psi4.Vector.from_array(arr_vector)
vec2 = psi4.Vector.from_array([arr_vector, arr_vector])



# Array from Vector
np_vec1 = vec1.to_array()
np_vec2 = vec2.to_array()

np_vec1_view = vec1.to_array(copy=False)
np_vec2_view = vec2.to_array(copy=False)
vec1.set(0, 13)
vec2.set(0, 0, 13)



# Test blank irreps





dim1_match = list(dim1) == list(dim1.to_tuple())
dim2_match = list(dim2) == list(dim2.to_tuple())





irrep_mat = Matrix("Matrix with two zero irreps", dim1, dim2)
irrep_mat.set(0, 0, 0, 4)
irrep_mat.set(0, 0, 1, 3)
irrep_mat.set(0, 1, 0, -5)

arr = irrep_mat.to_array()

new_mat = Matrix.from_array(arr)


irrep_vec = Vector("Vector with two zero irreps", dim2)

arr = irrep_vec.to_array()

new_vec = Vector.from_array(arr)

# Test dense conversion
dense_vec = irrep_vec.to_array(dense=True)

dense_mat = irrep_mat.to_array(dense=True)


irreped_mat = Matrix.from_array([np.random.rand(1,4), np.empty(shape=(0,3)), np.random.rand(2,1)])
dense_arr = irreped_mat.to_array(dense=True)
irreped_mat2 = Matrix.from_array(dense_arr, dim1=(1, 0, 2), dim2=(4, 3, 1))

irreped_arr = irreped_mat2.to_array()

irreped_vec = Vector.from_array([np.random.rand(1), np.empty(shape=(0)), np.random.rand(2)])
dense_arr = irreped_vec.to_array(dense=True)
irreped_vec2 = Vector.from_array(dense_arr, dim1=(1, 0, 2))

irreped_arr = irreped_vec2.to_array()

# Test save
irreped_mat.np_write("irreped_mat")
read_irreped_mat = psi4.Matrix.np_read("irreped_mat")

irreped_vec.np_write("irreped_vec")
read_irreped_vec = psi4.Vector.np_read("irreped_vec")


fkeys = irreped_mat.np_write(prefix='mat ')
fkeys.update(irreped_vec.np_write(prefix='vec '))
np.savez("compound", **fkeys)

read_irreped_mat = psi4.Matrix.np_read("compound", prefix='mat ')

read_irreped_vec = psi4.Vector.np_read("compound", prefix='vec ')


# Make sure our pointers are being tracked correctly
tmp = []
for n in range(1000):
    tmp.append(np.asarray(Matrix(3, 3)))
residual = sum(np.sum(x) for x in tmp)


tmp = []
for n in range(1000):
    view = Matrix(3, 3).np
    view[:] = 1
    tmp.append(view)
residual = sum(np.sum(x) for x in tmp)



# Try out JSON serialization
json_data = irreped_vec.to_serial()
json_vec = psi4.Vector.from_serial(json_data)

json_data = irreped_mat.to_serial()
json_vec = psi4.Matrix.from_serial(json_data)

# Test out chain_dot
A = psi4.core.Matrix.from_array(np.random.rand(4, 3))
B = psi4.core.Matrix.from_array(np.random.rand(3, 5))
C = psi4.core.Matrix.from_array(np.random.rand(5, 5))
D = psi4.core.Matrix.from_array(np.random.rand(5, 2))

### Make sure chain dot works
numpy_result = np.dot(A, B).dot(C).dot(D)
psi_result = psi4.core.Matrix.chain_dot(A, B, C, D)

numpy_result = np.dot(A, B).dot(C.np.T).dot(D)
psi_result = psi4.core.Matrix.chain_dot(A, B, C, D, trans=[False, False, True, False])


