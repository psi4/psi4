#! integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule.
#! single point energies were independently checked using the original wavels code

Enuc = 9.187386457589815 #TEST

test_energy_dict = { "0.00": -75.80441694409643,  #TEST
                     "0.10": -75.80186784992698,  #TEST
                     "0.20": -75.79955923411075,  #TEST
                     "0.30": -75.79743802238295,  #TEST
                     "1.00": -75.78585417924545}  #TEST

molecule h2o {
1 2
o
h 1 0.958
h 1 0.958 2 104.4776 
symmetry c1
}

set {
  reference uhf
  basis cc-pvdz
  guess sad
  scf_type out_of_core
  freeze_core false
  wfn_type oremp
  cc_type conv
  e_convergence 1.0E-9
  r_convergence 1.0E-8
  qc_module occ
  orb_opt true
  max_mograd_convergence 1.0E-7
  rms_mograd_convergence 1.0E-8
  TPDM_ABCD_TYPE direct

}

Avals=[0.00, 0.10, 0.20, 0.30, 1.00]


#for A in Avals:
#     psi4.print_out("running step %5.2f" % A)
#     set remp_A=$A
#     e_remp=energy('remp')
#     compare_values(test_dict[remp_A], get_variable("REMP TOTAL ENERGY"), 6, "REMP Total Energy") #TEST

compare_values(Enuc, h2o.nuclear_repulsion_energy(), 8, "Nuclear Repulsion Energy") #TEST

set remp_A=0.00
ref_grad=psi4.Matrix.from_list([
            [   0.000000000000,    -0.000000000000,     0.049159038571  ],
            [   0.000000000000,     0.041866686183,    -0.024579519285  ],  
            [   0.000000000000,    -0.041866686183,    -0.024579519285  ]])

grad_oremp=gradient('oremp')

compare_values(test_energy_dict["0.00"], variable("OREMP TOTAL ENERGY"), 8, "OREMP(0.00) Total Energy") #TEST
compare_matrices(ref_grad, grad_oremp, 5, "OREMP(0.00) Analytic gradients")  #TEST


set remp_A=0.10
ref_grad=psi4.Matrix.from_list([
            [   0.000000000000,     0.000000000000,     0.048233091249  ],
            [   0.000000000000,     0.041344935277,    -0.024116545625  ],
            [   0.000000000000,    -0.041344935277,    -0.024116545625  ]])

grad_oremp=gradient('oremp')

compare_values(test_energy_dict["0.10"], variable("OREMP TOTAL ENERGY"), 8, "OREMP(0.10) Total Energy") #TEST
compare_matrices(ref_grad, grad_oremp, 5, "OREMP(0.10) Analytic gradients")  #TEST


set remp_A=0.20
ref_grad=psi4.Matrix.from_list([
            [   0.000000000000,     0.000000000000,     0.047576773795  ],
            [   0.000000000000,     0.040974793680,    -0.023788386898  ],
            [   0.000000000000,    -0.040974793680,    -0.023788386898  ]])

grad_oremp=gradient('oremp')
compare_values(test_energy_dict["0.20"], variable("OREMP TOTAL ENERGY"), 8, "OREMP(0.20) Total Energy") #TEST
compare_matrices(ref_grad, grad_oremp, 5, "OREMP(0.20) Analytic gradients")  #TEST

set remp_A=0.30
ref_grad=psi4.Matrix.from_list([
            [   0.000000000000,     0.000000000000,     0.047095614965  ],
            [   0.000000000000,     0.040703559525,    -0.023547807483  ],
            [   0.000000000000,    -0.040703559525,    -0.023547807483  ]])

grad_oremp=gradient('oremp')
compare_values(test_energy_dict["0.30"], variable("OREMP TOTAL ENERGY"), 8, "OREMP(0.30) Total Energy") #TEST
compare_matrices(ref_grad, grad_oremp, 5, "OREMP(0.30) Analytic gradients")  #TEST

set remp_A=1.00
ref_grad=psi4.Matrix.from_list([
            [   0.000000000000,     0.000000000000,     0.046028282301  ],
            [   0.000000000000,     0.040093883348,    -0.023014141151  ],
            [   0.000000000000,    -0.040093883348,    -0.023014141151  ]])

grad_oremp=gradient('oremp')
compare_values(test_energy_dict["1.00"], variable("OREMP TOTAL ENERGY"), 8, "OREMP(1.00) Total Energy") #TEST
compare_matrices(ref_grad, grad_oremp, 5, "OREMP(1.00) Analytic gradients")  #TEST
