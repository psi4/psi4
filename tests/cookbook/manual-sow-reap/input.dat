#! Frequency by finite difference of energies.
#! Automated version of this in pywrap-freq-e-sowreap. !nosample

# This python input file facilitates a frequency computation by energy points, allowing
# the user freedom to run the energy points in a distributed, parallel fashion.
# The user must do the following:
# 1. Edit this file for the desired molecule and wavefunction type.
# 2. Create a file E-input.dat which includes everything except the atomic coordinates for
# the execution of the energy points.  This input file may only include one molecule section.
# 3. Run psi4 on this input file with sow=1 (see below).  This will create the input files
# for the energy computations at the displaced geometries in a subdirectory..
# 4. Run psi4 for each of the input files.  An example csh script is used here to run them
# sequentially.  Often, one would want to submit the list to a batch queue.
# 5. Run psi4 on this input file with sow=0.

molecule {
  O
  H             1    0.9894093
  H             1    0.9894093      2   100.02688
}

set findif points 5

set {
  basis sto-3g
}

sow = 0       # 1 to make displacements; then run energies separately; then 0 to collect them
irrep = -1    # do all irreps, otherwise pick one of them (numbering starts with 0)
project_rot = True # True to project rotations, False otherwise
project_trans = True # True to project translations, False otherwise

#
# Below this line should not generally need changed.
#

molecule = psi4.get_active_molecule()
molecule.update_geometry()
natom = molecule.natom()

if sow:
  findif_meta_dict = driver_findif.hessian_from_energy_geometries(molecule, irrep)

  with open("manual_findif.json", "w") as f:
      import json
      json.dump(findif_meta_dict, f)

  ndisp = len(findif_meta_dict["displacements"]) + 1
  print(" %d displacements needed." % ndisp)

  dispdir = "displacements"
  if not os.path.exists(dispdir):
    os.makedirs(dispdir)

  def write_disp(label, displacement):
    geom = displacement["geometry"][:]
    nm = label + ".in"
    disp_input_file = open(nm, "w")

    with open("E-input.dat","r") as E_input_file:
      EinputLines = E_input_file.readlines()
  
    # Loop over lines of the energy input file
    for line in EinputLines:
      words = line.split();
      if (len(words)):  # check for empty lines
        if (words[0].lower() == "molecule"): # then insert geometry
          disp_input_file.write(line);
          disp_input_file.write("unit au\n")
          for atom in range(natom):
            sym = molecule.symbol(atom)
            xval = geom.pop(0)
            yval = geom.pop(0)
            zval = geom.pop(0)
      
            l = "{:10s}{:20.15f}{:20.15f}{:20.15f}\n".format(sym, xval, yval, zval)
            disp_input_file.write(l)
        else:                           # copy line as is
          disp_input_file.write(line)
      else:
        disp_input_file.write("\n")     # empty line

    # Close the input file and move into the displacements directory..
    disp_input_file.close()
    shutil.move(nm, dispdir)
    return

  # Loop over displacements
  for label, displacement in findif_meta_dict["displacements"].items():
      write_disp(label, displacement)

  write_disp("reference", findif_meta_dict["reference"])


else: # sow=0, means that we are ready to compute the frequencies, run after energy points

  with open("manual_findif.json") as f:
      findif_meta_dict = json.load(f)

  def read_disp(label, displacement):
    disp_output_file = label + ".out"

    with open("displacements/" + disp_output_file, "r") as dispOutput:
      dispOutputLines = dispOutput.readlines()

    # Loop over lines of the energy output file
    for line in dispOutputLines:
      words = line.split();
      if (len(words) >= 4):  # check for empty lines
        if (words[0] == "FD") and (words[1] == "ENERGY") and (words[2] == "="):
          displacement["energy"] = float(words[3])

  for label, displacement in findif_meta_dict["displacements"].items():
      read_disp(label, displacement)

  read_disp("reference", findif_meta_dict["reference"])

  H = driver_findif.compute_hessian_from_energy(findif_meta_dict, irrep)
  wfn = core.Wavefunction.build(molecule, core.get_global_option('BASIS'))
  wfn.set_hessian(core.Matrix.from_array(H))
  vibinfo = vibanal_wfn(wfn, irrep=None, project_trans=project_trans, project_rot=project_rot)

clean()

