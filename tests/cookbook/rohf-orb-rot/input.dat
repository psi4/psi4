#!   Test if DGAS's orbital rotation code matches expected values.
#!   The first two calculations compute the X (symm A'') and A (symm A') states of HO2 in Cs
#! by restricting the occupations of the two states.
#!   The second two calculations compute the X and A states of HO2 in C1. Computation
#! of the A state requires a rotation of the HOMO and SOMO by 90 degrees
#! (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this.

# Restrict occupations to compute CCSD/6-31G energy of X state (symm A'') of HO2 in Cs.
set { 
    basis 6-31G
    reference rohf
    maxiter 500
    e_convergence 10
    d_convergence 10
    r_convergence 10
    freeze_core True
    scf_type pk
    docc [7, 1]
    socc [0, 1]
}

molecule ho2 {
    0 2
    O -0.6937342972  0.0081785728  0.0000000000
    O  0.6354757377 -0.0626608366  0.0000000000
    H  0.9246056151  0.8646730647  0.0000000000
}

scf_e, scf_wfn = energy('scf', return_wfn=True)
ccsd_e, ccsd_wfn = energy('ccsd', return_wfn=True)

compare_values(-150.108136116503147, scf_e, 6, 'X SCF energy') #TEST
compare_values(-150.347533153677489, ccsd_e, 6, 'X CCSD energy') #TEST

clean()

# Restrict occupations to compute CCSD/6-31G energy of A state (symm A') of HO2 in Cs.
set {
    docc [6, 2]
    socc [1, 0]
}

scf_e, scf_wfn = energy('scf', return_wfn=True)
ccsd_e, ccsd_wfn = energy('ccsd', return_wfn=True)

compare_values(-150.087298715913619, scf_e, 6, 'A SCF energy') #TEST
compare_values(-150.312480530946573, ccsd_e, 6, 'A CCSD energy') #TEST

clean()

# Compute CCSD/6-31G energy of X state of HO2 in C1.
set {
    docc [8]
    socc [1]
}

molecule ho2 {
    0 2
    O -0.6937342972  0.0081785728  0.0000000000
    O  0.6354757377 -0.0626608366  0.0000000000
    H  0.9246056151  0.8646730647  0.0000000000
    symmetry c1
}

scf_e, scf_wfn = energy('scf', return_wfn=True)
ccsd_e, ccsd_wfn = energy('ccsd', return_wfn=True)

compare_values(-150.108136116503147, scf_e, 6, 'X SCF energy') #TEST
compare_values(-150.347533153677489, ccsd_e, 6, 'X CCSD energy') #TEST

# Rotate HOMO and SOMO by 90 degrees to obtain guess for A state of HO2 in C1.
#orb_rotate(scf_wfn.Ca(), 0, 7, 8, 90.0)
Matrix.rotate_columns(scf_wfn.Ca(), 0, 7, 8, math.pi / 2.0)

fname = os.path.split(os.path.abspath(core.get_writer_file_prefix(scf_wfn.molecule().name())))[1]
filename = os.path.join(core.get_environment("PSI_SCRATCH"), fname + ".180.npz")
data = {}
data.update(scf_wfn.Ca().np_write(None, prefix="Ca"))
data.update(scf_wfn.Cb().np_write(None, prefix="Cb"))

Ca_occ = scf_wfn.Ca_subset("SO", "OCC")
data.update(Ca_occ.np_write(None, prefix="Ca_occ"))

Cb_occ = scf_wfn.Cb_subset("SO", "OCC")
data.update(Cb_occ.np_write(None, prefix="Cb_occ"))

data["reference"] = core.get_option('SCF', 'REFERENCE')
data["nsoccpi"] = scf_wfn.soccpi().to_tuple()
data["ndoccpi"] = scf_wfn.doccpi().to_tuple()
data["nalphapi"] = scf_wfn.nalphapi().to_tuple()
data["nbetapi"] = scf_wfn.nbetapi().to_tuple()
data["symmetry"] = scf_wfn.molecule().schoenflies_symbol()
data["BasisSet"] = scf_wfn.basisset().name()
data["BasisSet PUREAM"] = scf_wfn.basisset().has_puream()
np.savez(filename, **data)

# Read in rotated guess and compute CCSD/6-31G energy of A state of HO2 in C1.
set {
    guess read
}

scf_e, scf_wfn = energy('scf', return_wfn=True)
ccsd_e, ccsd_wfn = energy('ccsd', return_wfn=True)

compare_values(-150.087298715913619, scf_e, 6, 'A SCF energy') #TEST
compare_values(-150.312480530946573, ccsd_e, 6, 'A CCSD energy') #TEST
