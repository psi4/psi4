#! Frequency by finite difference of energies.
#! Automated version of this in pywrap-freq-e-sowreap. !nosample

# This python input file facilitates a frequency computation by energy points, allowing
# the user freedom to run the energy points in a distributed, parallel fashion.
# The user must do the following:
# 1. Edit this file for the desired molecule and wavefunction type.
# 2. Create a file E-input.dat which includes everything except the atomic coordinates for
# the execution of the energy points.  This input file may only include one molecule section.
# 3. Run psi4 on this input file with sow=1 (see below).  This will create the input files
# for the energy computations at the displaced geometries in a subdirectory..
# 4. Run psi4 for each of the input files.  An example csh script is used here to run them
# sequentially.  Often, one would want to submit the list to a batch queue.
# 5. Run psi4 on this input file with sow=0.

molecule {
  O
  H             1    1.028270
  H             1    1.028270      2   96.767980
}

set {
  basis sto-3g
  scf_type pk
}

set findif points 5

sow = 0       # 0 to make displacements; then run energies separately; then 1 to collect them
irrep = -1    # do all irreps, otherwise pick one of them (numbering starts with 0)

#
# Below this line should not generally need changed.
#

molecule = psi4.get_active_molecule()
molecule.update_geometry()
natom = molecule.natom()

displacements = psi4.fd_geoms_freq_0(irrep)

if sow:
  ndisp = len(displacements)
  print " %d displacements needed." % ndisp

  dispdir = "displacements"
  if not os.path.exists(dispdir):
    os.makedirs(dispdir)

  # Loop over displacements
  for n, disp in enumerate(displacements):

    nm = str(n) + "-disp.in"
    disp_input_file = open(nm, "w")

    with open("E-input.dat","r") as E_input_file:
      EinputLines = E_input_file.readlines()
  
    # Loop over lines of the energy input file
    for line in EinputLines:
      words = line.split();
      if (len(words)):  # check for empty lines
        if (words[0].lower() == "molecule"): # then insert geometry
          disp_input_file.write(line);
          disp_input_file.write("unit au\n")
          for atom in range(natom):
            sym = molecule.symbol(atom)
            xval = disp.get(atom,0)
            yval = disp.get(atom,1)
            zval = disp.get(atom,2)
      
            l = "{:10s}{:20.15f}{:20.15f}{:20.15f}\n".format(sym, xval, yval, zval)
            disp_input_file.write(l)
        else:                           # copy line as is
          disp_input_file.write(line);
      else:
        disp_input_file.write("\n")     # empty line
  
    # Close the input file and move into the displacements directory..
    E_input_file.close()
    disp_input_file.close()
    shutil.move(nm, dispdir)

else: # sow=0, means that we are ready to compute the frequencies, run after energy points

  energies = []

  for n, disp in enumerate(displacements):

    disp_output_file = str(n) + "-disp.out"

    with open("displacements/" + disp_output_file, "r") as dispOutput:
      dispOutputLines = dispOutput.readlines()

    # Loop over lines of the energy output file
    for line in dispOutputLines:
      words = line.split();
      if (len(words) >= 4):  # check for empty lines
        if (words[0] == "FD") and (words[1] == "ENERGY") and (words[2] == "="):
          energies.append(float(words[3]))

  psi4.fd_freq_0(energies, irrep)

clean()

