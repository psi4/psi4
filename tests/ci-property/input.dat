#! CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!)

import warnings  #TEST
d2au = 1 / constants.dipmom_au2debye  #TEST
q2au = 1 / (constants.dipmom_au2debye * constants.bohr2angstroms)  #TEST

molecule no3 {
  -1 3
   O            0.000000000000     0.000000000000     1.352965563729
   N            0.000000000000     0.000000000000     0.099633131563
   O           -0.000000000000     1.006816424330    -0.720095709717
   O            0.000000000000    -1.006816424330    -0.720095709717
  
}

set {
    reference           rohf
    basis               6-31G*
    e_convergence       10
    frozen_docc         [3, 0, 0, 2]
    restricted_docc     [4, 1, 1, 1]
    active              [3, 0, 2, 3] 
    mcscf_diis_start    7
    mcscf_diis_max_vecs 4
    avg_states          [0, 1]
    num_roots           2
    mcscf_type          df
    mcscf_r_convergence 1.e-4
    mcscf_e_convergence 1.e-5
    ci_maxiter          24
    h0_blocksize        1000
}

no3.update_geometry()
no3.print_out()
compare_values(115.5036328441, no3.nuclear_repulsion_energy(), 9, "Nuclear repulsion energy") #TEST

props = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES',
         'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES',
         'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI',
         'MULTIPOLE(3)', 'NO_OCCUPATIONS',
         'TRANSITION_DIPOLE', 'TRANSITION_QUADRUPOLE']

fci_energy = prop('FCI', properties=props)

compare_values(fci_energy, -278.7924561878957, 6, 'FCI Energy')    #TEST
with warnings.catch_warnings():  #TEST
    warnings.simplefilter("ignore")  #TEST
    compare_values(psi4.variable('CI DIPOLE Y'), 0.000000000000, 4, "FCI DIPOLE Y")    #TEST
    compare_values(psi4.variable('CI DIPOLE Z'), 1.908946764853, 4, "FCI DIPOLE Z")    #TEST
    compare_values(psi4.variable('CI QUADRUPOLE XX'), -22.395945512510, 4, "FCI QUADRUPOLE XX")    #TEST
    compare_values(psi4.variable('CI QUADRUPOLE YY'), -27.774201286760, 4, "FCI QUADRUPOLE YY")    #TEST
    compare_values(psi4.variable('CI QUADRUPOLE ZZ'), -29.166055634625, 4, "FCI QUADRUPOLE ZZ")    #TEST
    compare_values(psi4.variable('CI QUADRUPOLE YZ'), 0.000000000000, 4, "FCI QUADRUPOLE YZ")    #TEST
    compare_values(psi4.variable('CI ROOT 0 DIPOLE Y'), 0.000000000000, 4, "CI ROOT 0 DIPOLE Y")    #TEST
    compare_values(psi4.variable('CI ROOT 0 DIPOLE Z'), -0.483503167660, 4, "CI ROOT 0 DIPOLE Z")    #TEST
    compare_values(psi4.variable('CI ROOT 0 QUADRUPOLE XX'), -22.419106552690, 4, "CI ROOT 0 QUADRUPOLE XX")    #TEST
    compare_values(psi4.variable('CI ROOT 0 QUADRUPOLE YY'), -26.694665553619, 4, "CI ROOT 0 QUADRUPOLE YY")    #TEST
    compare_values(psi4.variable('CI ROOT 0 QUADRUPOLE ZZ'), -30.482314878839, 4, "CI ROOT 0 QUADRUPOLE ZZ")    #TEST
    compare_values(psi4.variable('CI ROOT 0 QUADRUPOLE YZ'), 0.000000000000, 4, "CI ROOT 0 QUADRUPOLE YZ")    #TEST
    compare_values(psi4.variable('CI ROOT 1 DIPOLE Y'), 0.000000000000, 4, "CI ROOT 1 DIPOLE Y")    #TEST
    compare_values(psi4.variable('CI ROOT 1 DIPOLE Z'), 4.301396697365, 4, "CI ROOT 1 DIPOLE Z")    #TEST
    compare_values(psi4.variable('CI ROOT 1 QUADRUPOLE XX'), -22.372784472330, 4, "CI ROOT 1 QUADRUPOLE XX")    #TEST
    compare_values(psi4.variable('CI ROOT 1 QUADRUPOLE YY'), -28.853737019899, 4, "CI ROOT 1 QUADRUPOLE YY")    #TEST
    compare_values(psi4.variable('CI ROOT 1 QUADRUPOLE ZZ'), -27.849796390412, 4, "CI ROOT 1 QUADRUPOLE ZZ")    #TEST
    compare_values(psi4.variable('CI ROOT 1 QUADRUPOLE YZ'), 0.000000000000, 4, "CI ROOT 1 QUADRUPOLE YZ")    #TEST
    compare_values(abs(psi4.variable('CI ROOT 0 -> ROOT 1 DIPOLE Y')), 0.000000000000, 4, "CI ROOT 0 -> ROOT 1 DIPOLE Y")  #TEST
    compare_values(abs(psi4.variable('CI ROOT 0 -> ROOT 1 DIPOLE Z')), 0.425513677544, 4, "CI ROOT 0 -> ROOT 1 DIPOLE Z")  #TEST
    compare_values(abs(psi4.variable('CI ROOT 0 -> ROOT 1 QUADRUPOLE XX')), 0.016387859082, 4, "CI ROOT 0 -> ROOT 1 QUADRUPOLE XX")  #TEST
    compare_values(abs(psi4.variable('CI ROOT 0 -> ROOT 1 QUADRUPOLE YY')), 0.573374390021, 4, "CI ROOT 0 -> ROOT 1 QUADRUPOLE YY")  #TEST
    compare_values(abs(psi4.variable('CI ROOT 0 -> ROOT 1 QUADRUPOLE ZZ')), 0.677526505530, 4, "CI ROOT 0 -> ROOT 1 QUADRUPOLE ZZ")  #TEST
    compare_values(abs(psi4.variable('CI ROOT 0 -> ROOT 1 QUADRUPOLE YZ')), 0.000000000000, 4, "CI ROOT 0 -> ROOT 1 QUADRUPOLE YZ")  #TEST
compare_values(np.array([0, 0, 1.908946764853]) * d2au, variable("CI DIPOLE"), 4, "FCI DIPOLE")  #TEST
compare_values(np.array([[-22.395945512510, 0, 0], [0, -27.774201286760, 0], [0, 0, -29.166055634625]]) * q2au, variable("CI QUADRUPOLE"), 4, "FCI QUADRUPOLE")  #TEST
compare_values(np.array([0, 0, -0.483503167660]) * d2au, variable("CI ROOT 0 DIPOLE"), 4, "CI ROOT 0 DIPOLE")  #TEST
compare_values(np.array([[-22.419106552690, 0, 0], [0, -26.694665553619, 0], [0, 0, -30.482314878839]]) * q2au, variable("CI ROOT 0 QUADRUPOLE"), 4, "CI ROOT 0 QUADRUPOLE")  #TEST
compare_values(np.array([0, 0, 4.301396697365]) * d2au, variable("CI ROOT 1 DIPOLE"), 4, "CI ROOT 1 DIPOLE")  #TEST
compare_values(np.array([[-22.372784472330, 0, 0], [0, -28.853737019899, 0], [0, 0, -27.849796390412]]) * q2au, variable("CI ROOT 1 QUADRUPOLE"), 4, "CI ROOT 1 QUADRUPOLE")  #TEST
compare_values(np.array([0, 0, 0.425513677544]) * d2au, np.absolute(variable("CI ROOT 0 -> ROOT 1 DIPOLE")), 4, "CI ROOT 0 -> ROOT 1 DIPOLE")  #TEST
compare_values(np.array([[0.016387859082, 0, 0], [0, 0.573374390021, 0], [0, 0, 0.677526505530]]) * q2au, np.absolute(variable("CI ROOT 0 -> ROOT 1 QUADRUPOLE")), 4, "CI ROOT 0 -> ROOT 1 QUADRUPOLE")  #TEST

cas_energy = prop('CASSCF', properties=props)    #TEST
compare_values(-278.778339189657800, cas_energy, 6, 'CASSCF Energy')    #TEST
with warnings.catch_warnings():  #TEST
    warnings.simplefilter("ignore")  #TEST
    compare_values(psi4.variable('CASSCF DIPOLE Y'), 0.000000000000, 2, "CASSCF DIPOLE Y")    #TEST
    compare_values(psi4.variable('CASSCF DIPOLE Z'), 1.994979146421, 2, "CASSCF DIPOLE Z")    #TEST
    compare_values(psi4.variable('CASSCF QUADRUPOLE XX'), -22.404898239966, 2, "CASSCF QUADRUPOLE XX")    #TEST
    compare_values(psi4.variable('CASSCF QUADRUPOLE YY'), -27.936106983618, 2, "CASSCF QUADRUPOLE YY")    #TEST
    compare_values(psi4.variable('CASSCF QUADRUPOLE ZZ'), -28.338138881212, 2, "CASSCF QUADRUPOLE ZZ")    #TEST
    compare_values(psi4.variable('CASSCF QUADRUPOLE YZ'), 0.000000000000, 2, "CASSCF QUADRUPOLE YZ")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 DIPOLE Y'), 0.000000000000, 2, "CASSCF ROOT 1 DIPOLE Y")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 DIPOLE Z'), 4.462471853372, 2, "CASSCF ROOT 1 DIPOLE Z")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 QUADRUPOLE XX'), -22.295623175859, 2, "CASSCF ROOT 1 QUADRUPOLE XX")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 QUADRUPOLE YY'), -29.286904330283, 2, "CASSCF ROOT 1 QUADRUPOLE YY")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 QUADRUPOLE ZZ'), -27.288580048926, 2, "CASSCF ROOT 1 QUADRUPOLE ZZ")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 QUADRUPOLE YZ'), 0.000000000000, 4, "CASSCF ROOT 1 QUADRUPOLE YZ")    #TEST
compare_values(np.array([0, 0, 1.994979146421]) * d2au, variable('CASSCF DIPOLE'), 2, "CASSCF DIPOLE")  #TEST
compare_values(np.array([[-22.404898239966, 0, 0], [0, -27.936106983618, 0], [0, 0, -28.338138881212]]) * q2au, variable("CASSCF QUADRUPOLE"), 2, "CASSCF QUADRUPOLE")  #TEST
compare_values(np.array([0, 0, 4.462471853372]) * d2au, psi4.variable('CASSCF ROOT 1 DIPOLE'), 2, "CASSCF ROOT 1 DIPOLE")  #TEST
compare_values(np.array([[-22.295623175859, 0, 0], [0, -29.286904330283, 0], [0, 0, -27.288580048926]]) * q2au, variable('CASSCF ROOT 1 QUADRUPOLE'), 2, "CASSCF ROOT 1 QUADRUPOLE")  #TEST

set DETCI NAT_ORBS true
cas_energy = prop('CASSCF', properties=props)    #TEST
compare_values(-278.778339189657800, cas_energy, 6, 'CASSCF Energy')    #TEST
with warnings.catch_warnings():  #TEST
    warnings.simplefilter("ignore")  #TEST
    compare_values(psi4.variable('CASSCF DIPOLE Y'), 0.000000000000, 2, "CASSCF DIPOLE Y")    #TEST
    compare_values(psi4.variable('CASSCF DIPOLE Z'), 1.994979146421, 2, "CASSCF DIPOLE Z")    #TEST
    compare_values(psi4.variable('CASSCF QUADRUPOLE XX'), -22.404898239966, 2, "CASSCF QUADRUPOLE XX")    #TEST
    compare_values(psi4.variable('CASSCF QUADRUPOLE YY'), -27.936106983618, 2, "CASSCF QUADRUPOLE YY")    #TEST
    compare_values(psi4.variable('CASSCF QUADRUPOLE ZZ'), -28.338138881212, 2, "CASSCF QUADRUPOLE ZZ")    #TEST
    compare_values(psi4.variable('CASSCF QUADRUPOLE YZ'), 0.000000000000, 2, "CASSCF QUADRUPOLE YZ")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 DIPOLE Y'), 0.000000000000, 2, "CASSCF ROOT 1 DIPOLE Y")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 DIPOLE Z'), 4.462471853372, 2, "CASSCF ROOT 1 DIPOLE Z")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 QUADRUPOLE XX'), -22.295623175859, 2, "CASSCF ROOT 1 QUADRUPOLE XX")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 QUADRUPOLE YY'), -29.286904330283, 2, "CASSCF ROOT 1 QUADRUPOLE YY")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 QUADRUPOLE ZZ'), -27.288580048926, 2, "CASSCF ROOT 1 QUADRUPOLE ZZ")    #TEST
    compare_values(psi4.variable('CASSCF ROOT 1 QUADRUPOLE YZ'), 0.000000000000, 4, "CASSCF ROOT 1 QUADRUPOLE YZ")    #TEST
compare_values(np.array([0, 0, 1.994979146421]) * d2au, psi4.variable('CASSCF DIPOLE'), 2, "CASSCF DIPOLE")  #TEST
compare_values(np.array([[-22.404898239966, 0, 0], [0, -27.936106983618, 0], [0, 0, -28.338138881212]]) * q2au, psi4.variable('CASSCF QUADRUPOLE'), 2, "CASSCF QUADRUPOLE")  #TEST
compare_values(np.array([0, 0, 4.462471853372]) * d2au, psi4.variable('CASSCF ROOT 1 DIPOLE'), 2, "CASSCF ROOT 1 DIPOLE")  #TEST
compare_values(np.array([[-22.295623175859, 0, 0], [0, -29.286904330283, 0], [0, 0, -27.288580048926]]) * q2au, psi4.variable('CASSCF ROOT 1 QUADRUPOLE'), 2, "CASSCF ROOT 1 QUADRUPOLE")  #TEST

#name = 'CASSCF'    #TEST
#prop_list = []    #TEST
#for dip in ['Y', 'Z']:    #TEST
#    prop_list.append(name + ' DIPOLE ' + dip)    #TEST
#for quad in ['XX', 'YY', 'ZZ', 'YZ']:    #TEST
#    prop_list.append(name + ' QUADRUPOLE ' + quad)    #TEST
#    #TEST
#for p in prop_list:    #TEST
#    val = psi4.variable(p)    #TEST
#    pstring  = "compare_values(psi4.variable("    #TEST
#    pstring += "'" + p + "'"    #TEST
#    pstring += '), %14.12f, 4, "' % val    #TEST
#    pstring += p    #TEST
#    pstring += '")'    #TEST
#    print pstring    #TEST
