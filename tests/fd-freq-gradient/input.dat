#! STO-3G frequencies for H2O by finite-differences of gradients

molecule h2o {
  0 1
  O
  H 1 0.9894093
  H 1 0.9894093 2 100.02688
}

set {
  basis sto-3g
  d_convergence 11
  scf_type pk
}

list_freqs = [2170.045, 4140.001, 4391.065]  #TEST
anal_freqs = psi4.Vector.from_list(list_freqs)  #TEST
a1_freqs = psi4.Vector.from_list(list_freqs[0:2])  #TEST
b2_freqs = psi4.Vector.from_list(list_freqs[2:3])  #TEST

# Compute all frequencies with default 3-point formula.
scf_e, scf_wfn = frequencies('scf', dertype=1, return_wfn=True)

fd_freqs = scf_wfn.frequencies()               #TEST
compare_vectors(anal_freqs, fd_freqs, 1,       #TEST
 "Analytic vs. 3-pt finite-diff freq from grad to 0.1 cm^-1") #TEST

scf_vibinfo = scf_wfn.frequency_analysis
scf_vibonly = qcdb.vib.filter_nonvib(scf_vibinfo)
ref_a1_vibonly = qcdb.vib.filter_nonvib(scf_vibonly, remove=[i for i, d in enumerate(scf_vibonly['gamma'].data) if d != 'A1'])
ref_b2_vibonly = qcdb.vib.filter_nonvib(scf_vibonly, remove=[i for i, d in enumerate(scf_vibonly['gamma'].data) if d != 'B2'])

# Compute A1 frequencies only.
scf_e, scf_wfn = frequencies('scf', dertype=1, irrep=1, return_wfn=True)

fd_freqs = scf_wfn.frequencies()               #TEST
compare_vectors(a1_freqs, fd_freqs, 1,         #TEST
 "Analytic vs. 3-pt finite-diff A1 freq from grad to 0.1 cm^-1") #TEST

a1_vibinfo = scf_wfn.frequency_analysis
a1_vibonly = qcdb.vib.filter_nonvib(a1_vibinfo)
compare_integers(1, qcdb.compare_vibinfos(ref_a1_vibonly, a1_vibonly, 2, 'A1 analyses', verbose=0, forgive=[]), 'A1 analyses')

# Compute B2 frequency only.
scf_e, scf_wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True)

fd_freqs = scf_wfn.frequencies()               #TEST
compare_vectors(b2_freqs, fd_freqs, 1,         #TEST
 "Analytic vs. 3-pt finite-diff B2 freq from grad to 0.1 cm^-1") #TEST

b2_vibinfo = scf_wfn.frequency_analysis
b2_vibonly = qcdb.vib.filter_nonvib(b2_vibinfo)
compare_integers(1, qcdb.compare_vibinfos(ref_b2_vibonly, b2_vibonly, 2, 'B2 analyses', verbose=2, forgive=[]), 'B2 analyses')

# Compute all frequencies with 5-point formula.
set findif { points 5 }

scf_e, scf_wfn = frequencies('scf', dertype=1, return_wfn=True)

fd_freqs = scf_wfn.frequencies()               #TEST
compare_vectors(anal_freqs, fd_freqs, 2,       #TEST
 "Analytic vs. 5-pt finite-diff freq from grad to 0.01 cm^-1") #TEST

clean()
