    -----------------------------------------------------------------------
          Psi4: An Open-Source Ab Initio Electronic Structure Package
                              Psi4 0.5 Driver

                          Git: Rev {master} dbe9080

    J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,
    F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,
    M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,
    W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,
    and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012)
    (doi: 10.1002/wcms.93)

                         Additional Contributions by
    A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov
    -----------------------------------------------------------------------


    Psi4 started on: Mon Mar 14 15:15:22 2016

    Process ID:   9283
    PSI4DATADIR: /home/dsmith/Gits/dgas_psi/share
    Memory level set to 256.000 MB

  ==> Input File <==

--------------------------------------------------------------------------
memory 250 mb

#! Test individual integral objects for correctness.
print_stdout(' Case Study Test of Integrals')

molecule h2o {
  o
  h 1 1.0
  h 1 1.0 2 103.1
}

input_directory = get_input_directory() + "/"                        #TEST

#################################################################### #TEST
# Test Angular Momentum Integrals SO                                 #TEST
#################################################################### #TEST

set globals {
  basis sto-3g
}

wfn = psi4.new_wavefunction(h2o, psi4.get_global_option('BASIS'))
mints = MintsHelper(wfn.basisset())
factory = mints.factory()                                            #TEST

Li = mints.so_angular_momentum()

#Li[0].save("Lx-STO-3G.dat", False, False, True)                     #TEST
#Li[1].save("Ly-STO-3G.dat", False, False, True)                     #TEST
#Li[2].save("Lz-STO-3G.dat", False, False, True)                     #TEST

RefX = factory.create_matrix("Lx SO")                                #TEST
RefY = factory.create_matrix("Ly SO")                                #TEST
RefZ = factory.create_matrix("Lz SO")                                #TEST

RefX.load(input_directory + "Lx-STO-3G.dat")                         #TEST
RefY.load(input_directory + "Ly-STO-3G.dat")                         #TEST
RefZ.load(input_directory + "Lz-STO-3G.dat")                         #TEST

print_stdout("   -H2O STO-3G Angular Momentum Integrals:")           #TEST
compare_matrices(RefX, Li[0], 12, "SO Lx")                           #TEST
compare_matrices(RefY, Li[1], 12, "SO Ly")                           #TEST
compare_matrices(RefZ, Li[2], 12, "SO Lz")                           #TEST

set globals {
  basis 6-311G**
}

wfn = psi4.new_wavefunction(h2o, psi4.get_global_option('BASIS'))
mints = MintsHelper(wfn.basisset())
factory = mints.factory()                                            #TEST

Li = mints.so_angular_momentum()

#Li[0].save("Lx-6-311Gss.dat", False, False, True)                   #TEST
#Li[1].save("Ly-6-311Gss.dat", False, False, True)                   #TEST
#Li[2].save("Lz-6-311Gss.dat", False, False, True)                   #TEST

RefX = factory.create_matrix("Lx SO")                                #TEST
RefY = factory.create_matrix("Ly SO")                                #TEST
RefZ = factory.create_matrix("Lz SO")                                #TEST

RefX.load(input_directory + "Lx-6-311Gss.dat")                       #TEST
RefY.load(input_directory + "Ly-6-311Gss.dat")                       #TEST
RefZ.load(input_directory + "Lz-6-311Gss.dat")                       #TEST

print_stdout("   -H2O 6-311G** Angular Momentum Integrals:")         #TEST
compare_matrices(RefX, Li[0], 12, "SO Lx")                           #TEST
compare_matrices(RefY, Li[1], 12, "SO Ly")                           #TEST
compare_matrices(RefZ, Li[2], 12, "SO Lz")                           #TEST

set globals {
  basis cc-pVTZ
}

wfn = psi4.new_wavefunction(h2o, psi4.get_global_option('BASIS'))
mints = MintsHelper(wfn.basisset())
factory = mints.factory()                                            #TEST

Li = mints.so_angular_momentum()

#Li[0].save("Lx-cc-pVTZ.dat", False, False, True)                    #TEST
#Li[1].save("Ly-cc-pVTZ.dat", False, False, True)                    #TEST
#Li[2].save("Lz-cc-pVTZ.dat", False, False, True)                    #TEST

RefX = factory.create_matrix("Lx SO")                                #TEST
RefY = factory.create_matrix("Ly SO")                                #TEST
RefZ = factory.create_matrix("Lz SO")                                #TEST

RefX.load(input_directory + "Lx-cc-pVTZ.dat")                        #TEST
RefY.load(input_directory + "Ly-cc-pVTZ.dat")                        #TEST
RefZ.load(input_directory + "Lz-cc-pVTZ.dat")                        #TEST

print_stdout("   -H2O cc-pVTZ Angular Momentum Integrals:")          #TEST
compare_matrices(RefX, Li[0], 12, "SO Lx")                           #TEST
compare_matrices(RefY, Li[1], 12, "SO Ly")                           #TEST
compare_matrices(RefZ, Li[2], 12, "SO Lz")                           #TEST

#################################################################### #TEST
# Test Nabla integrals                                               #TEST
#################################################################### #TEST

set globals {
  basis sto-3g
}

wfn = psi4.new_wavefunction(h2o, psi4.get_global_option('BASIS'))
mints = MintsHelper(wfn.basisset())
factory = mints.factory()                                            #TEST

Pi = mints.so_nabla()

#Pi[0].save("Px-STO-3G.dat", False, False, True)                     #TEST
#Pi[1].save("Py-STO-3G.dat", False, False, True)                     #TEST
#Pi[2].save("Pz-STO-3G.dat", False, False, True)                     #TEST

RefX = factory.create_matrix("Px SO")                                #TEST
RefY = factory.create_matrix("Py SO")                                #TEST
RefZ = factory.create_matrix("Pz SO")                                #TEST

RefX.load(input_directory + "Px-STO-3G.dat")                         #TEST
RefY.load(input_directory + "Py-STO-3G.dat")                         #TEST
RefZ.load(input_directory + "Pz-STO-3G.dat")                         #TEST

print_stdout("   -H2O STO-3G Nabla Integrals:")                      #TEST
compare_matrices(RefX, Pi[0], 12, "SO Px")                           #TEST
compare_matrices(RefY, Pi[1], 12, "SO Py")                           #TEST
compare_matrices(RefZ, Pi[2], 12, "SO Pz")                           #TEST

set globals {
  basis 6-311G**
}

wfn = psi4.new_wavefunction(h2o, psi4.get_global_option('BASIS'))
mints = MintsHelper(wfn.basisset())
factory = mints.factory()                                            #TEST

Pi = mints.so_nabla()

#Pi[0].save("Px-6-311Gss.dat", False, False, True)                   #TEST
#Pi[1].save("Py-6-311Gss.dat", False, False, True)                   #TEST
#Pi[2].save("Pz-6-311Gss.dat", False, False, True)                   #TEST

RefX = factory.create_matrix("Px SO")                                #TEST
RefY = factory.create_matrix("Py SO")                                #TEST
RefZ = factory.create_matrix("Pz SO")                                #TEST

RefX.load(input_directory + "Px-6-311Gss.dat")                       #TEST
RefY.load(input_directory + "Py-6-311Gss.dat")                       #TEST
RefZ.load(input_directory + "Pz-6-311Gss.dat")                       #TEST

print_stdout("   -H2O 6-311G** Nabla Integrals:")                    #TEST
compare_matrices(RefX, Pi[0], 12, "SO Px")                           #TEST
compare_matrices(RefY, Pi[1], 12, "SO Py")                           #TEST
compare_matrices(RefZ, Pi[2], 12, "SO Pz")                           #TEST

set globals {
  basis cc-pVTZ
}

wfn = psi4.new_wavefunction(h2o, psi4.get_global_option('BASIS'))
mints = MintsHelper(wfn.basisset())
factory = mints.factory()                                            #TEST

Pi = mints.so_nabla()

#Pi[0].save("Px-cc-pVTZ.dat", False, False, True)                    #TEST
#Pi[1].save("Py-cc-pVTZ.dat", False, False, True)                    #TEST
#Pi[2].save("Pz-cc-pVTZ.dat", False, False, True)                    #TEST

RefX = factory.create_matrix("Lx SO")                                #TEST
RefY = factory.create_matrix("Ly SO")                                #TEST
RefZ = factory.create_matrix("Lz SO")                                #TEST

RefX.load(input_directory + "Px-cc-pVTZ.dat")                        #TEST
RefY.load(input_directory + "Py-cc-pVTZ.dat")                        #TEST
RefZ.load(input_directory + "Pz-cc-pVTZ.dat")                        #TEST

print_stdout("   -H2O cc-pVTZ Nabla Integrals:")                     #TEST
compare_matrices(RefX, Pi[0], 12, "SO Px")                           #TEST
compare_matrices(RefY, Pi[1], 12, "SO Py")                           #TEST
compare_matrices(RefZ, Pi[2], 12, "SO Pz")                           #TEST
--------------------------------------------------------------------------

  Memory set to 250.000 MiB by Python script.
    There are an even number of electrons - assuming singlet.
    Specify the multiplicity in the molecule input block.

	SO Lx.............................................................PASSED
	SO Ly.............................................................PASSED
	SO Lz.............................................................PASSED
	SO Lx.............................................................PASSED
	SO Ly.............................................................PASSED
	SO Lz.............................................................PASSED
	SO Lx.............................................................PASSED
	SO Ly.............................................................PASSED
	SO Lz.............................................................PASSED
	SO Px.............................................................PASSED
	SO Py.............................................................PASSED
	SO Pz.............................................................PASSED
	SO Px.............................................................PASSED
	SO Py.............................................................PASSED
	SO Pz.............................................................PASSED
	SO Px.............................................................PASSED
	SO Py.............................................................PASSED
	SO Pz.............................................................PASSED

*** PSI4 exiting successfully. Buy a developer a beer!
