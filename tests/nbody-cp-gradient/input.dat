#! Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015))

ref = {
"((1, 2, 3), (1, 2, 3))": (-224.91552989393287, 0.021848793840945943),
"((1, 2), (1, 2, 3))": ( -149.94054830838144, 0.019116371778589655),
"((1, 3), (1, 2, 3))": ( -149.94197668297062, 0.019002088007756268),
"((2, 3), (1, 2, 3))": ( -149.94128152394086, 0.018939268786499593),
"((1,), (1, 2, 3))": ( -74.97042065760473, 0.01477882932339267),
"((2,), (1, 2, 3))": ( -74.96989892034797, 0.014675968393825936),
"((3,), (1, 2, 3))": ( -74.97068360217213, 0.014481558269032477),
"((1,), (1,))": ( -74.96340208276189, 0.024143516023737103),
"((2,), (2,))": ( -74.96344779298651, 0.02398186931473767),
"((3,), (3,))": ( -74.9635436680525, 0.02366990762961269),
}

ref_1cp_ene = -224.89039354380088

ref_2cp_ene = -224.89219369884412
ref_2cp_ie = -0.0018001550432131808
ref_2cp_grad_rms = 0.01980609842746601
# prev gradients passed, but these collected to more digits and higher conv
ref_2cp_grad = [
 [ 0.0017920186, -0.0305628808,  0.0321853302],
 [-0.0045480481,  0.0142394694, -0.0059915435],
 [ 0.0124702123,  0.0229902892, -0.0252947978],
 [ 0.0261768602,  0.0164410006,  0.0314616515],
 [-0.0268167134, -0.0012981605, -0.024764235 ],
 [-0.010019038 , -0.0098105311, -0.0073350284],
 [-0.025121316 ,  0.0105838043, -0.0352099637],
 [ 0.013289112 , -0.002870953 ,  0.0081178672],
 [ 0.0127769125, -0.0197120381,  0.0268307194]]
ref_2cp_grad_ie = [
 [ 0.0019141485,  0.010689037 , -0.0065740359],
 [ 0.0063122873, -0.0016686293,  0.004525916 ],
 [ 0.001487747 , -0.00235353  ,  0.0029471087],
 [-0.0100014412, -0.0034479371, -0.0066932322],
 [ 0.0013001531,  0.0021537659,  0.0029850647],
 [-0.0019576031,  0.00662648  ,  0.0030705556],
 [ 0.0080987247, -0.0070574361,  0.0054159324],
 [-0.0046371843, -0.005331509 , -0.0025381112],
 [-0.0025168319,  0.0003897585, -0.0031391982]]

ref_3cp_ie = -0.004526713808019167
ref_3cp_ene = -224.8949202576089

distributed = os.environ.get("_PSI4_USE_QCF", False)
if distributed:
    from qcfractal.snowflake import FractalSnowflake
    snowflake = FractalSnowflake()
    client = snowflake.client()

import numpy as np

molecule water_trimer {
O      -2.76373224  -1.24377706  -0.15444566
H      -1.12357791  -2.06227970  -0.05243799
H      -3.80792362  -2.08705525   1.06090407
--
O       2.46924614  -1.75437739  -0.17092884
H       3.76368260  -2.21425403   1.00846104
H       2.30598330   0.07098445  -0.03942473
--
O       0.29127930   3.00875625   0.20308515
H      -1.21253048   1.95820900   0.10303324
H       0.10002049   4.24958115  -1.10222079
no_reorient
no_com
symmetry c1
units bohr
}

set d_convergence 9

# compute nbody
if distributed:
    plan = gradient('SCF/STO-3G', molecule=water_trimer, bsse_type='cp', max_nbody=2,
                                      return_total_data=True, return_plan=True)
    plan.compute(client)
    snowflake.await_results()
    g, wfn = plan.get_psi_results(client, return_wfn=True)
else:
    g, wfn = gradient('SCF/STO-3G', molecule=water_trimer, bsse_type='cp', max_nbody=2,
                                      return_total_data=True, return_wfn=True)
core.clean()

# renamed for v1.10
# * '2' -> 'CP-CORRECTED TOTAL ENERGY THROUGH 2-BODY'
# * '2CP' -> 'CP-CORRECTED TOTAL ENERGY THROUGH 2-BODY'
# * 'GRADIENT 2' -> 'CP-CORRECTED TOTAL GRADIENT THROUGH 2-BODY'
# * 'GRADIENT 1_((1, 2), (1, 2, 3))' -> 'N-BODY (1, 2)@(1, 2, 3) TOTAL GRADIENT'
# * '1_((1, 2), (1, 2, 3))' -> 'N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY'  # if multilevel, 'N-BODY Â§A_(1, 2)@(1, 2, 3) TOTAL ENERGY'

# test fresh env
for result in [  #TEST
    wfn.variable('cp-corrected total energy through 2-body'),  #TEST
    wfn.variable('CP-CORRECTED TOTAL ENERGY THROUGH 2-BODY'),  #TEST
    wfn.variable("CURRENT ENERGY"),  #TEST
    variable("CURRENT ENERGY"),  #TEST
]:  #TEST
    compare_values(ref_2cp_ene, result, 8, 'CP-Corrected Energy')  #TEST

for result in [  #TEST
    wfn.variable("CP-CORRECTED 2-BODY INTERACTION ENERGY"),  #TEST
    variable("CP-CORRECTED INTERACTION ENERGY THROUGH 2-body"),  #TEST
]:  #TEST
    compare_values(ref_2cp_ie, result, 8, 'CP-Corrected Interaction Energy')  #TEST

for result in [  #TEST
    g,  #TEST
    wfn.variable('cp-corrected total gradient through 2-body'),  #TEST
    wfn.variable("CURRENT GRADIENT"),  #TEST
    variable("CURRENT GRADIENT"),  #TEST
]:  #TEST
    compare_values(ref_2cp_grad, result, 7, 'CP-Corrected Gradient')  #TEST

# compute pieces
cp_scheme = {  #TEST
    '((1, 2), (1, 2, 3))': 1,  #TEST
    '((1, 3), (1, 2, 3))': 1,  #TEST
    '((2, 3), (1, 2, 3))': 1,  #TEST
    '((1,), (1, 2, 3))': -2,  #TEST
    '((2,), (1, 2, 3))': -2,  #TEST
    '((3,), (1, 2, 3))': -2,  #TEST
    '((1,), (1,))': 1,  #TEST
    '((2,), (2,))': 1,  #TEST
    '((3,), (3,))': 1,  #TEST
}  #TEST

import qcmanybody as qcmb  #TEST
sz_dict = {1: 3, 2: 3, 3: 3}
sl_dict = {1: slice(0, 3), 2: slice(3, 6), 3: slice(6, 9)}

energy_dict, gradient_dict = {}, {} #TEST
for i in cp_scheme: #TEST
    mol = water_trimer.extract_subsets(eval(i)[0], list(set(eval(i)[1]) - set(eval(i)[0]))) #TEST
    gradient_dict[i], wfn_mol = gradient('SCF/STO-3G', molecule=mol, return_wfn=True) #TEST
    energy_dict[i] = core.variable('CURRENT ENERGY') #TEST
    core.clean() #TEST

    for result in [
        energy_dict[i],
        # parsing below turns the object-centric fragment notation of cp_scheme
        #   keys into the clearer-for-eyes fragment notation in qcvars.
        wfn.variable(f"N-BODY {eval(i)[0]}@{eval(i)[1]} TOTAL ENERGY".replace(",)", ")")),
        wfn_mol.variable("CURRENT ENERGY"),
        variable("CURRENT ENERGY"),
    ]:
        compare_values(ref[i][0], result, 8, f"Energy of {i}")  #TEST

    for result in [
        gradient_dict[i],
        # contortion below is b/c the species gradient is padded with zeros into
        #   supersystem shape. So we need to convert it to ndarray, contract it
        #   down to species shape again, then reform psi4.Matrix for rms() check.
        psi4.core.Matrix.from_array(qcmb.utils.resize_gradient(
            wfn.variable(f"N-BODY {eval(i)[0]}@{eval(i)[1]} TOTAL GRADIENT".replace(",)", ")")).np,
            eval(i)[1], sz_dict, sl_dict, reverse=True)),
        wfn_mol.variable("CURRENT GRADIENT"),
        variable("CURRENT GRADIENT"),
    ]:
        compare_arrays(ref[i][1], result.rms(), 8, f"Gradient RMS of {i}")  #TEST


# recompute from pieces
ene, grad = 0, np.zeros((9, 3)) #TEST

for i in cp_scheme: #TEST
    ene += cp_scheme[i] * energy_dict[i] #TEST

for i in range(3): #TEST
    key = '((%i,), (%i,))' %(i + 1, i + 1) #TEST
    grad[i*3: i*3 + 3, :] += cp_scheme.pop(key) * np.array(gradient_dict[key]) #TEST

for i in cp_scheme: #TEST
    grad += cp_scheme[i] * np.array(gradient_dict[i]) #TEST

# test
for result in [  #TEST
    wfn.variable('CP-CORRECTED TOTAL ENERGY THROUGH 2-BODY'),  #TEST
    wfn.variable('CP-CORRECTED TOTAL ENERGY THROUGH 2-BODY'),  #TEST
    wfn.variable("CURRENT ENERGY"),  #TEST
    ene,  #TEST
]:  #TEST
    compare_values(ref_2cp_ene, result, 8, 'CP-Corrected Energy')  #TEST

for result in [  #TEST
    wfn.variable("CP-CORRECTED 2-BODY INTERACTION ENERGY"),  #TEST
]:  #TEST
    compare_values(ref_2cp_ie, result, 8, 'CP-Corrected Interaction Energy')  #TEST

for result in [  #TEST
    wfn.variable('CP-CORRECTED TOTAL GRADIENT THROUGH 2-BODY'),  #TEST
    wfn.variable("CURRENT GRADIENT"),  #TEST
    grad,  #TEST
]:  #TEST
    compare_values(ref_2cp_grad, result, 7, 'CP-Corrected Gradient')  #TEST

# NBODY NUMBER=12 was a bug fixed in v1.10 where all nocp species were run just
#   to get the nocp monomers for total energy
compare(9, wfn.variable("NBODY NUMBER"), "rtd=T nbody number")  #TEST


# compute nbody again with return_total_data=False
# * note CURRENT ENERGY moved from first to second testing block
if distributed:
    plan = gradient('SCF/STO-3G', molecule=water_trimer, bsse_type=['cp','nocp'], max_nbody=2,
                                      return_total_data=False, return_plan=True)
    plan.compute(client)
    snowflake.await_results()
    g, wfn = plan.get_psi_results(client, return_wfn=True)
else:
    g, wfn = gradient('SCF/STO-3G', molecule=water_trimer, bsse_type=['cp','nocp'], max_nbody=2,
                                      return_total_data=False, return_wfn=True)
core.clean()

# test fresh env
for result in [  #TEST
    wfn.variable('CP-CORRECTED TOTAL ENERGY'),  #TEST
    wfn.variable('CP-CORRECTED TOTAL ENERGY THROUGH 2-BODY'),  #TEST
]:  #TEST
    compare_values(ref_2cp_ene, result, 8, 'rtd=F CP-Corrected Energy')  #TEST

for result in [  #TEST
    wfn.variable("CP-CORRECTED 2-BODY INTERACTION ENERGY"),  #TEST
    variable("CP-CORRECTED 2-BODY INTERACTION ENERGY"),  #TEST
    wfn.variable("CURRENT ENERGY"),  #TEST
    variable("CURRENT ENERGY"),  #TEST
]:  #TEST
    compare_values(ref_2cp_ie, result, 8, 'rtd=F CP-Corrected Interaction Energy')  #TEST

for result in [  #TEST
    wfn.variable('CP-CORRECTED TOTAL GRADIENT THROUGH 2-BODY'),  #TEST
    wfn.variable('CP-CORRECTED TOTAL GRADIENT'),  #TEST
]:  #TEST
    compare_values(ref_2cp_grad, result, 7, 'rtd=F CP-Corrected Gradient')  #TEST

for result in [  #TEST
    wfn.variable('CP-CORRECTED INTERACTION GRADIENT'),  #TEST
    g,  #TEST
    wfn.variable("CURRENT GRADIENT"),  #TEST
    variable("CURRENT GRADIENT"),  #TEST
]:  #TEST
    compare_values(ref_2cp_grad_ie, result, 7, 'rtd=F CP-Corrected Gradient')  #TEST

compare(12, wfn.variable("NBODY NUMBER"), "rtd=F nbody number")  #TEST

if distributed:
    snowflake.stop()
