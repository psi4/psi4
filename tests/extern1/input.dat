#! External potential calculation involving a TIP3P water and a QM water.
#! Finite different test of the gradient is performed to validate forces.

molecule water {
  0 1
  O  -0.778803000000  0.000000000000  1.132683000000
  H  -0.666682000000  0.764099000000  1.706291000000
  H  -0.666682000000  -0.764099000000  1.706290000000
  symmetry c1
  no_reorient
  no_com
}

# This molecule defined here only to trip up the driver
#   Removing the interloper molecule and optionally removing the "molecule=water"
#   arguments below would produce exactly the same result.
molecule interloper {
H
H 1 1.0
}

# Define a TIP3P water as the external potential
Chrgfield = QMMM()
Chrgfield.extern.addCharge(-0.834,1.649232019048,0.0,-2.356023604706)
Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-3.799961446760)
Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-0.912085762652)
psi4.set_global_option_python('EXTERN', Chrgfield.extern)

set {
    scf_type df
    d_convergence 12
    basis 6-31G*
    print 4
}

fd_grad = gradient('scf', molecule=water, dertype=0)
fd_ener = psi4.variable('CURRENT ENERGY')
an_grad = gradient('scf', molecule=water)
an_ener = psi4.variable('CURRENT ENERGY')

compare_matrices(an_grad, fd_grad, 5, "Finite difference (3-pt.) vs. analytic gradient to 10^-5") #TEST
compare_values(-76.0194112285529968, fd_ener, 6, 'Finite difference energy')  #TEST
compare_values(-76.0194112285529968, an_ener, 6, 'Analytic energy')  #TEST

import pprint
from qcelemental.models import Singlepole, Multipoles

asdf = Singlepole(angular_momentum=1, geometry=[0.0, 0.0, 0.0, 1.0, 0.0, 0.0], coefficients=[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], exponents=[1.0, 2.0])
pprint.pprint(asdf.dict())
dasdf = asdf.dict()
symbols = ['He' + str(iat) for iat in range(len(dasdf['exponents']))]
print(symbols)

mol = psi4.core.Molecule.from_arrays(geom=dasdf['geometry'], elbl=symbols, fix_symmetry='c1')
print(mol)

coeff, bs = core.BasisSet.multipole_from_pydict(mol, asdf.dict())

print(coeff)
print(bs)

bs.print_out()
bs.print_detail_out()
mol.print_out()
