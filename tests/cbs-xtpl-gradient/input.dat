#! Various gradients for a strained helium dimer and water molecule
import numpy as np
memory 500 mb

lref_scf_dz =   [[ 0.0,  0.0,   0.01233095],  #TEST
                 [ 0.0,  0.0,  -0.01233095]]  #TEST
lref_scf_tz =   [[ 0.0,  0.0,   0.01246097],  #TEST
                 [ 0.0,  0.0,  -0.01246097]]  #TEST
lref_scf_dtz =  [[ 0.0,  0.0,   0.01249265],  #TEST
                 [ 0.0,  0.0,  -0.01249265]]  #TEST
lref_scf_dtqz = [[ 0.0,  0.0,   0.01244412],  #TEST
                 [ 0.0,  0.0,  -0.01244412]]  #TEST

lref_mp2_dtz =  [[ 0.0,  0.0,   0.01155124],  #TEST
                 [ 0.0,  0.0,  -0.01155124]]  #TEST
ref_scf_dz =  psi4.Matrix(2, 3)                                                #TEST
ref_scf_dz.set(lref_scf_dz)                                                    #TEST
ref_scf_tz =  psi4.Matrix(2, 3)                                                #TEST
ref_scf_tz.set(lref_scf_tz)                                                    #TEST
ref_scf_dtz = psi4.Matrix(2, 3)                                                #TEST
ref_scf_dtz.set(lref_scf_dtz)                                                  #TEST
ref_scf_dtqz = psi4.Matrix(2, 3)                                               #TEST
ref_scf_dtqz.set(lref_scf_dtqz)                                                #TEST
ref_mp2_dtz = psi4.Matrix(2, 3)                                                #TEST
ref_mp2_dtz.set(lref_mp2_dtz)                                                  #TEST

nucenergy_ref = 1.17594935242

molecule he_dimer {
    He 0 0 0
    He 0 0 1.8
}

# Get a reasonable guess, to save some iterations
set globals = {
    scf_type      pk
    mp2_type      conv
    reference     rhf
}

he_dimer.update_geometry()
compare_values(nucenergy_ref, he_dimer.nuclear_repulsion_energy(), 9, "Nuclear repulsion energy") #TEST

# SCF TESTS

scf_dz = gradient('SCF/cc-pVDZ')
compare_matrices(ref_scf_dz, scf_dz, 6, "SCF/cc-pVDZ Gradient")  #TEST

scf_tz = gradient('SCF/cc-pVTZ', dertype=0)
compare_matrices(ref_scf_tz, scf_tz, 6, "SCF/cc-pVTZ Gradient, dertype=0")  #TEST

scf_dtz = gradient('SCF/cc-pV[23]Z', dertype=0)
compare_matrices(ref_scf_dtz, scf_dtz, 6, "SCF/cc-pV[DT]Z Gradient, dertype=0")  #TEST

scf_dtz = gradient('SCF/cc-pV[23]Z')
compare_matrices(ref_scf_dtz, scf_dtz, 6, "SCF/cc-pV[DT]Z Gradient, dertype=1")  #TEST

# We do not currently test at this high of angular momentum
# scf_dtqz = gradient('SCF/cc-pV[DTQ]Z')
# compare_matrices(ref_scf_dtqz, scf_dtqz, 6, "SCF/cc-pV[DTQ]Z Gradient")  #TEST


# MP2 TESTS
mp2_dtz = gradient('MP2/cc-pV[DT]Z')
compare_matrices(ref_mp2_dtz, mp2_dtz, 6, "MP2/cc-pV[DT]Z Gradient")  #TEST

mp2_dtz = gradient('MP2/cc-pV[DT]Z', dertype='energy')
compare_matrices(ref_mp2_dtz, mp2_dtz, 6, "MP2/cc-pV[DT]Z Gradient, dertype=0")  #TEST
