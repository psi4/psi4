#! pcm

from functools import reduce

nucenergy   =  12.0367196636183458 #TEST
polenergy   =  -0.0053060443528559 #TEST
totalenergy = -55.4559426361734040 #TEST

import glob
import os
import shutil

molecule NH3 {
symmetry c1
N     -0.0000000001    -0.1040380466      0.0000000000
H     -0.9015844116     0.4818470201     -1.5615900098
H     -0.9015844116     0.4818470201      1.5615900098
H      1.8031688251     0.4818470204      0.0000000000
units bohr
no_reorient
no_com
}

set {
  basis STO-3G
  scf_type pk
  pcm true
  pcm_scf_type total
}

pcm = {
   Units = Angstrom
   Medium {
   SolverType = IEFPCM
   Solvent = Water
   }

   Cavity {
   RadiiSet = UFF
   Type = GePol
   Scaling = False
   Area = 0.3
   Mode = Implicit
   }
}

print('RHF-PCM, total algorithm')
energy_scf1, wfn1 = energy('scf', return_wfn=True)
compare_values(nucenergy, NH3.nuclear_repulsion_energy(), 10, "Nuclear repulsion energy (PCM, total algorithm)") #TEST
compare_values(totalenergy, energy_scf1, 10, "Total energy (PCM, total algorithm)") #TEST
compare_values(polenergy, wfn1.get_variable("PCM POLARIZATION ENERGY"), 6, "Polarization energy (PCM, total algorithm)") #TEST

pid = str(os.getpid())
scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver')
pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']]))
filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save)

set pcm_scf_type separate
print('RHF-PCM, separate algorithm')
energy_scf2, wfn2 = energy('scf', return_wfn=True)
compare_values(totalenergy, energy_scf2, 10, "Total energy (PCM, separate algorithm)") #TEST
compare_values(polenergy, wfn2.get_variable("PCM POLARIZATION ENERGY"), 6, "Polarization energy (PCM, separate algorithm)")  #TEST

# Now force use of UHF on NH3 to check sanity of the algorithm with PCM
set pcm_scf_type total
set reference uhf
print('UHF-PCM, total algorithm')
energy_scf3, wfn3 = energy('scf', return_wfn=True)
compare_values(totalenergy, energy_scf3, 10, "Total energy (PCM, separate algorithm)") #TEST
compare_values(polenergy, wfn3.get_variable("PCM POLARIZATION ENERGY"), 6, "Polarization energy (PCM, separate algorithm)")  #TEST
