#! pcm

memory 250 mb

nucenergy   =  12.0367196636183458 # TEST
polenergy   =  -0.0060921680888660 # TEST
totalenergy = -56.5572469753401847 # TEST

molecule NH3 {
symmetry c1
N     -0.0000000001    -0.1040380466      0.0000000000
H     -0.9015844116     0.4818470201     -1.5615900098
H     -0.9015844116     0.4818470201      1.5615900098
H      1.8031688251     0.4818470204      0.0000000000
units bohr
no_reorient
no_com
}

set {
  basis cc-pVDZ
  scf_type pk
  pcm true
  pcm_scf_type total
}

pcm = {
   Units = Angstrom
   Medium {
   SolverType = IEFPCM
   Solvent = Water
   }

   Cavity {
   RadiiSet = UFF
   Type = GePol
   Scaling = False
   Area = 0.3
   Mode = Implicit
   }
}

print('RKS-PCM B3LYP, total algorithm')
energy_scf1 = energy('b3lyp')
compare_values(NH3.nuclear_repulsion_energy(), nucenergy, 10, "Nuclear repulsion energy (PCM, total algorithm)") #TEST
compare_values(energy_scf1, totalenergy, 9, "Total energy (PCM, total algorithm)") #TEST
compare_values(get_variable("PCM POLARIZATION ENERGY"), polenergy, 6, "Polarization energy (PCM, total algorithm)") #TEST

set pcm_scf_type separate
print('RKS-PCM B3LYP, separate algorithm')
energy_scf2 = energy('b3lyp')
compare_values(energy_scf2, totalenergy, 9, "Total energy (PCM, separate algorithm)") #TEST
compare_values(get_variable("PCM POLARIZATION ENERGY"), polenergy, 6, "Polarization energy (PCM, separate algorithm)")  #TEST

# Now force use of UKS on NH3 to check sanity of the algorithm with PCM
set pcm_scf_type total
set reference uks
print('UKS-PCM B3LYP, total algorithm')
energy_scf3 = energy('b3lyp')
compare_values(energy_scf3, totalenergy, 9, "Total energy (PCM, separate algorithm)") #TEST
compare_values(get_variable("PCM POLARIZATION ENERGY"), polenergy, 6, "Polarization energy (PCM, separate algorithm)")  #TEST
