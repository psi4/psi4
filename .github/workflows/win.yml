name: Win

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  ecosystem:
    strategy:
      fail-fast: false
      matrix:
        cfg:

          - runs-on: windows-latest
            python-version: "3.8"
            base-channel: "conda-forge"
            cmargs: >
              -DBUILD_SHARED_LIBS=OFF

              #-DCMAKE_CXX_COMPILER=clang-cl
              #-DCMAKE_C_COMPILER=clang-cl

    name: "Win • 🐍 ${{ matrix.cfg.python-version }} • ${{ matrix.cfg.runs-on }}"
    runs-on: ${{ matrix.cfg.runs-on }}

    steps:

      # fetch-depth: 0 gets git history so Psi4 version is computable
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

      # equivalent to `call vcvarsall.bat x86_amd64`. see Azure script to follow cmdline.
    - name: Prepare compiler environment for Windows
      if: ${{ runner.os == 'Windows' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86_amd64
        toolset: 14.0
        #arch: x64

    - name: Write Conda Env Files
      shell: bash -l {0}
      run: |
        cat > build.yaml <<EOF
        name: test
        channels:
          - conda-forge
          - defaults
        dependencies:
          - anaconda-client
          - anaconda-project
          - conda-build
          - conda-verify
          - blas=*=mkl
          - cmake
          - conda-forge::eigen
          - intel-openmp=2019.1
          - mkl-devel=2019.1
          - networkx
          - ninja
          - conda-forge::numpy
          - pint
          - pybind11=2.7.0
          - pymdi
          - conda-forge::pytest>=7.0.1
          - pytest-xdist
          - python=3.8
          - psi4/label/dev::dftd3
          - psi4/label/dev::gcp
          - conda-forge::gau2grid
          - psi4/label/dev::libint2
          - conda-forge::libxc
          - conda-forge::mpfr
          - conda-forge::mpmath
          - conda-forge::msgpack-python
          - conda-forge::qcelemental
          - conda-forge::qcengine
          - conda-forge::scipy
        EOF

#      # Install Chocolatey (https://chocolatey.org/install#install-with-powershellexe)
#    - name: "Install Chocolatey"
#      shell: cmd
#      run: |
#        Set-ExecutionPolicy Bypass -Scope Process -Force
#        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
#        #Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
#        #  echo "PATH=GITHUB_SHA_SHORT=$(echo $PATH)" >> $env:GITHUB_ENV
#        choco --version
#
#      # Install Miniconda
#    - name: "Install Miniconda"
#      shell: cmd
#      run: |
#        choco install miniconda3 --yes
#        refreshenv
#        ##set PATH="C:\tools\miniconda3\Scripts";"C:\tools\miniconda3";"C:\tools\miniconda3\Library\bin"
#        #;%PATH%
#        ##echo "PATH=%PATH%" >> $env:GITHUB_ENV
#        #echo '##vso[task.setvariable variable=PATH]%PATH%'
#        ##set LIB=C:\tools\miniconda3\Library\lib
#        #;%LIB%
#        ##echo "LIB=%LIB%" >> $env:GITHUB_ENV
#        #echo '##vso[task.setvariable variable=LIB]%LIB%'
#        #conda --version
#
#      # Configure Miniconda
#      #    conda config --append channels conda-forge
#    - name: "Configure Miniconda"
#      shell: cmd
#      run: |
#        conda config --set always_yes yes
#        conda info


#    - uses: conda-incubator/setup-miniconda@v2
#      with:
#        auto-activate-base: true
#        activate-environment: ""

    - name: Create Conda Environment (build)
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: test
        environment-file: build.yaml
        show-channel-urls: true
        python-version: 3.8
        auto-activate-base: false


#      # Create conda enviroment
#      # Note: conda activate doesn't work here, because it creates a new shell!
#      # Note: c-f eigen has Config.cmake file
#    - name: "Install conda packages"
#      shell: cmd /C CALL {0}
#      run: | 
#        conda install cmake ^
#                      conda-forge::eigen ^
#                      intel-openmp=2019.1 ^
#                      mkl-devel=2019.1 ^
#                      networkx ^
#                      ninja ^
#                      numpy ^
#                      pint ^
#                      pybind11=2.7.0 ^
#                      pymdi ^
#                      conda-forge::pytest>=7.0.1 ^
#                      pytest-xdist ^
#                      python=3.8 ^
#                      psi4/label/dev::dftd3 ^
#                      psi4/label/dev::gcp ^
#                      conda-forge::gau2grid ^
#                      psi4/label/dev::libint2 ^
#                      conda-forge::libxc ^
#                      conda-forge::mpfr ^
#                      conda-forge::mpmath ^
#                      conda-forge::msgpack-python ^
#                      conda-forge::qcelemental ^
#                      conda-forge::qcengine ^
#                      scipy ^
#                      -c conda-forge
#        which anaconda
#        conda list

    - name: Environment Information
      shell: cmd /C CALL {0}
      run: >-
        conda info && conda list

      # Install LLVM
      # Note: LLVM distributed by conda is too old
    - name: "Install LLVM"
      shell: cmd /C CALL {0}
      run: |
        choco install llvm --version 13.0.1 --yes
        set PATH=C:\Program Files\LLVM\bin;%PATH%
        echo "PATH=%PATH%" >> $env:GITHUB_ENV
        rem #echo '##vso[task.setvariable variable=PATH]%PATH%'
        clang-cl --version

      # Install Intel OpenMP import library
      # NOTE: libiomp5md.lib is located in conda/win/$(mkl.version)
      #set LIB=$(Build.SourcesDirectory)\conda\win\$(mkl.version);%LIB%
    - name: "Install Intel OpenMP import library"
      shell: cmd /C CALL {0}
      run: |
        cd
        git clone https://github.com/psi4/iomp5md.git
        dir
        set LIB=%cd%\iomp5md\conda\win\2019.1;%LIB%
        echo "LIB=%LIB%" >> $env:GITHUB_ENV
        rem #echo '##vso[task.setvariable variable=LIB]%LIB%'

    - name: "Configure Psi4"
      shell: bash -l {0}
      run: |
        mkdir build
        cd build
        which python
        cmake -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=../install \
              -DCMAKE_C_COMPILER=clang-cl \
              -DCMAKE_CXX_COMPILER=clang-cl \
              -DCMAKE_VERBOSE_MAKEFILE=ON \
              -DENABLE_XHOST=OFF \
              -DCMAKE_CXX_FLAGS="/arch:AVX" \
              -DPython_EXECUTABLE="C:\Miniconda\envs\test\python.exe" \
              -DMPFR_ROOT="C:\Miniconda\envs\test\Library" \
              -DEigen_ROOT="C:\Miniconda\envs\test\Library" \
              -DOpenMP_LIBRARY_DIRS="D:\a\psi4\psi4\iomp5md\conda\win\2019.1" \
              -DMAX_AM_ERI=5 \
              -DBUILD_Libint2_GENERATOR=OFF \
              -DCMAKE_INSIST_FIND_PACKAGE_gau2grid=ON \
              -DCMAKE_INSIST_FIND_PACKAGE_Libint2=ON \
              -DCMAKE_INSIST_FIND_PACKAGE_Libxc=ON \
              -DBUILD_SHARED_LIBS=OFF \
              -S ..

#      # Configure
#    - name: "Configure Psi4"
#      shell: cmd /C CALL {0}
#      run: |
#        rem call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
#        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
#        mkdir build & cd build
#        where python
#        cmake -G Ninja ^
#              -DCMAKE_BUILD_TYPE=Release ^
#              -DCMAKE_INSTALL_PREFIX=../install ^
#              -DCMAKE_C_COMPILER=clang-cl ^
#              -DCMAKE_CXX_COMPILER=clang-cl ^
#              -DENABLE_XHOST=OFF ^
#              -DCMAKE_CXX_FLAGS="/arch:AVX" ^
#              -DMAX_AM_ERI=5 ^
#              -DBUILD_Libint2_GENERATOR=OFF ^
#              -DCMAKE_INSIST_FIND_PACKAGE_gau2grid=ON ^
#              -DCMAKE_INSIST_FIND_PACKAGE_Libint2=ON ^
#              -DCMAKE_INSIST_FIND_PACKAGE_Libxc=ON ^
#              -DBUILD_SHARED_LIBS=OFF ^
#              -S ..

      # Build
    - name: "Build Psi4"
      shell: cmd /C CALL {0}
      working-directory: ./build
      run: |
        rem call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
        cmake --build . ^
              --config Release ^
              -- -j 2

      # Install
    - name: "Install Psi4"
      shell: cmd /C CALL {0}
      working-directory: ./build
      run: |
        rem call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
        cmake --build . ^
              --config Release ^
              --target install ^
              -- -j 2

      # Test (OpenMP)
      # Check if OpenMP configuration had not failed silently
    - name: "Test Psi4 (OpenMP)"
      shell: cmd /C CALL {0}
      working-directory: ./install/lib
      run: |
        python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"

      # Spot Test
    - name: 'Run, Run, Spot, Run Test w envvar'
      shell: cmd /C CALL {0}
      working-directory: ./build
      run: |
        set PATH=..\install\bin;%PATH%
        set KMP_DUPLICATE_LIB_OK=TRUE
        psi4 ..\tests\tu1-h2o-energy\input.dat -o stdout
        psi4 ..\tests\tu1-h2o-energy\input.dat -o stdout -n2

    - name: 'Run, Run, Spot, Run Test w envvar w bash'
      shell: bash -l {0}
      working-directory: ./build
      run: |
        export PATH=../install/bin:$PATH
        export KMP_DUPLICATE_LIB_OK=TRUE
        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout -n2

    - name: 'ldd'
      shell: cmd /C CALL {0}
      run: |
        objdump.exe -p D:\a\psi4\psi4\build\stage\lib\core.lib | grep .dll
        objdump.exe -p D:\a\psi4\psi4\build\stage\lib\psi4\core.cp38-win_amd64.pyd | grep dll

    - name: 'Run, Run, Spot, Run Test w/o envvar'
      shell: cmd /C CALL {0}
      working-directory: ./build
      run: |
        set PATH=..\install\bin;%PATH%
        psi4 ..\tests\tu1-h2o-energy\input.dat -o stdout
        psi4 ..\tests\tu1-h2o-energy\input.dat -o stdout -n2

