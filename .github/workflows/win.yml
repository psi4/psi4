name: Win

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  ecosystem:
    strategy:
      fail-fast: false
      matrix:
        cfg:

          - runs-on: windows-latest
            python-version: "3.8"
            base-channel: "conda-forge"
            cmargs: >
              -DBUILD_SHARED_LIBS=OFF

              #-DCMAKE_CXX_COMPILER=clang-cl
              #-DCMAKE_C_COMPILER=clang-cl

    name: "Win • 🐍 ${{ matrix.cfg.python-version }} • ${{ matrix.cfg.runs-on }}"
    runs-on: ${{ matrix.cfg.runs-on }}

    steps:

      # fetch-depth: 0 gets git history so Psi4 version is computable
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

#      # Install Chocolatey (https://chocolatey.org/install#install-with-powershellexe)
#    - name: "Install Chocolatey"
#      shell: pwsh
#      run: |
#        Set-ExecutionPolicy Bypass -Scope Process -Force
#        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
#        #Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
#        #  echo "PATH=GITHUB_SHA_SHORT=$(echo $PATH)" >> $env:GITHUB_ENV
#        choco --version
#
#      # Install Miniconda
#    - name: "Install Miniconda"
#      shell: pwsh
#      run: |
#        choco install miniconda3 --yes
#        refreshenv
#        ##set PATH="C:\tools\miniconda3\Scripts";"C:\tools\miniconda3";"C:\tools\miniconda3\Library\bin"
#        #;%PATH%
#        ##echo "PATH=%PATH%" >> $env:GITHUB_ENV
#        #echo '##vso[task.setvariable variable=PATH]%PATH%'
#        ##set LIB=C:\tools\miniconda3\Library\lib
#        #;%LIB%
#        ##echo "LIB=%LIB%" >> $env:GITHUB_ENV
#        #echo '##vso[task.setvariable variable=LIB]%LIB%'
#        #conda --version
#
#      # Configure Miniconda
#      #    conda config --append channels conda-forge
#    - name: "Configure Miniconda"
#      shell: pwsh
#      run: |
#        conda config --set always_yes yes
#        conda info


    - uses: conda-incubator/setup-miniconda@v2
      with:
        auto-activate-base: true
        activate-environment: ""


      # Create conda enviroment
      # Note: conda activate doesn't work here, because it creates a new shell!
      # Note: c-f eigen has Config.cmake file
    - name: "Install conda packages"
      shell: pwsh
      run: | 
        conda info
        conda install cmake ^
                      anaconda-project ^
                      conda-build ^
                      conda-forge::eigen ^
                      conda-verify ^
                      intel-openmp=2019.1 ^
                      mkl-devel=2019.1 ^
                      networkx ^
                      ninja ^
                      numpy ^
                      pint ^
                      pybind11=2.7.0 ^
                      pymdi ^
                      conda-forge::pytest>=7.0.1 ^
                      pytest-xdist ^
                      python=3.8 ^
                      psi4/label/dev::dftd3 ^
                      psi4/label/dev::gcp ^
                      conda-forge::gau2grid ^
                      psi4/label/dev::libint2 ^
                      conda-forge::libxc ^
                      conda-forge::mpfr ^
                      conda-forge::mpmath ^
                      conda-forge::msgpack-python ^
                      conda-forge::qcelemental ^
                      conda-forge::qcengine ^
                      scipy
        which anaconda
        conda list

      # Install LLVM
      # Note: LLVM distributed by conda is too old
    - name: "Install LLVM"
      shell: pwsh
      run: |
        choco install llvm --version 13 --yes
        set PATH=C:\Program Files\LLVM\bin;%PATH%
        echo "PATH=%PATH%" >> $env:GITHUB_ENV
        #echo '##vso[task.setvariable variable=PATH]%PATH%'
        clang-cl --version

      # Install Intel OpenMP import library
      # NOTE: libiomp5md.lib is located in conda/win/$(mkl.version)
      #set LIB=$(Build.SourcesDirectory)\conda\win\$(mkl.version);%LIB%
    - name: "Install Intel OpenMP import library"
      shell: pwsh
      run: |
        cd
        git clone https://github.com/psi4/iomp5md.git
        set LIB=%cd%\iomp5md\conda\win\2019.1;%LIB%
        echo "LIB=%LIB%" >> $env:GITHUB_ENV
        #echo '##vso[task.setvariable variable=LIB]%LIB%'

      # Configure
      # -DCMAKE_VERBOSE_MAKEFILE=ON ^
    - name: "Configure Psi4"
      shell: pwsh
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
        mkdir build & cd build
          if "%CMAKE_BUILD_TYPE%"=="Debug" set MAX_AM_ERI=4
          if "%CMAKE_BUILD_TYPE%"=="Release" set MAX_AM_ERI=5
          if not defined MAX_AM_ERI exit 1
          if "%CMAKE_BUILD_TYPE%"=="Debug" set ENABLE_XHOST=OFF
          if "%CMAKE_BUILD_TYPE%"=="Release" set ENABLE_XHOST=ON
          if not defined ENABLE_XHOST exit 1
        cmake -G Ninja ^
              -DCMAKE_BUILD_TYPE=Release ^
              -DCMAKE_INSTALL_PREFIX=../install ^
              -DCMAKE_C_COMPILER=clang-cl ^
              -DCMAKE_CXX_COMPILER=clang-cl ^
              -DENABLE_XHOST=OFF ^
              -DCMAKE_CXX_FLAGS="/arch:AVX" ^
              -DMAX_AM_ERI=5 ^
              -DPython_EXECUTABLE="C:/tools/miniconda3/python.exe" ^
              -DMPFR_ROOT="C:/tools/miniconda3/Library" ^
              -DEigen_ROOT="C:/tools/miniconda3/Library" ^
              -DBUILD_Libint2_GENERATOR=OFF ^
              -DCMAKE_INSIST_FIND_PACKAGE_gau2grid=ON ^
              -DCMAKE_INSIST_FIND_PACKAGE_Libint2=ON ^
              -DCMAKE_INSIST_FIND_PACKAGE_Libxc=ON ^
              -DBUILD_SHARED_LIBS=OFF ^
              -S ..

      # Build
    - name: "Build Psi4"
      shell: pwsh
      working-directory: ./build
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
        cmake --build . ^
              --config Release 
              -- -j 2

      # Install
    - name: "Install Psi4"
      shell: pwsh
      working-directory: ./build
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
        cmake --build . ^
              --config Release ^
              --target install ^
              -- -j 2

      # Test (OpenMP)
      # Check if OpenMP configuration had not failed silently
    - name: "Test Psi4 (OpenMP)"
      shell: pwsh
      working-directory: ./install/lib
      run: |
        python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"

      # Spot Test
    - name: 'Run, Run, Spot, Run Test'
      shell: pwsh
      working-directory: ./build
      run: |
        set PATH=..\install\bin;%PATH%
        psi4 ..\tests\tu1-h2o-energy\input.dat -o stdout

#
#
###########################
#jobs:
#
#  # Configure, build, install, and test job
#  - job: 'windows_build'
#    displayName: 'Windows VS2017'
#    pool:
#      vmImage: 'vs2017-win2016'
#    timeoutInMinutes: 360
#    variables:
#      llvm.version: '11.0.0'
#      mkl.version: '2019.1'
#      cmake.build_type: 'Release'
#      conda.build: false
#      MKL_CBWR: AVX
#      PYTHON_VERSION: '3.8'
#    steps:
#
#      # Test (ctest)
#      - script: |
#          setlocal EnableDelayedExpansion
#          if "%CTEST_TYPE%"=="full" set CTEST_TYPE=".*"
#          ctest --build-config %CMAKE_BUILD_TYPE% ^
#                --label-regex !CTEST_TYPE! ^
#                --output-on-failure ^
#                --parallel %NUMBER_OF_PROCESSORS% ^
#                --timeout 3000
#        displayName: "Test Psi4 (ctest $(ctest.type))"
#        workingDirectory: $(Build.BinariesDirectory)/build
#
#      # Test (pytest)
#      - script: |
#          set PATH=$(Build.BinariesDirectory)\install\bin;%PATH%
#          set PYTHONPATH=$(Build.BinariesDirectory)\install\lib;%PYTHONPATH%
#          psi4 --test %PYTEST_TYPE% -n %NUMBER_OF_PROCESSORS%
#        displayName: "Test Psi4 (pytest $(pytest.type))"
#        workingDirectory: $(Build.BinariesDirectory)
#
#      # Build package
#      - script: |
#          set INSTALL_DIR=$(Build.BinariesDirectory)\install
#          conda config --append channels conda-forge
#          conda config --append channels psi4/label/dev
#          conda build --python %PYTHON_VERSION% ^
#                      conda\win
#          copy /y C:\tools\miniconda3\conda-bld\win-64\psi4-*.bz2 $(Build.ArtifactStagingDirectory)
#        condition: and(succeeded(), or(eq(variables['conda.build'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
#        displayName: "Build Psi4 package"
#
#      # Publish package
#      - task: PublishBuildArtifacts@1
#        inputs:
#          artifactName: conda
#        condition: and(succeeded(), or(eq(variables['conda.build'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
#        displayName: "Publish Psi4 package"
#
#      # Upload package
#      # * use same ANACONDA_TOKEN generated on anaconda.org for GHA and save it in Azure DevOps
#      #   at /psi4/psi4/Pipelines/psi4.psi4 -> Edit button -> Variables button -> new secret var `conda.anaconda_org_token`.
#      # * error handling may need tweaking as I don't know if failure to upload for lack of space (`echo $?`=1) will fail the workflow.
#      - bash: |
#          set -e
#          ls -l /c/tools/miniconda3/conda-bld/win-64/*.tar.bz2
#          echo "Using the mapped env var for this task works and is recommended: $(conda.anaconda_org_token)"
#          anaconda whoami
#          anaconda \
#            --verbose \
#           upload \
#            --label dev \
#            --skip \
#            /c/tools/miniconda3/conda-bld/win-64/*.tar.bz2
#          echo $?
#        env:
#          ANACONDA_API_TOKEN: $(conda.anaconda_org_token)
#        condition: and(succeeded(), or(eq(variables['conda.build'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
#        displayName: "Upload Psi4 package to anaconda.org"
#
#
#
#
#
###########################3
#        shell: bash -l {0}
#
#      # mac_ver line returns, for example, "10.15" for Catalina
#    - name: Prepare compiler environment for macOS
#      if: ${{ runner.os == 'macOS' }}
#      run: |
#        macos_Mm=$(SYSTEM_VERSION_COMPAT=0 python -c "import platform; Mmp = platform.mac_ver()[0]; Mm = '.'.join(Mmp.split('.')[:2]); print(Mm)")
#        echo $macos_Mm
#        curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/$macos_Mm/MacOSX${{ matrix.cfg.target-sdk }}.sdk.tar.xz | sudo tar xf - -C /opt/
#
#      # equivalent to `call vcvarsall.bat x86_amd64`. see Azure script to follow cmdline.
#    - name: Prepare compiler environment for Windows
#      if: ${{ runner.os == 'Windows' }}
#      uses: ilammy/msvc-dev-cmd@v1
#      with:
#        arch: x86_amd64
#        toolset: 14.0
#        #arch: x64
#
#    - name: Write Conda Env Files
#      shell: bash -l {0}
#      run: |
#        cat > build.yaml <<EOF
#        name: defenv
#        channels:
#          - ${{ matrix.cfg.base-channel }}
#        dependencies:
#          - blas=*=mkl
#          - python=${{ matrix.cfg.python-version }}
#            # build
#          - boost-cpp
#          - cmake>=3.16
#            # trying c-comp for osx
#          - c-compiler
#          - cxx-compiler
#          - eigen
#          - fortran-compiler
#          - mkl-devel
#          - mpfr
#          - ninja
#          - pybind11
#            # qc req'd
#          - psi4/label/dev::gau2grid
#          - psi4/label/dev::libint2
#          - psi4/label/dev::qcelemental
#          - psi4/label/dev::qcengine
#          - psi4/label/dev::libxc=5
#            # qc opt'l
#          - psi4/label/dev::ambit
#          - psi4/label/dev::chemps2
#          - psi4/label/dev::dkh
#          - psi4/label/dev::gdma
#          - psi4/label/dev::pcmsolver
#          - psi4/label/dev::simint
#            # tmp win
#          - msgpack-python
#          - numpy
#          - scipy
#          - networkx
#          - pytest
#        EOF
#        if [[ "${{ runner.os }}" == "Linux" ]]; then
#          # <lang>-compiler is only a metapackage for c-f
#          sed -i "s/- c-compiler/- gcc_linux-64/g" build.yaml
#          sed -i "s/- cxx-compiler/- gxx_linux-64/g" build.yaml
#          sed -i "s/- fortran-compiler/- gfortran_linux-64/g" build.yaml
#        fi
#        if [[ "${{ runner.os }}" == "macOS" ]]; then
#          # <lang>-compiler is only a metapackage for c-f
#          sed -E -i.bak "s/- c-compiler/- clang_osx-64/g" build.yaml
#          sed -E -i.bak "s/- cxx-compiler/- clangxx_osx-64/g" build.yaml
#          sed -E -i.bak "s/- fortran-compiler/- gfortran_osx-64/g" build.yaml
#        fi
#        if [[ "${{ runner.os }}" == "Windows" ]]; then
#          # permanent, as we use clang-cl, not c-f compiler
#          sed -i "s/- c-compiler/#- c-compiler/g" build.yaml
#          sed -i "s/- cxx-compiler/#- cxx-compiler/g" build.yaml
#          sed -i "s/- fortran-compiler/#- fortran-compiler/g" build.yaml
#          # semi-permanent
#          sed -i "s;- psi4/label/dev::gau2grid;- gau2grid;g" build.yaml
#          sed -i "s;- psi4/label/dev::libxc;- libxc;g" build.yaml
#          # nyi
#          sed -i "s;- psi4/label/dev::ambit;#- psi4/label/dev::ambit;g" build.yaml
#          sed -i "s;- psi4/label/dev::chemps2;#- psi4/label/dev::chemps2;g" build.yaml
#          sed -i "s;- psi4/label/dev::dkh;#- psi4/label/dev::dkh;g" build.yaml
#          sed -i "s;- psi4/label/dev::gdma;#- psi4/label/dev::gdma;g" build.yaml
#          sed -i "s;- psi4/label/dev::pcmsolver;#- psi4/label/dev::pcmsolver;g" build.yaml
#          sed -i "s;- psi4/label/dev::simint;#- psi4/label/dev::simint;g" build.yaml
#          sed -i "s;- mkl-devel;- mkl-devel=2019.1;g" build.yaml
#        fi
#        cat > run.yaml <<EOF
#        name: defenv
#        channels:
#          - ${{ matrix.cfg.base-channel }}
#        dependencies:
#            # non-qc req'd
#          - blas=*=mkl
#          - msgpack-python
#          - networkx
#          - numpy
#          - pip
#          - python=${{ matrix.cfg.python-version }}
#          - scipy
#            # non-qc opt'l
#          - memory_profiler
#            # qc req'd
#          - psi4/label/dev::gau2grid
#          - psi4/label/dev::libint2
#          - psi4/label/dev::qcelemental
#          - psi4/label/dev::qcengine
#          - psi4/label/dev::libxc
#            # qc req'd from buildtime
#          - psi4/label/dev::ambit
#          - psi4/label/dev::chemps2
#          - psi4/label/dev::dkh
#          - psi4/label/dev::gdma
#          - psi4/label/dev::pcmsolver
#          - psi4/label/dev::simint
#            # qc opt'l
#          - psi4/label/dev::dftd3
#          - psi4/label/dev::pylibefp
#          - psi4/label/dev::fockci
#          - psi4/label/dev::gcp
#          - psi4/label/dev::mp2d
#          - psi4/label/dev::resp
#          - psi4/label/dev::snsmp2
#          - pip:
#             - git+https://github.com/i-pi/i-pi.git@master-py3
#            # test
#          - pytest
#          - pytest-xdist
#          - tomli
#        EOF
#        if [[ "${{ runner.os }}" == "Windows" ]]; then
#          # semi-permanent
#          sed -i "s;- psi4/label/dev::gau2grid;- gau2grid;g" run.yaml
#          sed -i "s;- psi4/label/dev::libxc;- libxc;g" run.yaml
#          # nyi
#          sed -i "s;- psi4/label/dev::ambit;#- psi4/label/dev::ambit;g" run.yaml
#          sed -i "s;- psi4/label/dev::chemps2;#- psi4/label/dev::chemps2;g" run.yaml
#          sed -i "s;- psi4/label/dev::dkh;#- psi4/label/dev::dkh;g" run.yaml
#          sed -i "s;- psi4/label/dev::gdma;#- psi4/label/dev::gdma;g" run.yaml
#          sed -i "s;- psi4/label/dev::pcmsolver;#- psi4/label/dev::pcmsolver;g" run.yaml
#          sed -i "s;- psi4/label/dev::simint;#- psi4/label/dev::simint;g" run.yaml
#          sed -i "s;- psi4/label/dev::pylibefp;#- psi4/label/dev::pylibefp;g" run.yaml
#          sed -i "s;- psi4/label/dev::fockci;#- psi4/label/dev::fockci;g" run.yaml
#          sed -i "s;- psi4/label/dev::mp2d;#- psi4/label/dev::mp2d;g" run.yaml
#        fi
#        cat > runcf.yaml <<EOF
#        name: cfenv
#        channels:
#          - conda-forge
#        dependencies:
#          - blas=*=mkl
#          - python=${{ matrix.cfg.python-version }}
#            # qc opt'l
#          - adcc
#          - cppe
#          - dftd4-python
#          - geometric
#          - openfermionpsi4
#          - pymdi
#          - qcengine
#        EOF
#        if [[ "${{ runner.os }}" == "Windows" ]]; then
#          sed -i "s;- adcc;#- adcc;g" runcf.yaml
#          sed -i "s;- cppe;#- cppe;g" runcf.yaml
#        fi
#        echo "<<<  build.yaml  >>>"
#        cat build.yaml
#        echo "<<<  run.yaml  >>>"
#        cat run.yaml
#        echo "<<<  runcf.yaml  >>>"
#        cat runcf.yaml
#
#    - name: Create Conda Environment (build)
#      uses: conda-incubator/setup-miniconda@v2
#      with:
#        activate-environment: defenv
#        environment-file: build.yaml
#        show-channel-urls: true
#        python-version: ${{ matrix.cfg.python-version }}
#        auto-activate-base: false
#
#    - name: Environment Information
#      shell: bash -l {0}
#      run: |
#        conda info
#        conda list
#
#      # Install Intel OpenMP import library
#      # NOTE: libiomp5md.lib is located in conda/win/$(mkl.version)
#      #set LIB=$(Build.SourcesDirectory)\conda\win\$(mkl.version);%LIB%
#    - name: "Install Intel OpenMP import library"
#      if: ${{ runner.os == 'Windows' }}
#      shell: cmd
#      run: |
#          git clone https://github.com/psi4/iomp5md.git
#
#    - name: Configure with CMake (conda defaults GNU)
#      if: ${{ runner.os == 'Linux' }}
#      run: |
#        cmake \
#          -S. \
#          -B objdir \
#          -G Ninja \
#          -D CMAKE_BUILD_TYPE=Release \
#          -D CMAKE_INSTALL_PREFIX=./install \
#          -D CMAKE_C_COMPILER=${CC} \
#          -D CMAKE_CXX_COMPILER=${CXX} \
#          -D CMAKE_Fortran_COMPILER=${FC} \
#          -D CMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
#          -D CMAKE_INSIST_FIND_PACKAGE_pybind11=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_gau2grid=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_Libint2=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_qcelemental=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_qcengine=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_Libxc=ON \
#          -D ENABLE_ambit=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_ambit=ON \
#          -D ENABLE_CheMPS2=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_CheMPS2=ON \
#          -D ENABLE_dkh=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_dkh=ON \
#          -D ENABLE_gdma=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_gdma=ON \
#          -D ENABLE_PCMSolver=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_PCMSolver=ON \
#          -D ENABLE_simint=ON \
#          -D SIMINT_VECTOR=sse \
#          -D CMAKE_INSIST_FIND_PACKAGE_simint=ON \
#          -D ENABLE_v2rdm_casscf=ON \
#          -D CMAKE_DISABLE_FIND_PACKAGE_v2rdm_casscf=ON \
#          -D ENABLE_OPENMP=ON \
#          -D ENABLE_XHOST=OFF \
#          ${{ matrix.cfg.cmargs }}
#
#    - name: Configure with CMake (conda defaults GNU)
#      if: ${{ runner.os == 'macOS' }}
#      run: |
#        cmake \
#          -S. \
#          -B objdir \
#          -G Ninja \
#          -D CMAKE_BUILD_TYPE=Release \
#          -D CMAKE_INSTALL_PREFIX=./install \
#          -D CMAKE_C_COMPILER=${CC} \
#          -D CMAKE_CXX_COMPILER=${CXX} \
#          -D CMAKE_Fortran_COMPILER=${FC} \
#          -D CMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
#          -D CMAKE_INSIST_FIND_PACKAGE_pybind11=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_gau2grid=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_Libint2=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_qcelemental=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_qcengine=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_Libxc=ON \
#          -D ENABLE_ambit=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_ambit=ON \
#          -D ENABLE_CheMPS2=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_CheMPS2=ON \
#          -D ENABLE_dkh=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_dkh=ON \
#          -D ENABLE_gdma=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_gdma=ON \
#          -D ENABLE_PCMSolver=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_PCMSolver=ON \
#          -D ENABLE_simint=ON \
#          -D SIMINT_VECTOR=sse \
#          -D CMAKE_INSIST_FIND_PACKAGE_simint=ON \
#          -D ENABLE_v2rdm_casscf=ON \
#          -D CMAKE_DISABLE_FIND_PACKAGE_v2rdm_casscf=ON \
#          -D ENABLE_OPENMP=ON \
#          -D ENABLE_XHOST=OFF \
#          -D CMAKE_Fortran_FLAGS="-isysroot /opt/MacOSX${{ matrix.cfg.target-sdk }}.sdk" \
#          -D CMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.cfg.target-sdk }} \
#          -D CMAKE_OSX_SYSROOT="/opt/MacOSX${{ matrix.cfg.target-sdk }}.sdk" \
#          ${{ matrix.cfg.cmargs }}
#
#    - name: Configure with CMake (conda defaults GNU)
#      if: ${{ runner.os == 'Windows' }}
#      run: |
#        cmake \
#          -S. \
#          -B objdir \
#          -G Ninja \
#          -D CMAKE_BUILD_TYPE=Release \
#          -D CMAKE_INSTALL_PREFIX=./install \
#          -D CMAKE_C_COMPILER=clang-cl \
#          -D CMAKE_CXX_COMPILER=clang-cl \
#          -D CMAKE_CXX_FLAGS="/arch:AVX" \
#          -D CMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
#          -D CMAKE_INSIST_FIND_PACKAGE_pybind11=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_gau2grid=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_Libint2=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_qcelemental=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_qcengine=ON \
#          -D CMAKE_INSIST_FIND_PACKAGE_Libxc=ON \
#          -D ENABLE_XHOST=OFF \
#          -D Python_EXECUTABLE="C:/Miniconda/envs/defenv/python.exe" \
#          -D MPFR_ROOT="C:/Miniconda/envs/defenv/Library" \
#          -D Eigen_ROOT="C:/Miniconda/envs/defenv/Library" \
#          ${{ matrix.cfg.cmargs }}
#          #-D ENABLE_OPENMP=ON \
#
#    - name: Compile Psi4
#      run: |
#        cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`
#        #ldd objdir/stage/lib/psi4/core.*.so
#
#    - name: Run, Spot, Run Cmd
#      if: ${{ runner.os == 'Windows' }}
#      shell: cmd
#      working-directory: ./objdir
#      run: |
#        dir D:\a\psi4\psi4\install\bin
#        dir D:\a\psi4\psi4\install\lib
#        dir D:\a\psi4\psi4\install\lib\psi4
#        dir D:\a\psi4\psi4\iomp5md\conda\win\2019.1
#        set LIB=D:\a\psi4\psi4\install\lib;D:\a\psi4\psi4\iomp5md\conda\win\2019.1;C:\Miniconda\envs\defenv\Library\lib;%LIB%
#        set PATH=D:\a\psi4\psi4\install\bin;C:\Miniconda\envs\defenv\Library\bin;%PATH%
#        set PYTHONPATH=D:\a\psi4\psi4\install\lib;D:\a\psi4\psi4\install\lib\psi4;%PYTHONPATH%
#        echo "LIB"
#        echo %LIB%
#        echo "PATH"
#        echo %PATH%
#        echo "PYTHONPATH"
#        echo %PYTHONPATH%
#        echo "where python"
#        where python
#        echo "where psi4"
#        where psi4
#        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
#        ctest --build-config Release -L smoke --output-on-failure
#        #PATH="/D/a/psi4/psi4/objdir/stage/bin":$PATH PYTHONPATH="/D/a/psi4/psi4/objdir/stage/lib":$PYTHONPATH stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
#        #psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
#        python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"
#        #conda install msgpack-python numpy scipy networkx pytest -c conda-forge
#
#    - name: Run, Spot, Run bash
#      if: ${{ runner.os == 'Windows' }}
#      working-directory: ./objdir
#      run: |
#        export LIB="D:/a/psi4/psi4/install/lib":"C:/Miniconda/envs/defenv/Library/lib":$LIB
#        export PATH="D:/a/psi4/psi4/install/bin":"C:/Miniconda/envs/defenv/Library/bin":$PATH
#        export PYTHONPATH="D:/a/psi4/psi4/install/lib":$PYTHONPATH
#        echo "LIB"
#        echo ${LIB}
#        echo "PATH"
#        echo ${PATH}
#        echo "PYTHONPATH"
#        echo ${PYTHONPATH}
#        chmod u+x "D:/a/psi4/psi4/objdir/stage/bin/psi4"
#        chmod u+x "D:/a/psi4/psi4/install/bin/psi4"
#        echo "where python"
#        which python
#        where python
#        echo "where psi4"
#        which psi4
#        where psi4
#        ctest --build-config Release -L smoke --output-on-failure
#        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
#        PATH="/D/a/psi4/psi4/objdir/stage/bin":$PATH PYTHONPATH="/D/a/psi4/psi4/objdir/stage/lib":$PYTHONPATH stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
#        #export LIB="/C/Miniconda/envs/defenv/Library/lib":$LIB
#        #export PATH="/C/Miniconda/envs/defenv/Library/bin":"/D/a/psi4/psi4/objdir/stage/bin":$PATH
#        #export PYTHONPATH="/D/a/psi4/psi4/objdir/stage/lib":$PYTHONPATH
#        #psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
#        python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"
#        #conda install msgpack-python numpy scipy networkx pytest -c conda-forge
#
##2022-03-05T03:39:38.6013587Z -- Installing: D:/a/psi4/psi4/objdir/stage/lib/core.lib
##2022-03-05T03:39:38.6013980Z -- Installing: D:/a/psi4/psi4/objdir/stage/lib/psi4/core.cp39-win_amd64.pyd
##2022-03-05T03:39:38.6014423Z -- Installing: D:/a/psi4/psi4/objdir/stage/share/cmake/psi4/psi4Targets.cmake
##2022-03-05T03:39:38.6014894Z -- Installing: D:/a/psi4/psi4/objdir/stage/share/cmake/psi4/psi4Targets-release.cmake
##2022-03-05T03:39:38.6015310Z -- Installing: D:/a/psi4/psi4/objdir/stage/lib/psi4/metadata.py
##2022-03-05T03:39:38.6015796Z -- Installing: D:/a/psi4/psi4/objdir/stage/bin/psi4
##2022-03-05T03:39:38.6016149Z -- Installing: D:/a/psi4/psi4/objdir/stage/bin/psi4.bat
#
##2022-03-06T04:35:37.5595360Z -- Installing: D:/a/psi4/psi4/install/bin/psi4
##2022-03-06T04:35:37.5601734Z -- Installing: D:/a/psi4/psi4/install/bin/psi4.bat
##2022-03-06T04:35:37.6670562Z -- Installing: D:/a/psi4/psi4/install/lib/core.lib
##2022-03-06T04:35:37.6693658Z -- Installing: D:/a/psi4/psi4/install/lib/psi4
##2022-03-06T04:35:37.6696825Z -- Installing: D:/a/psi4/psi4/install/lib/psi4/core.cp39-win_amd64.pyd
#
#      # Notes: This is clearing away the whole build environment (to make explicit the build and
#      #   runtime dependencies and addons). Then its creating a new runtime environment based on
#      #   psi4 and defaults channel dependencies and addons. This is created at the same environment
#      #   name (so same location on disk as the build env) for non-relocatability reasons. Also
#      #   creating another runtime environment based on conda-forge channel addons. This is held in
#      #   reserve for later.
#    - name: Create Conda Environment (run)
#      run: |
#        conda deactivate
#        conda remove -n defenv --all
#        conda env create --file run.yaml
#        conda env create --file runcf.yaml
#        conda activate defenv
#        conda install conda-forge::pytest>=7.0.1
#        conda list
#        #ldd objdir/stage/lib/psi4/core.*.so
#        cd objdir/stage/lib
#        python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"
#        cd ../..
#        PATH=stage/bin:$PATH psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
#        cd ..
#        objdir/stage/bin/psi4 tests/tu1-h2o-energy/input.dat
#
#    - name: Test Addons with CTest
#      #if: false
#      if: ${{ runner.os == 'Windows' }}
#      working-directory: ./objdir
#      #run: ctest -L addon -j2 --output-on-failure
#      run: ctest -L smoke -j2 --output-on-failure
#
#    - name: Test Addons with Pytest (defaults only)
#      if: false
#      working-directory: ./objdir
#      run: PYTHONPATH=stage/lib pytest -v -rws --durations=15 --cache-clear -m "addon and not long" stage/lib/psi4/tests/
#
#    - name: Test Addons with Pytest (defaults + c-f)
#      working-directory: ./objdir
#      run: |
#        echo $CONDA_PREFIX
#        conda list
#        conda activate --stack cfenv
#        echo $CONDA_PREFIX
#        conda list
#        PYTHONPATH=$CONDA_PREFIX/lib/python${{ matrix.cfg.python-version }}/site-packages/:stage/lib pytest --cache-clear -v -rws --durations=15 -m "addon and not long" stage/lib/psi4/tests/
#
