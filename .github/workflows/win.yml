name: Win

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  ecosystem:
    strategy:
      fail-fast: false
      matrix:
        cfg:

          - runs-on: windows-latest
            python-version: "3.9"
            base-channel: "conda-forge"
            cmargs: >
              -DBUILD_SHARED_LIBS=OFF

              #-DCMAKE_CXX_COMPILER=clang-cl
              #-DCMAKE_C_COMPILER=clang-cl

    name: "Win • 🐍 ${{ matrix.cfg.python-version }} • ${{ matrix.cfg.runs-on }}"
    runs-on: ${{ matrix.cfg.runs-on }}
    defaults:
      run:
        shell: bash -l {0}

    steps:

      # fetch-depth: 0 gets git history so Psi4 version is computable
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

      # equivalent to `call vcvarsall.bat x86_amd64`. see Azure script to follow cmdline.
    - name: Prepare compiler environment for Windows
      if: ${{ runner.os == 'Windows' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Write Conda Env Files
      run: |
        cat > build.yaml <<EOF
        name: defenv
        channels:
          - conda-forge
          - defaults
        dependencies:
          - blas=*=mkl
          - cmake
          - conda-forge::eigen
          - intel-openmp=2019.1
          - mkl-devel=2019.1
          - networkx
          - ninja
          - conda-forge::numpy
          - pint
          - pybind11
          - pymdi
          - conda-forge::pytest>=7.0.1
          - pytest-xdist
          - python=3.9
          - psi4/label/dev::dftd3
          - psi4/label/dev::gcp
          - conda-forge::gau2grid
          - psi4/label/dev::libint2
          - conda-forge::libxc
          - conda-forge::mpfr
          - conda-forge::mpmath
          - conda-forge::msgpack-python
          - conda-forge::qcelemental
          - conda-forge::qcengine
          - conda-forge::scipy
        EOF

    - name: Create Conda Environment (build)
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: defenv
        environment-file: build.yaml
        show-channel-urls: true
        python-version: 3.9
        auto-activate-base: false

    - name: Environment Information
      run: |
        conda info
        conda list

      # NOTE: libiomp5md.lib is located in conda/win/$(mkl.version)
    - name: "Install Intel OpenMP import library"
      if: ${{ runner.os == 'Windows' }}
      run: git clone https://github.com/psi4/iomp5md.git

    - name: "Configure Psi4"
      run: |
        cmake -S . \
              -B objdir \
              -G Ninja \
              -D CMAKE_BUILD_TYPE=Release \
              -D CMAKE_INSTALL_PREFIX=./install \
              -D CMAKE_C_COMPILER=clang-cl \
              -D CMAKE_CXX_COMPILER=clang-cl \
              -D CMAKE_VERBOSE_MAKEFILE=ON \
              -D ENABLE_XHOST=OFF \
              -D CMAKE_CXX_FLAGS="/arch:AVX /wd4018 /wd4101 /wd4996" \
              -D OpenMP_LIBRARY_DIRS="D:\a\psi4\psi4\iomp5md\conda\win\2019.1" \
              -D MAX_AM_ERI=5 \
              -D BUILD_Libint2_GENERATOR=OFF \
              -D CMAKE_INSIST_FIND_PACKAGE_gau2grid=ON \
              -D CMAKE_INSIST_FIND_PACKAGE_Libint2=ON \
              -D CMAKE_INSIST_FIND_PACKAGE_Libxc=ON \
              -D BUILD_SHARED_LIBS=OFF \
              -D ENABLE_OPENMP=ON \
              -D CMAKE_INSIST_FIND_PACKAGE_qcelemental=ON \
              -D CMAKE_INSIST_FIND_PACKAGE_qcengine=ON \
              -D CMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
              -D CMAKE_INSIST_FIND_PACKAGE_pybind11=ON

    - name: Compile Psi4
      run: cmake --build objdir --config Release --target install --parallel 2

      # Check if OpenMP configuration had not failed silently
    - name: "Test Psi4 (OpenMP)"
      working-directory: ./install/lib
      run: |
        python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"

    - name: 'Run, Run, Spot, Run Test w envvar w bash'
      working-directory: ./objdir
      run: |
        export PATH=../install/bin:$PATH
        export KMP_DUPLICATE_LIB_OK=TRUE
        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout -n2

    - name: 'Run, Run, Spot, Run Test w/o envvar w bash'
      working-directory: ./objdir
      run: |
        export PATH=../install/bin:$PATH
        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout -n2

    - name: 'Library Dependencies, ldd (L/M)'
      if: ${{ runner.os != 'Windows' }}
      run: |
        ldd objdir/stage/lib/psi4/core.*.so

    - name: 'Library Dependencies, ldd (W)'
      if: ${{ runner.os == 'Windows' }}
      shell: cmd /C CALL {0}
      run: objdump.exe -p objdir\stage\lib\psi4\core.*.pyd | grep dll

