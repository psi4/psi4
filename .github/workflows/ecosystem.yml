name: Eco

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  ecosystem:
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - runs-on: ubuntu-latest
            python-version: "3.9"  # "3.10" after adcc
            base-channel: "defaults"
            libargs: >
              -DBUILD_SHARED_LIBS=ON

#          - runs-on: macos-latest
#          - runs-on: windows-latest

    name: "Eco • 🐍 ${{ matrix.cfg.python-version }} • ${{ matrix.cfg.runs-on }}"
    runs-on: ${{ matrix.cfg.runs-on }}
    defaults:
      run:
        shell: bash -l {0}

    steps:

    # fetch-depth: 0 gets git history so Psi4 version computable
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Write Conda Env Files
      shell: bash -l {0}
      run: |
        cat > build.yaml <<EOF
        name: defenv
        channels:
          - ${{ matrix.cfg.base-channel }}
        dependencies:
          - blas=*=mkl
          - python=${{ matrix.cfg.python-version }}
            # build
          - boost-cpp=1.71
          - cmake>=3.16
          - cxx-compiler
          - eigen
          - fortran-compiler
          - mkl-devel
          - mpfr
          - ninja
          - pybind11
            # qc req'd
          - psi4/label/dev::gau2grid
          - psi4/label/dev::libint2
          - psi4/label/dev::qcelemental
          - psi4/label/dev::qcengine
          - psi4/label/dev::libxc=5
            # qc opt'l
          - psi4/label/dev::ambit
          - psi4/label/dev::chemps2
          - psi4/label/dev::dkh
          - psi4/label/dev::gdma
          - psi4/label/dev::pcmsolver
          - psi4/label/dev::simint
        EOF
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          # <lang>-compiler is only a metapackage for c-f
          sed -i "s/- cxx-compiler/- gxx_linux-64/g" build.yaml
          sed -i "s/- fortran-compiler/- gfortran_linux-64/g" build.yaml
        fi
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # permanent, as we use clang-cl, not c-f compiler
          sed -i "s/- cxx-compiler/#- cxx-compiler/g" build.yaml
        fi
        cat > run.yaml <<EOF
        name: defenv
        channels:
          - ${{ matrix.cfg.base-channel }}
        dependencies:
            # non-qc req'd
          - blas=*=mkl
          - msgpack-python
          - networkx
          - numpy
          - pip
          - python=${{ matrix.cfg.python-version }}
          - scipy
            # non-qc opt'l
          - memory_profiler
            # qc req'd
          - psi4/label/dev::gau2grid
          - psi4/label/dev::libint2
          - psi4/label/dev::qcelemental
          - psi4/label/dev::qcengine
          - psi4/label/dev::libxc
            # qc req'd from buildtime
          - psi4/label/dev::ambit
          - psi4/label/dev::chemps2
          - psi4/label/dev::dkh
          - psi4/label/dev::gdma
          - psi4/label/dev::pcmsolver
          - psi4/label/dev::simint
            # qc opt'l
          - psi4/label/dev::dftd3
          - psi4/label/dev::pylibefp
          - psi4/label/dev::fockci
          - psi4/label/dev::gcp
          - psi4/label/dev::mp2d
          - psi4/label/dev::resp
          - psi4/label/dev::snsmp2
          - pip:
             - git+https://github.com/i-pi/i-pi.git@master-py3
            # test
          - pytest
          - pytest-xdist
          - tomli
        EOF
        cat > runcf.yaml <<EOF
        name: cfenv
        channels:
          - conda-forge
        dependencies:
          - blas=*=mkl
          - python=${{ matrix.cfg.python-version }}
            # qc opt'l
          - adcc
          - cppe
          #- dftd4-python
          #- geometric
          #- pymdi
          - qcengine
        EOF
        cat run.yaml


        #pandas!=1.3.0 \



    - name: Create Conda Environment (build)
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: defenv
        environment-file: build.yaml
        show-channel-urls: true
        python-version: ${{ matrix.cfg.python-version }}
        auto-activate-base: false

#      if: ${{ runner.os == 'macOS' }}
#      if: ${{ runner.os == 'Windows' }}
#      if: ${{ runner.os == 'Linux' }}
#      shell: bash -l {0}
#      run: |
#        conda remove eigen
#        conda create -n onlyeigen eigen -c conda-forge

    - name: Environment Information
      shell: bash -l {0}
      run: |
        conda info
        conda list

    - name: Prepare compiler environment for Windows
      if: ${{ runner.os == 'Windows' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Configure with CMake (conda defaults GNU)
      run: |
        cmake \
          -S. \
          -B objdir \
          -G Ninja \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_C_COMPILER=${CC} \
          -D CMAKE_CXX_COMPILER=${CXX} \
          -D CMAKE_Fortran_COMPILER=${FC} \
          -D CMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
          -D CMAKE_INSIST_FIND_PACKAGE_pybind11=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_gau2grid=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_Libint2=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_qcelemental=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_qcengine=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_Libxc=ON \
          -D ENABLE_ambit=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_ambit=ON \
          -D ENABLE_CheMPS2=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_CheMPS2=ON \
          -D ENABLE_dkh=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_dkh=ON \
          -D ENABLE_gdma=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_gdma=ON \
          -D ENABLE_PCMSolver=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_PCMSolver=ON \
          -D ENABLE_simint=ON \
          -D SIMINT_VECTOR=sse \
          -D CMAKE_INSIST_FIND_PACKAGE_simint=ON \
          -D ENABLE_v2rdm_casscf=ON \
          -D CMAKE_DISABLE_FIND_PACKAGE_v2rdm_casscf=ON \
          -D ENABLE_OPENMP=ON \
          -D ENABLE_XHOST=OFF \
          ${{ matrix.cfg.libargs }}

    - name: Compile Psi4
      run: |
        cmake --build objdir -j`getconf _NPROCESSORS_ONLN`
        ldd objdir/stage/lib/psi4/core.*.so

      # Notes: This is clearing away the whole build environment (to make explicit the build and
      #   runtime dependencies and addons). Then its creating a new runtime environment based on
      #   psi4 and defaults channel dependencies and addons. This is created at the same environment
      #   name (so same location on disk as the build env) for non-relocatability reasons. Also
      #   creating another runtime environment based on conda-forge channel addons. This is held in
      #   reserve for later.
    - name: Create Conda Environment (run)
      run: |
        conda deactivate
        conda remove -n defenv --all
        conda env create --file run.yaml
        conda env create --file runcf.yaml
        conda activate defenv
        conda install conda-forge::pytest>=7.0.1
        conda list
        ldd objdir/stage/lib/psi4/core.*.so
        objdir/stage/bin/psi4 tests/tu1-h2o-energy/input.dat

    - name: Test Addons with CTest
      if: false
      working-directory: ./objdir
      run: ctest -L addon -j2 --output-on-failure

    - name: Test Addons with Pytest (defaults only)
      working-directory: ./objdir
      run: PYTHONPATH=stage/lib pytest -v -rws --durations=15 -m "addon and not long" stage/lib/psi4/tests/

    - name: Test Addons with Pytest (defaults + c-f)
      working-directory: ./objdir
      run: |
        echo $CONDA_PREFIX
        conda list
        conda activate --stack cfenv
        echo $CONDA_PREFIX
        conda list
        PYTHONPATH=$CONDA_PREFIX/lib/python${{ matrix.cfg.python-version }}/site-packages/:stage/lib pytest -v -rws --durations=15 -m "addon and not long" stage/lib/psi4/tests/

