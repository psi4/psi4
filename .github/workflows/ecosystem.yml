name: Eco

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  ecosystem:
    strategy:
      fail-fast: false
      matrix:
        cfg:

          #- runs-on: ubuntu-latest
          #  python-version: "3.10"
          #  base-channel: "defaults"
          #  cmargs: >
          #    -DBUILD_SHARED_LIBS=ON

          - runs-on: macos-latest
            python-version: "3.10"
            base-channel: "defaults"
            target-sdk: "10.10"
            cmargs: >
              -D BUILD_SHARED_LIBS=ON
              -D OpenMP_C_FLAG="-fopenmp=libiomp5"
              -D OpenMP_CXX_FLAG="-fopenmp=libiomp5"
            # Notes:
            # * libiomp5 is picking up naturally but left explicit as guide

          - runs-on: windows-latest
            python-version: "3.8"
            base-channel: "conda-forge"
            cmargs: >
              -D BUILD_SHARED_LIBS=OFF

          #    #-DCMAKE_CXX_COMPILER=clang-cl
          #    #-DCMAKE_C_COMPILER=clang-cl

    name: "Eco • 🐍 ${{ matrix.cfg.python-version }} • ${{ matrix.cfg.runs-on }}"
    runs-on: ${{ matrix.cfg.runs-on }}
    defaults:
      run:
        shell: bash -l {0}

    steps:

    - name: Quick cancel
      if: true
      run: return 5

      # fetch-depth: 0 gets git history so Psi4 version is computable
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

      # mac_ver line returns, for example, "10.15" for Catalina, "11.6" for Big Sur. but phracker doesn't support all minor, so some logic to hardcode.
    - name: Prepare compiler environment for macOS
      if: ${{ runner.os == 'macOS' }}
      run: |
        macos_Mm=$(SYSTEM_VERSION_COMPAT=0 python -c "import platform; Mmp = platform.mac_ver()[0]; Mm = '.'.join(Mmp.split('.')[:2]); print(Mm)")
        macos_M=$(SYSTEM_VERSION_COMPAT=0 python -c "import platform; Mmp = platform.mac_ver()[0]; M = '.'.join(Mmp.split('.')[:1]); print(M)")
        echo $macos_Mm $macos_M
        if [[ "${macos_M}" == "11" ]]; then
            macos_Mm=11.3
        fi
        echo $macos_Mm
        curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/${macos_Mm}/MacOSX${{ matrix.cfg.target-sdk }}.sdk.tar.xz | sudo tar xf - -C /opt/

      # equivalent to `call vcvarsall.bat x86_amd64`. see Azure script to follow cmdline.
    - name: Prepare compiler environment for Windows
      if: ${{ runner.os == 'Windows' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86_amd64
        toolset: 14.0
        #arch: x64

    - name: Write Conda Env Files
      shell: bash -l {0}
      run: |
        cat > build.yaml <<EOF
        name: defenv
        channels:
          - ${{ matrix.cfg.base-channel }}
        dependencies:
          - blas=*=mkl
          - python=${{ matrix.cfg.python-version }}
            # build
          - boost-cpp
          - cmake>=3.16
            # trying c-comp for osx
          - c-compiler
          - cxx-compiler
          - eigen
          - fortran-compiler
          - mkl-devel
          - mpfr
          - ninja
          - pybind11
            # qc req'd
          - psi4/label/dev::gau2grid
          - psi4/label/dev::libint2
          - psi4/label/dev::qcelemental
          - psi4/label/dev::qcengine
          - psi4/label/dev::libxc=5
            # qc opt'l
          - psi4/label/dev::ambit
          - psi4/label/dev::chemps2
          - psi4/label/dev::dkh
          - psi4/label/dev::gdma
          - psi4/label/dev::pcmsolver
          - psi4/label/dev::simint
            # tmp win
          - msgpack-python
          - numpy
          - scipy
          - networkx
          - pytest
        EOF
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          # <lang>-compiler is only a metapackage for c-f
          sed -i "s/- c-compiler/- gcc_linux-64/g" build.yaml
          sed -i "s/- cxx-compiler/- gxx_linux-64/g" build.yaml
          sed -i "s/- fortran-compiler/- gfortran_linux-64/g" build.yaml
        fi
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          # <lang>-compiler is only a metapackage for c-f
          sed -E -i.bak "s;- c-compiler;- clang_osx-64;g" build.yaml
          sed -E -i.bak "s;- cxx-compiler;- clangxx_osx-64;g" build.yaml
          sed -E -i.bak "s;- fortran-compiler;- gfortran_osx-64;g" build.yaml
        fi
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # permanent, as we use clang-cl, not c-f compiler
          sed -i "s;- c-compiler;#- c-compiler;g" build.yaml
          sed -i "s;- cxx-compiler;#- cxx-compiler;g" build.yaml
          sed -i "s;- fortran-compiler;#- fortran-compiler;g" build.yaml
          # semi-permanent
          sed -i "s;- psi4/label/dev::gau2grid;- gau2grid;g" build.yaml
          sed -i "s;- psi4/label/dev::libxc;- libxc;g" build.yaml
          # nyi
          sed -i "s;- psi4/label/dev::ambit;#- psi4/label/dev::ambit;g" build.yaml
          sed -i "s;- psi4/label/dev::chemps2;#- psi4/label/dev::chemps2;g" build.yaml
          sed -i "s;- psi4/label/dev::dkh;#- psi4/label/dev::dkh;g" build.yaml
          sed -i "s;- psi4/label/dev::gdma;#- psi4/label/dev::gdma;g" build.yaml
          sed -i "s;- psi4/label/dev::pcmsolver;#- psi4/label/dev::pcmsolver;g" build.yaml
          sed -i "s;- psi4/label/dev::simint;#- psi4/label/dev::simint;g" build.yaml
          sed -i "s;- mkl-devel;- mkl-devel=2019.1;g" build.yaml
        fi
        if [[ "${{ runner.os }}" == "Windows" ]]; then
        cat > build.yaml <<EOF
        name: defenv
        channels:
          #- conda-forge
          - defaults
        dependencies:
          - anaconda-client
          - anaconda-project
          - conda-build
          - conda-verify
          - blas=*=mkl
          - cmake
          - conda-forge::eigen
          - intel-openmp=2019.1
          - mkl-devel=2019.1
          - networkx
          - ninja
          - conda-forge::numpy
          - pint
          - pybind11=2.7.0
          - pymdi
          - conda-forge::pytest>=7.0.1
          - pytest-xdist
          - python=3.8
          - psi4/label/dev::dftd3
          - psi4/label/dev::gcp
          - conda-forge::gau2grid
          - psi4/label/dev::libint2
          - conda-forge::libxc
          - conda-forge::mpfr
          - conda-forge::mpmath
          - conda-forge::msgpack-python
          - conda-forge::qcelemental
          - conda-forge::qcengine
          - conda-forge::scipy
        EOF
        fi
        cat > run.yaml <<EOF
        name: defenv
        channels:
          - ${{ matrix.cfg.base-channel }}
        dependencies:
            # non-qc req'd
          - blas=*=mkl
          - msgpack-python
          - networkx
          - numpy
          - pip
          - python=${{ matrix.cfg.python-version }}
          - scipy
            # non-qc opt'l
          - memory_profiler
            # qc req'd
          - psi4/label/dev::gau2grid
          - psi4/label/dev::libint2
          - psi4/label/dev::qcelemental
          - psi4/label/dev::qcengine
          - psi4/label/dev::libxc
            # qc req'd from buildtime
          - psi4/label/dev::ambit
          - psi4/label/dev::chemps2
          - psi4/label/dev::dkh
          - psi4/label/dev::gdma
          - psi4/label/dev::pcmsolver
          - psi4/label/dev::simint
            # qc opt'l
          - psi4/label/dev::dftd3
          - psi4/label/dev::pylibefp
          - psi4/label/dev::fockci
          - psi4/label/dev::gcp
          - psi4/label/dev::mp2d
          - psi4/label/dev::resp
          - psi4/label/dev::snsmp2
          - pip:
             - git+https://github.com/i-pi/i-pi.git@master-py3
            # test
          - pytest
          - pytest-xdist
          - tomli
        EOF
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # semi-permanent
          sed -i "s;- psi4/label/dev::gau2grid;- gau2grid;g" run.yaml
          sed -i "s;- psi4/label/dev::libxc;- libxc;g" run.yaml
          # nyi
          sed -i "s;- psi4/label/dev::ambit;#- psi4/label/dev::ambit;g" run.yaml
          sed -i "s;- psi4/label/dev::chemps2;#- psi4/label/dev::chemps2;g" run.yaml
          sed -i "s;- psi4/label/dev::dkh;#- psi4/label/dev::dkh;g" run.yaml
          sed -i "s;- psi4/label/dev::gdma;#- psi4/label/dev::gdma;g" run.yaml
          sed -i "s;- psi4/label/dev::pcmsolver;#- psi4/label/dev::pcmsolver;g" run.yaml
          sed -i "s;- psi4/label/dev::simint;#- psi4/label/dev::simint;g" run.yaml
          sed -i "s;- psi4/label/dev::pylibefp;#- psi4/label/dev::pylibefp;g" run.yaml
          sed -i "s;- psi4/label/dev::fockci;#- psi4/label/dev::fockci;g" run.yaml
          sed -i "s;- psi4/label/dev::mp2d;#- psi4/label/dev::mp2d;g" run.yaml
        fi
        cat > runcf.yaml <<EOF
        name: cfenv
        channels:
          - conda-forge
        dependencies:
          - blas=*=mkl
          - python=${{ matrix.cfg.python-version }}
            # qc opt'l
          - adcc
          - cppe
          #- dftd4-python
          #- geometric
          #- openfermionpsi4
          #- pymdi
          - qcengine
        EOF
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          sed -E -i.bak "s;- openfermionpsi4;#- openfermionpsi4;g" runcf.yaml
        fi
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          sed -i "s;- adcc;#- adcc;g" runcf.yaml
          sed -i "s;- cppe;#- cppe;g" runcf.yaml
        fi
        echo "<<<  build.yaml  >>>"
        cat build.yaml
        echo "<<<  run.yaml  >>>"
        cat run.yaml
        echo "<<<  runcf.yaml  >>>"
        cat runcf.yaml

    - name: Create Conda Environment (build)
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: defenv
        environment-file: build.yaml
        show-channel-urls: true
        python-version: ${{ matrix.cfg.python-version }}
        auto-activate-base: false

    - name: Environment Information
      shell: bash -l {0}
      run: |
        conda info
        conda list

      # Install Intel OpenMP import library
      # NOTE: libiomp5md.lib is located in conda/win/$(mkl.version)
      #set LIB=$(Build.SourcesDirectory)\conda\win\$(mkl.version);%LIB%
    - name: "Install Intel OpenMP import library"
      if: ${{ runner.os == 'Windows' }}
      shell: cmd
      run: |
          git clone https://github.com/psi4/iomp5md.git

    - name: Configure with CMake (conda defaults GNU)
      if: ${{ runner.os == 'Linux' }}
      run: |
        cmake \
          -S. \
          -B objdir \
          -G Ninja \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=./install \
          -D CMAKE_C_COMPILER=${CC} \
          -D CMAKE_CXX_COMPILER=${CXX} \
          -D CMAKE_Fortran_COMPILER=${FC} \
          -D CMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
          -D CMAKE_INSIST_FIND_PACKAGE_pybind11=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_gau2grid=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_Libint2=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_qcelemental=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_qcengine=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_Libxc=ON \
          -D ENABLE_ambit=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_ambit=ON \
          -D ENABLE_CheMPS2=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_CheMPS2=ON \
          -D ENABLE_dkh=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_dkh=ON \
          -D ENABLE_gdma=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_gdma=ON \
          -D ENABLE_PCMSolver=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_PCMSolver=ON \
          -D ENABLE_simint=ON \
          -D SIMINT_VECTOR=sse \
          -D CMAKE_INSIST_FIND_PACKAGE_simint=ON \
          -D ENABLE_v2rdm_casscf=ON \
          -D CMAKE_DISABLE_FIND_PACKAGE_v2rdm_casscf=ON \
          -D ENABLE_OPENMP=ON \
          -D ENABLE_XHOST=OFF \
          ${{ matrix.cfg.cmargs }}

    - name: Configure with CMake (conda defaults GNU)
      if: ${{ runner.os == 'macOS' }}
      run: |
        cmake \
          -S. \
          -B objdir \
          -G Ninja \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=./install \
          -D CMAKE_C_COMPILER=${CC} \
          -D CMAKE_CXX_COMPILER=${CXX} \
          -D CMAKE_Fortran_COMPILER=${FC} \
          -D CMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
          -D CMAKE_INSIST_FIND_PACKAGE_pybind11=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_gau2grid=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_Libint2=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_qcelemental=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_qcengine=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_Libxc=ON \
          -D ENABLE_ambit=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_ambit=ON \
          -D ENABLE_CheMPS2=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_CheMPS2=ON \
          -D ENABLE_dkh=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_dkh=ON \
          -D ENABLE_gdma=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_gdma=ON \
          -D ENABLE_PCMSolver=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_PCMSolver=ON \
          -D ENABLE_simint=ON \
          -D SIMINT_VECTOR=sse \
          -D CMAKE_INSIST_FIND_PACKAGE_simint=ON \
          -D ENABLE_v2rdm_casscf=ON \
          -D CMAKE_DISABLE_FIND_PACKAGE_v2rdm_casscf=ON \
          -D ENABLE_OPENMP=ON \
          -D ENABLE_XHOST=OFF \
          -D CMAKE_Fortran_FLAGS="-isysroot /opt/MacOSX${{ matrix.cfg.target-sdk }}.sdk" \
          -D CMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.cfg.target-sdk }} \
          -D CMAKE_OSX_SYSROOT="/opt/MacOSX${{ matrix.cfg.target-sdk }}.sdk" \
          ${{ matrix.cfg.cmargs }}

    - name: Configure with CMake (conda defaults GNU)
      if: ${{ runner.os == 'Windows' }}
      run: |
        cmake \
          -S. \
          -B objdir \
          -G Ninja \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=./install \
          -D CMAKE_C_COMPILER=clang-cl \
          -D CMAKE_CXX_COMPILER=clang-cl \
          -D CMAKE_VERBOSE_MAKEFILE=ON \
          -D CMAKE_CXX_FLAGS="/arch:AVX" \
          -D CMAKE_INSIST_FIND_PACKAGE_gau2grid=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_Libint2=ON \
          -D CMAKE_INSIST_FIND_PACKAGE_Libxc=ON \
          -D ENABLE_XHOST=OFF \
          -D Python_EXECUTABLE="C:/Miniconda/envs/defenv/python.exe" \
          -D MPFR_ROOT="C:/Miniconda/envs/defenv/Library" \
          -D Eigen_ROOT="C:/Miniconda/envs/defenv/Library" \
          -D MAX_AM_ERI=5 \
          -D BUILD_Libint2_GENERATOR=OFF \
          ${{ matrix.cfg.cmargs }}
          #-D ENABLE_OPENMP=ON \
          #-D CMAKE_INSIST_FIND_PACKAGE_qcelemental=ON \
          #-D CMAKE_INSIST_FIND_PACKAGE_qcengine=ON \
          #-D CMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
          #-D CMAKE_INSIST_FIND_PACKAGE_pybind11=ON \

    - name: Compile Psi4
      run: |
        cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`
        #ldd objdir/stage/lib/psi4/core.*.so

    - name: Run, Spot, Run Cmd
      #if: ${{ runner.os == 'Windows' }}
      if: false
      shell: cmd
      working-directory: ./objdir
      run: |
        dir D:\a\psi4\psi4\install\bin
        dir D:\a\psi4\psi4\install\lib
        dir D:\a\psi4\psi4\install\lib\psi4
        dir D:\a\psi4\psi4\iomp5md\conda\win\2019.1
        set LIB=D:\a\psi4\psi4\install\lib;D:\a\psi4\psi4\iomp5md\conda\win\2019.1;C:\Miniconda\envs\defenv\Library\lib;%LIB%
        set PATH=D:\a\psi4\psi4\install\bin;C:\Miniconda\envs\defenv\Library\bin;%PATH%
        set PYTHONPATH=D:\a\psi4\psi4\install\lib;D:\a\psi4\psi4\install\lib\psi4;%PYTHONPATH%
        echo "LIB"
        echo %LIB%
        echo "PATH"
        echo %PATH%
        echo "PYTHONPATH"
        echo %PYTHONPATH%
        echo "where python"
        where python
        echo "where psi4"
        where psi4
        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
        ctest --build-config Release -L smoke --output-on-failure
        #PATH="/D/a/psi4/psi4/objdir/stage/bin":$PATH PYTHONPATH="/D/a/psi4/psi4/objdir/stage/lib":$PYTHONPATH stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
        #psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
        python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"
        #conda install msgpack-python numpy scipy networkx pytest -c conda-forge

    - name: Run, Spot, Run bash
      if: ${{ runner.os == 'Windows' }}
      working-directory: ./objdir
      run: |
        export LIB="D:/a/psi4/psi4/install/lib":"C:/Miniconda/envs/defenv/Library/lib":$LIB
        export PATH="D:/a/psi4/psi4/install/bin":"C:/Miniconda/envs/defenv/Library/bin":$PATH
        export PYTHONPATH="D:/a/psi4/psi4/install/lib":$PYTHONPATH
        echo "LIB"
        echo ${LIB}
        echo "PATH"
        echo ${PATH}
        echo "PYTHONPATH"
        echo ${PYTHONPATH}
        #chmod u+x "D:/a/psi4/psi4/objdir/stage/bin/psi4"
        #chmod u+x "D:/a/psi4/psi4/install/bin/psi4"
        #echo "where python"
        #which python
        #where python
        #echo "where psi4"
        #which psi4
        #where psi4
        #ctest --build-config Release -L smoke --output-on-failure
        export KMP_DUPLICATE_LIB_OK=TRUE
        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout -n2
        unset KMP_DUPLICATE_LIB_OK
        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
        psi4 ../tests/tu1-h2o-energy/input.dat -o stdout -n2
        PATH="/D/a/psi4/psi4/objdir/stage/bin":$PATH PYTHONPATH="/D/a/psi4/psi4/objdir/stage/lib":$PYTHONPATH stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
        #export LIB="/C/Miniconda/envs/defenv/Library/lib":$LIB
        #export PATH="/C/Miniconda/envs/defenv/Library/bin":"/D/a/psi4/psi4/objdir/stage/bin":$PATH
        #export PYTHONPATH="/D/a/psi4/psi4/objdir/stage/lib":$PYTHONPATH
        #psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
        python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"

      # Notes: This is clearing away the whole build environment (to make explicit the build and
      #   runtime dependencies and addons). Then its creating a new runtime environment based on
      #   psi4 and defaults channel dependencies and addons. This is created at the same environment
      #   name (so same location on disk as the build env) for non-relocatability reasons. Also
      #   creating another runtime environment based on conda-forge channel addons. This is held in
      #   reserve for later.
    - name: Create Conda Environment (run)
      run: |
        conda deactivate
        conda remove -n defenv --all
        conda env create --file run.yaml
        conda env create --file runcf.yaml
        conda activate defenv
        conda install conda-forge::pytest>=7.0.1
        conda list
        #ldd objdir/stage/lib/psi4/core.*.so
        cd objdir/stage/lib
        python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"
        cd ../..
        PATH=stage/bin:$PATH psi4 ../tests/tu1-h2o-energy/input.dat -o stdout
        cd ..
        objdir/stage/bin/psi4 tests/tu1-h2o-energy/input.dat

    - name: Test Addons with CTest
      #if: false
      if: ${{ runner.os == 'Windows' }}
      working-directory: ./objdir
      #run: ctest -L addon -j2 --output-on-failure
      run: ctest -L smoke -j2 --output-on-failure

    - name: Test Addons with Pytest (defaults only)
      if: false
      working-directory: ./objdir
      run: PYTHONPATH=stage/lib pytest -v -rws --durations=15 --cache-clear -m "addon and not long" stage/lib/psi4/tests/

    - name: Test Addons with Pytest (defaults + c-f)
      working-directory: ./objdir
      run: |
        echo $CONDA_PREFIX
        conda list
        conda activate --stack cfenv
        echo $CONDA_PREFIX
        conda list
        PYTHONPATH=$CONDA_PREFIX/lib/python${{ matrix.cfg.python-version }}/site-packages/:stage/lib pytest --cache-clear -v -rws --durations=15 -m "addon and not long" stage/lib/psi4/tests/

# Notes
#
# Error: (W) "OMP: Error #15: Initializing libiomp5md.dll, but found libomp.dll already initialized." or analysis shows linked to libomp.dll
# Soln: feed OpenMP_LIBRARY_DIRS so selects correct libiomp5md.lib so analysis shows linked to libiomp5md.dll
